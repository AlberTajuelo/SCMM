@namespace SCMM.Web.Client.Shared.Dialog
@using SCMM.Steam.Data.Models.Enums
@using SCMM.Web.Data.Models.UI.Item
@inject ILogger<ViewItemCollectionDialog> Logger
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudDialog>
    <TitleContent>
        @if (Collection == null)
        {
            <MudText Typo="MudBlazor.Typo.h6">@CollectionName</MudText>
        } 
        else
        {
            <MudTooltip Text="@Collection.AuthorName">
                <MudAvatar Image="@Collection.AuthorAvatarUrl" Size="MudBlazor.Size.Medium" />
            </MudTooltip>
            <div class="d-inline-block ml-2">
                <div class="Collection-Name">
                    <MudText Typo="MudBlazor.Typo.h6">@Collection.Name</MudText>
                </div>
                <div class="Collection-Description">
                    <MudText Typo="MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Secondary">
                        <span>There are <strong>@Collection.Items.Count items</strong> in this collection. Total cost: <strong>@Collection.BuyNowCurrency.ToPriceString(Collection.BuyNowPrice.Value)</strong></span>
                    </MudText>
                </div>
            </div>
        }
    </TitleContent>
    <DialogContent>
        @if (Collection == null)
        {
            <Loading Message="Loading item collection..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
        } 
        else
        {
            <MudGrid Style="max-height:90vh; overflow-x:hidden; overflow-y:scroll">
                @foreach (var item in Collection.Items)
                {
                    <MudItem xs="6" sm="3" md="2">
                        <ItemDescriptionDetails Item="@item" />
                    </MudItem>
                }
            </MudGrid>
        }
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter] 
    public MudDialogInstance Dialog { get; set; }

    [Parameter]
    public string CollectionName { get; set; }
    
    [Parameter]
    public string CollectionUrl { get; set; }

    private ItemCollectionDTO Collection { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Dialog.Options.CloseButton = true;
        Dialog.Options.MaxWidth = MudBlazor.MaxWidth.Medium;
        Dialog.SetOptions(Dialog.Options);

        try
        {
            Collection = await Http.GetFromJsonAsync<ItemCollectionDTO>(CollectionUrl);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading the item collection");
            Snackbar.Add($"Unable to load item collection. {ex.Message}", MudBlazor.Severity.Error);
        }
    }

}
