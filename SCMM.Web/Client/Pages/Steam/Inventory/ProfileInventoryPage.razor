@page "/steam/inventory/{SteamId}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SCMM.Web.Shared.Domain.DTOs.MarketItems;
@using SCMM.Web.Shared.Domain.DTOs
@using SCMM.Web.Shared
@namespace SCMM.Web.Client.Pages.Steam.Inventory
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<style>
    
    .Search-Text {
        width: 100%;
        margin-bottom: 16px;
    }

    .Search-Text input {
        padding: 8px;
    }

    .Inventory-List-Container {
        max-height: calc(100vh - 230px);
        overflow: auto;
    }

</style>

@if (Profile == null)
{
    @if (ProfileNotFound)
    {
        <NotFound />
    }
    else
    {
        <Loading />
    }
}
else
{
    <DocumentTitle Title="@($"Inventory - {Profile.Name}")" />
    <Grid Container Spacing="@Spacing.Two">
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryProfileCard Profile="@Profile" />
        </Grid>
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Assets">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @InventoryTotalItemCount
                </Total>
            </InventoryTotalCard>
        </Grid>
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Total Investment Value" IconClass="Background-Error">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @if (Currency != null && InventoryTotalInvestedValue > 0)
                    {
                        @State.ToLocalPriceText(InventoryTotalInvestedValue, Currency)
                    }
                    else
                    {
                        <span>—</span>
                    }
                </Total>
            </InventoryTotalCard>
        </Grid>
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Current Market Value" IconClass="Background-Info">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @if (Currency != null && InventoryTotalMarketValue > 0)
                    {
                        @State.ToLocalPriceText(InventoryTotalMarketValue, Currency)
                    }
                    else
                    {
                        <span>—</span>
                    }
                </Total>
            </InventoryTotalCard>
        </Grid>
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Optimistic Resell Value" IconClass="Background-Success">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @if (Currency != null && InventoryTotalResellValue > 0)
                    {
                        @State.ToLocalPriceText(InventoryTotalResellValue, Currency)
                    }
                    else
                    {
                        <span>—</span>
                    }
                </Total>
            </InventoryTotalCard>
        </Grid>
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Optimistic Resell Profit" IconClass="Background-Success">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @if (Currency != null && InventoryTotalProfitValue > 0)
                    {
                        @State.ToLocalPriceText(InventoryTotalProfitValue, Currency)
                    }
                    else
                    {
                        <span>—</span>
                    }
                </Total>
            </InventoryTotalCard>
        </Grid>
        <Grid Item Large="@GridSize.Twelve" ExtraLarge="@GridSize.Six">
            <TextField Class="Search-Text" Variant="@TextFieldVariant.Outlined" Margin="@Margin.None"
                       Placeholder="Type an item name to filter results" />
            <Paper Class="Inventory-List-Container">
                <InventoryItemsTable Items="@InventoryItems" />
            </Paper>
        </Grid>
        <Grid Container Item Large="@GridSize.Twelve" ExtraLarge="@GridSize.Six">
            <Grid Container>
                <Grid ExtraSmall="@GridSize.Twelve">
                    @if (TotalHistoryChart != null)
                    {
                        <ChartJsLineChart @ref="TotalHistoryChartJs" Config="@TotalHistoryChart" />
                    }
                </Grid>
            </Grid>
        </Grid>
    </Grid>
}

@code {

    [CascadingParameter]
    public AppState State { get; set; }

    [Parameter]
    public string SteamId { get; set; }

    private ProfileInventoryDetailsDTO Profile { get; set; }

    private bool ProfileNotFound { get; set; }

    private InventoryItemListDTO[] InventoryItems { get; set; }

    private CurrencyDTO Currency { get; set; }

    private int InventoryTotalItemCount { get; set; }

    private long InventoryTotalInvestedValue { get; set; }

    private long InventoryTotalMarketValue { get; set; }

    private long InventoryTotalResellValue { get; set; }

    private long InventoryTotalProfitValue { get; set; }

    private ChartJsLineChart TotalHistoryChartJs;
    private LineConfig TotalHistoryChart;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Profile = await Http.GetFromJsonAsync<ProfileInventoryDetailsDTO>($"InventoryItems/{SteamId}");
            ProfileNotFound = (Profile == null);
            if (Profile != null)
            {
                InventoryItems = Profile?.InventoryItems?.OrderBy(x => x.Name)?.ToArray();
                RecalculateTotals();
                RedrawTotalHistoryChart();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            ProfileNotFound = true;
        }
    }

    private async Task ViewItem(InventoryItemListDTO item)
    {
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private void RecalculateTotals()
    {
        if (Profile?.InventoryItems?.Any() == true)
        {
            var items = Profile.InventoryItems.Where(x => x.MarketItem != null).ToList();
            Currency = items.FirstOrDefault().MarketItem.Currency;
            InventoryTotalItemCount = items.Sum(x => x.Quantity);
            InventoryTotalInvestedValue = items.Sum(x => (x.BuyPrice ?? 0) * x.Quantity);
            InventoryTotalMarketValue = items.Sum(x => x.MarketItem.Last1hrValue);
            InventoryTotalResellValue = items.Sum(x => x.MarketItem.ResellPrice);
            InventoryTotalProfitValue = items.Where(x => x.BuyPrice > 0).Sum(x => x.MarketItem.ResellPrice - x.MarketItem.ResellTax - (x.BuyPrice ?? 0));
        }
        else
        {
            Currency = null;
            InventoryTotalItemCount = 0;
            InventoryTotalInvestedValue = 0;
            InventoryTotalMarketValue = 0;
            InventoryTotalResellValue = 0;
            InventoryTotalProfitValue = 0;
        }
    }

    private void RedrawTotalHistoryChart()
    {
        if (Profile.ValueHistoryGraph == null)
        {
            return;
        }

        TotalHistoryChart = new LineConfig
        {
            Options = new LineOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new Scales
                {

                    xAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        TotalHistoryChart.Data.Labels = Profile.ValueHistoryGraph.Keys.ToList();

        if (Profile.ValueProfitGraph != null && InventoryTotalProfitValue > 0)
        {
            var totalProfitDataSet = new LineDataset<DoubleWrapper>
            {
                Label = "Resell Profit",
                BackgroundColor = "#388e3c",
                BorderColor = "#1b5e20",
                BorderWidth = 1,
                PointBorderWidth = 2,
                PointRadius = 8,
                LineTension = 0.1,
                Fill = true,
            };
            totalProfitDataSet.AddRange(
                Profile.ValueProfitGraph.Values.Select(x => (DoubleWrapper)x).ToList()
            );
            TotalHistoryChart.Data.Datasets.Add(totalProfitDataSet);
        }

        if (Profile.ValueHistoryGraph != null)
        {
            var totalValueDataSet = new LineDataset<DoubleWrapper>
            {
                Label = "Market Value",
                BackgroundColor = "#1976d2",
                BorderColor = "#0d47a1",
                BorderWidth = 1,
                PointBorderWidth = 2,
                PointRadius = 8,
                LineTension = 0.1,
                Fill = true,
            };
            totalValueDataSet.AddRange(
                Profile.ValueHistoryGraph.Values.Select(x => (DoubleWrapper)x).ToList()
            );
            TotalHistoryChart.Data.Datasets.Add(totalValueDataSet);
        }
    }

}
