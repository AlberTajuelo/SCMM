@page "/steam/items"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SCMM.Web.Shared.Domain.DTOs.Steam
@using SCMM.Web.Shared
@attribute [Authorize]
@inject HttpClient Http

<Row>
    <Column ColumnSize="ColumnSize.Is5">
 
        @if (items == null)
        {
            <Text><em>Loading...</em></Text>
        }
        else
        {
            <DataGrid TItem="SteamItemDTO" Data="@items" SelectedRowChanged="@OnSelectionChanged" Narrow="true" Striped="true" ShowPager="true" PageSize="25">
                <DataGridColumn TItem="SteamItemDTO" Field="@nameof(SteamItemDTO.Description.IconUrl)" Caption="Icon">
                    <DisplayTemplate>
                        <img src="@((context as SteamItemDTO).Description.IconUrl)" style="max-width:24px; max-height:24px" />
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="SteamItemDTO" Field="@nameof(SteamItemDTO.Name)" Caption="Name" Sortable="true">
                    <DisplayTemplate>
                        <Text Weight="TextWeight.Bold">@((context as SteamItemDTO).Name)</Text>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="SteamItemDTO" Field="@nameof(SteamItemDTO.Supply)" Caption="Supply" Sortable="true">
                    <DisplayTemplate>
                        <Text>@((context as SteamItemDTO).Supply.ToSaturationString(@context.Demand))</Text>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="SteamItemDTO" Field="@nameof(SteamItemDTO.Demand)" Caption="Demand" Sortable="true">
                    <DisplayTemplate>
                        <Text>@((context as SteamItemDTO).Demand.ToSaturationString(@context.Supply))</Text>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="SteamItemDTO" Field="@nameof(SteamItemDTO.SellLowestPrice)" Caption="Lowest Price" Sortable="true">
                    <DisplayTemplate>
                        <Text>@((context as SteamItemDTO).Currency.ToPriceString(context.SellLowestPrice))</Text>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="SteamItemDTO" Field="@nameof(SteamItemDTO.SellLowestDelta)" Caption="Lowest Price Delta" Sortable="true">
                    <DisplayTemplate>
                        <Text>@((context as SteamItemDTO).Currency.ToPriceString(context.SellLowestDelta))</Text>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGrid>
        }

    </Column>
    <Column ColumnSize="ColumnSize.Is7">

        @if (selectedItem != null)
        {
            <Row>
                <Column ColumnSize="ColumnSize.Is2">
                    <img src="@selectedItem.Description.IconLargeUrl" />
                </Column>
                <Column ColumnSize="ColumnSize.Is10">
                    <Heading Size="HeadingSize.Is3">
                        @selectedItem.Name
                    </Heading>
                    <Paragraph>
                        <Text>This is a skin for the Metal Facemask item. You will be able to apply this skin when you craft the item in game.</Text>
                    </Paragraph>
                    <div>
                        <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is2">Armour</Badge>
                        <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is2">Metal Facemask</Badge>
                        <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is2">Cloth</Badge>
                        <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is2">Blackout</Badge>
                        <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is2">MDE</Badge>
                        <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is2">50K+</Badge>
                    </div>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is4">
                    <LineChart @ref="lineChart" TItem="double" />
                </Column>
                <Column ColumnSize="ColumnSize.Is4">
                    <Table Narrow="true">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Buy Now Price</TableHeaderCell>
                                <TableHeaderCell>Quantity</TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var order in selectedItem.SellOrders.OrderBy(x => x.Price))
                            {
                                <TableRow>
                                    <TableRowCell>
                                        <Text Weight="TextWeight.Bold">
                                            @selectedItem.Currency.ToPriceString(order.Price)
                                            @if (order.Price == selectedItem.SellOrders.Max(x => x.Price))
                                            {
                                                <span>or more</span>
                                            }
                                        </Text>
                                    </TableRowCell>
                                    <TableRowCell>@order.Quantity</TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </Column>
                <Column ColumnSize="ColumnSize.Is4">
                    <Table Narrow="true">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Buy Asking Price</TableHeaderCell>
                                <TableHeaderCell>Quantity</TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var order in selectedItem.BuyOrders.OrderByDescending(x => x.Price))
                            {
                                <TableRow>
                                    <TableRowCell>
                                        <Text Weight="TextWeight.Bold">
                                            @selectedItem.Currency.ToPriceString(order.Price)
                                            @if (order.Price == selectedItem.BuyOrders.Min(x => x.Price))
                                            {
                                                <span>or more</span>
                                            }
                                        </Text>
                                    </TableRowCell>
                                    <TableRowCell>@order.Quantity</TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is12">
                    <LineChart @ref="lineChart" TItem="double" />
                </Column>
            </Row>
        }
        else
        {
            <Text>No item selected</Text>
        }

    </Column>
</Row>


@code {

    private string filter = "blackout";
    private SteamItemDTO[] items;
    private SteamItemDTO selectedItem;
    LineChart<double> lineChart;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            items = await Http.GetFromJsonAsync<SteamItemDTO[]>($"SteamItems?filter={filter}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    protected async void OnSelectionChanged(SteamItemDTO item)
    {
        selectedItem = item;
        await HandleRedraw();
    }

    async Task HandleRedraw()
    {
        await lineChart.Clear();

        await lineChart.AddLabel(Labels);

        await lineChart.AddDataSet(GetLineChartDataset());

        await lineChart.Update();
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "# of randoms",
            Data = RandomizeData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { }
        };
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<double> { r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble() };
    }

}
