@namespace SCMM.Web.Client.Shared.Component
@using SCMM.Web.Shared.Domain.DTOs.Currencies;
@inject ILogger<CurrencySelector> Logger
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AppState State
@inject HttpClient Http

<style>

    .Currency-Selector {
        display: flex;
        align-items: center;
        align-content: center;
    }

</style>


@if (State.Currency != null && Currencies != null)
{
    <Typography class="Currency-Selector" Variant="@TypographyVariant.H6">
        <span>@State.Currency.Name</span>
        <IconButton OnClick="@OnOpen" RootRef="@ButtonRef">
            <ArrowDropDownIcon />
        </IconButton>
        <Menu Open="@Open"
              AnchorRef="@ButtonRef"
              OnClose="@HandleClose"
              PaperStyle="width: 100px; max-height: 400px;">
            @foreach (var currency in Currencies)
            {
                <MenuItem @key="@currency.SteamId"
                          Selected="@(currency.SteamId == State.Currency.SteamId)"
                          OnClick="@(() => HandleCurrencyChange(currency))">
                    <span>@currency.Name</span>
                </MenuItem>
            }
        </Menu>
    </Typography>
}

@code
{
    private IList<CurrencyDetailedDTO> Currencies { get; set; }

    private bool Open { set; get; }

    private IReference ButtonRef { set; get; } = new Reference();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Currencies = await Http.GetFromJsonAsync<CurrencyDetailedDTO[]>($"api/currency?detailed=true");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing currencies");
        }
    }

    private async Task HandleCurrencyChange(CurrencyDetailedDTO currency)
    {
        Logger.LogInformation($"Currency was changed to '{currency.Name}'");
        Open = false;
        State.ChangeCurrency(currency);
        StateHasChanged();

        await State.WriteToStorageAsync(LocalStorage);
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private void HandleClose(MenuCloseReason reason)
    {
        Open = false;
        StateHasChanged();
    }

    private void OnOpen()
    {
        Open = true;
        StateHasChanged();
    }

}
