@page "/stats"
@page "/steam/marketstatistics"
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Statistic
@inject ILogger<StatisticsPage> Logger
@inject IDialogService Dialogs
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<PageContainer Title="Market Statistics">

    <MudGrid Spacing="2">

        <MudItem xs="12" xl="12">
            <StatisticsPanel Icon="fas fa-fw fa-chart-line" Title="Daily Market Activity" Subtitle="How many items are bought and sold on the market each day? How much money is traded each day? Is the market becoming more active, or less active?">
                <ChildContent>
                    <style>
                        #MarketSalesPerDay_Series_1_TrendLine_0 {
                            stroke-dasharray: 10px 10px;
                            stroke-linejoin: round;
                            stroke-linecap: round;
                            -webkit-animation: dash 1s linear infinite;
                            animation: dash 1s linear infinite;
                        }
                        @@-webkit-keyframes dash {
                            100% {
                                stroke-dashoffset: -20px;
                            }
                        }
                        @@keyframes dash {
                            100% {
                                stroke-dashoffset: -20px;
                            }
                        }
                    </style>
                    <SfChart ID="MarketSalesPerDay" Theme="Syncfusion.Blazor.Theme.MaterialDark" Background="transparent" Width="100%" Height="100%">
                        <SfDataManager Url="api/stats/market/activityTimeline" Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
                        <ChartArea>
                            <ChartAreaBorder Width="0"></ChartAreaBorder>
                        </ChartArea>
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" IntervalType="IntervalType.Auto" Format="d-MMM-yy" LabelIntersectAction="LabelIntersectAction.Rotate90" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                        </ChartPrimaryXAxis>
                        <ChartAxes>
                            <ChartAxis Name="RevenueAxis" LabelFormat="@($"{State.Currency.PrefixText}#,##0.00{State.Currency.SuffixText}")" EdgeLabelPlacement="EdgeLabelPlacement.Shift" OpposedPosition="true" />
                            <ChartAxis Name="SalesAxis" LabelFormat="#,##" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />
                        </ChartAxes>
                        <ChartSeriesCollection>
                            <ChartSeries XName="date" YName="revenue" YAxisName="RevenueAxis" Opacity="1" Name="Market Revenue" Width="2" Fill="#388e3c" Type="ChartSeriesType.Line">
                            </ChartSeries>
                            <ChartSeries XName="date" YName="sales" YAxisName="SalesAxis" Opacity="1" Name="Market Sales" Width="2" Fill="#66c0f4" Type="ChartSeriesType.Line">
                                <ChartSeriesBorder Width="1" Color="#1b5e20"></ChartSeriesBorder>
                                <ChartTrendlines>
                                    <ChartTrendline Type="TrendlineTypes.MovingAverage" Period="30" BackwardForecast="30" Width="3" Name="Market Sales Trend" Fill="#fff">
                                    </ChartTrendline>
                                </ChartTrendlines>
                            </ChartSeries>
                        </ChartSeriesCollection>
                        <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="true" EnablePinchZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
                        <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
                        <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                        <ChartLegendSettings Visible="true"></ChartLegendSettings>
                    </SfChart>
                </ChildContent>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-star" Title="Latest Items" Subtitle="What are the newest accepted in-game items?" Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true" Hover="true">
                        <tbody>
                            <Virtualize ItemsProvider="LoadItemsMostRecent" Context="item">
                                <ItemContent>
                                    <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Class="no-wrap">@item.Age</MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>

        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-fire" Title="Hot Right Now" Subtitle="What items have been bought/sold the most in the past 24hrs?" Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true" Hover="true">
                        <tbody>
                            <Virtualize ItemsProvider="LoadItemsMostDemanded" Context="item">
                                <ItemContent>
                                    <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Class="no-wrap">@item.Demand.ToQuantityString() sold today</MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>

        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-arrow-up" Title="Stonking" Subtitle="What items recently reached their all-time highest value?" Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true" Hover="true">
                        <tbody>
                            <Virtualize ItemsProvider="LoadItemsAllTimeHigh" Context="item">
                                <ItemContent>
                                    <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(item.BuyNowPrice)</MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>

        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-arrow-down" Title="Crashing" Subtitle="What items recently reached their all-time lowest value?" Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true" Hover="true">
                        <tbody>
                            <Virtualize ItemsProvider="LoadItemsAllTimeLow" Context="item">
                                <ItemContent>
                                    <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(item.BuyNowPrice)</MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-dice-five" Title="Profitable Flips" Subtitle="What items have the largest gap in asking price vs buy now price, with an upward trending average price? It's a gamble, but these items can potentially be flipped for profit if you are able to buy low and then sell high after the seven day market cooldown." Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true" Hover="true">
                        <thead>
                            <tr>
                                <th></th>
                                <th class="no-wrap">Buy At</th>
                                <th class="no-wrap text-right">Potential Profit</th>
                            </tr>
                        </thead>
                        <tbody>
                            <Virtualize ItemsProvider="LoadItemsProfitableFlips" Context="item">
                                <ItemContent>
                                    <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                            </div>
                                        </td>
                                        <td>
                                            <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(item.BuyAskingPrice)</MudText>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Color="Color.Success" Class="no-wrap">
                                                @State.Currency.ToPriceString(item.BuyNowPrice - item.BuyAskingPrice - ((long)Math.Floor(Math.Max(item.BuyNowPrice * EconomyExtensions.FeeMultiplier, 1))))
                                            </MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td>—</td>
                                        <td class="text-right">—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-dollar-sign" Title="Most Expensive" Subtitle="What are the most expensive items on the market?" Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true" Hover="true">
                        <tbody>
                            <Virtualize ItemsProvider="LoadItemMostExpensive" Context="item">
                                <ItemContent>
                                    <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(item.BuyNowPrice)</MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-crown" Title="Most Sales" Subtitle="What items have the highest (estimated) number of sales?" Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true" Hover="true">
                        <tbody>
                            <Virtualize ItemsProvider="LoadItemMostSales" Context="item">
                                <ItemContent>
                                    <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Class="no-wrap">
                                                <span>@item.Total.ToQuantityString() or more sold</span>
                                            </MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>

        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-balance-scale" Title="Most Saturated" Subtitle="What items have the largest supply of listings on the market?"Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true" Hover="true">
                        <thead>
                            <tr>
                                <th></th>
                                <th class="no-wrap">Supply</th>
                                <th class="no-wrap text-right">Daily Demand</th>
                            </tr>
                        </thead>
                        <tbody>
                            <Virtualize ItemsProvider="LoadItemsMostSaturated" Context="item">
                                <ItemContent>
                                    <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                            </div>
                                        </td>
                                        <td>
                                            <MudText Typo="Typo.body2" Class="no-wrap">@item.Supply.ToQuantityString()</MudText>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Class="no-wrap">
                                                @if (item.Demand > 0)
                                                {
                                                    <span>@item.Demand.ToQuantityString() sold today</span>
                                                }
                                                else 
                                                {
                                                    <span>None sold yesterday</span>
                                                }
                                            </MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td>—</td>
                                        <td class="text-right">—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-tshirt" Title="Largest Collections" Subtitle="Which item collections have the most number of items?" Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true" Hover="true">
                        <tbody>
                            <Virtualize ItemsProvider="LoadItemsLargestCollections" Context="item">
                                <ItemContent>
                                    <tr @onclick="@((_) => ShowItemCollectionDialog(item.Name))" class="clickable">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2">@item.Name (@item.Items.ToQuantityString())</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(item.BuyNowPrice.Value)</MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-user" Title="Largest Creators" Subtitle="Which skin creators have the most accepted in-game items?" Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true">
                        <tbody>
                            <Virtualize ItemsProvider="LoadProfilesLargestCreators" Context="item">
                                <ItemContent>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.AvatarUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2">@item.Name</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Class="no-wrap">@item.Items.ToQuantityString() item(s)</MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td class="text-right">—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-box-open" Title="Skin Containers" Subtitle="What is the cheapest way to buy skin containers?" Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true" Hover="true">
                        <tbody>
                            <Virtualize ItemsProvider="LoadCheapestCraftingCosts" Context="item">
                                <ItemContent>
                                    <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-start">
                                                <img src="@item.IconUrl" class="mr-2" style="width:64px; height:64px;" />
                                                <div>
                                                    @if (item.CraftingCost > item.BuyNowPrice)
                                                    {
                                                        <MudText Typo="Typo.body2" Color="MudBlazor.Color.Default">Cheapest directly from the market for <strong>@State.Currency.ToPriceString(item.BuyNowPrice)</strong>.</MudText>
                                                        <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary">It would cost <span>@State.Currency.ToPriceString(item.CraftingCost)</span> in resources to craft yourself.</MudText>
                                                    }
                                                    else
                                                    {
                                                        <MudText Typo="Typo.body2" Color="MudBlazor.Color.Default">Cheapest if you buy the resources and craft it for a total of <strong>@State.Currency.ToPriceString(item.CraftingCost)</strong>.</MudText>
                                                        <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary">It would cost <span>@State.Currency.ToPriceString(item.BuyNowPrice)</span> to buy it from the market.</MudText>
                                                    }
                                                    <MudSimpleTable Dense="true" Hover="true" Elevation="0">
                                                        <tbody>
                                                            @foreach(var component in item.CraftingComponents)
                                                            {
                                                                <tr @onclick="@((_) => ViewItem(component.Component))" class="clickable table-disable-borders">
                                                                    <td>
                                                                        <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary">@(component.Quantity)x</MudText>
                                                                    </td>
                                                                    <td>
                                                                        <div class="d-flex flex-row justify-start align-center">
                                                                            <img src="@component.Component.IconUrl" class="mr-1" style="width:24px; height:24px;" />
                                                                            <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Default">@component.Component.Name</MudText>
                                                                        </div>
                                                                    </td>
                                                                    <td>
                                                                        <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Default">@State.Currency.ToPriceString(component.Component.BuyNowPrice) each</MudText>
                                                                    </td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </MudSimpleTable>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-boxes" Title="Crafting Resources" Subtitle="What is the cheapest way to buy crafting resources?" Dense="true">
                <div class="virtual-table-panel flex-grow-1">
                    <MudSimpleTable Dense="true" Hover="true">
                        <tbody>
                            <Virtualize ItemsProvider="LoadItemCheapestResourceCosts" Context="item">
                                <ItemContent>
                                    <tr @onclick="@((_) => ViewItem(item.CheapestItem.BuyNowPrice > item.BuyNowPrice ? item : item.CheapestItem))" class="clickable">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-start">
                                                <img src="@item.IconUrl" class="mr-2" style="width:64px; height:64px;" />
                                                <div>
                                                    @if (item.CheapestItem.BuyNowPrice > item.BuyNowPrice)
                                                    {
                                                        <MudText Typo="Typo.body2" Color="MudBlazor.Color.Default">Cheapest directly from the market for <strong>@State.Currency.ToPriceString(item.BuyNowPrice)</strong>.</MudText>
                                                        <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary">You can also buy <span>@item.CheapestItem.Name</span> for <span>@State.Currency.ToPriceString(item.CheapestItem.BuyNowPrice)</span> and break it down using the Rust in-game workshop.</MudText>
                                                    }
                                                    else
                                                    {
                                                        <MudText Typo="Typo.body2" Color="MudBlazor.Color.Default">Cheapest if you buy <strong>@item.CheapestItem.Name</strong> for <strong>@State.Currency.ToPriceString(item.CheapestItem.BuyNowPrice)</strong> and break it down using the Rust in-game workshop.</MudText>
                                                        <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary">It would cost <span>@State.Currency.ToPriceString(item.BuyNowPrice)</span> to buy it from the market.</MudText>
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </StatisticsPanel>
        </MudItem>
    
    </MudGrid>

</PageContainer>

@code {

    private void ViewItem(ItemDescriptionDTO item)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/market/listings/{item.AppId}/{Uri.EscapeDataString(item.Name)}"
        );
    }
    
    private void ViewProfile(string steamId)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/profiles/{steamId}"
        );
    }
    
    private void ShowItemCollectionDialog(string itemCollection)
    {
        Dialogs.Show<ViewItemCollectionDialog>(null, parameters: new DialogParameters()
        {
            ["CollectionName"] = itemCollection,
            ["CollectionUrl"] = $"api/item/collection/{itemCollection}"
        });
    }
    
    private string GetItemStyles(IItemDescription item)
    {
        return $"color: {item.ForegroundColour}";
    }
    
    protected async ValueTask<ItemsProviderResult<AssetDescriptionAgeStatisticDTO>> LoadItemsMostRecent(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<AssetDescriptionAgeStatisticDTO>>($"api/stats/items/mostRecent?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<AssetDescriptionAgeStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most recent' item statistics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ItemSupplyDemandStatisticDTO>> LoadItemsMostDemanded(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemSupplyDemandStatisticDTO>>($"api/stats/items/mostDemanded?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemSupplyDemandStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most demanded' item statistics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ItemSupplyDemandStatisticDTO>> LoadItemsMostSaturated(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemSupplyDemandStatisticDTO>>($"api/stats/items/mostSaturated?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemSupplyDemandStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most staurated' item statistics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ItemValueStatisticDTO>> LoadItemsAllTimeHigh(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemValueStatisticDTO>>($"api/stats/items/allTimeHigh?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemValueStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'all time high' item statistics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ItemValueStatisticDTO>> LoadItemsAllTimeLow(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemValueStatisticDTO>>($"api/stats/items/allTimeLow?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemValueStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'all time low' item statistics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ItemBuySellOrderStatisticDTO>> LoadItemsProfitableFlips(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemBuySellOrderStatisticDTO>>($"api/stats/items/profitableFlips?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemBuySellOrderStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'profitable flips' item statistics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ItemValueStatisticDTO>> LoadItemMostExpensive(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemValueStatisticDTO>>($"api/stats/items/mostExpensive?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemValueStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most expensive' item statistics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ItemSalesStatisticDTO>> LoadItemMostSales(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemSalesStatisticDTO>>($"api/stats/items/mostSales?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemSalesStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most sales' item statistics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetCollectionDTO>> LoadItemsLargestCollections(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetCollectionDTO>>($"api/stats/items/largestCollections?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetCollectionDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'largest collections' item statistics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ItemResourceCostStatisticDTO>> LoadItemCheapestResourceCosts(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemResourceCostStatisticDTO>>($"api/stats/items/cheapestResourcesCosts?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemResourceCostStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'cheapest resource costs' item statistics");
            throw;
        }
    }

    protected async ValueTask<ItemsProviderResult<ItemCraftingCostStatisticDTO>> LoadCheapestCraftingCosts(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemCraftingCostStatisticDTO>>($"api/stats/items/cheapestCraftingCosts?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemCraftingCostStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'cheapest crafting costs' item statistics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ProfileAcceptedItemsStatisticDTO>> LoadProfilesLargestCreators(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ProfileAcceptedItemsStatisticDTO>>($"api/stats/profiles/largestCreators?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ProfileAcceptedItemsStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'largest creators' profile statistics");
            throw;
        }
    }
    
}
