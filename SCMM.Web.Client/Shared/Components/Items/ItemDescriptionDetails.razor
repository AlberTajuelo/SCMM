@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Statistic
@inject ILogger<ItemDescriptionDetails> Logger
@inject IDialogService Dialogs
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<MudGrid UserAttributes="@AdditionalAttributes">

    <MudItem xs="12" lg="3" xl="2">
        <MudGrid>

            <MudItem xs="12" sm="6" lg="12">
                <MudPaper Outlined="true" Class="d-flex flex-column full-height" Style="@($"background-color: {Item.BackgroundColour}")">
                    <div class="d-flex flex-grow-1 align-center justify-center">
                        <img src="@Item.IconLargeUrl" class="@($"{GetGlowClass()} full-width pa-8")" style="@GetGlowStyles()" />
                    </div>
                    <MudButtonGroup Color="Color.Default" Size="Size.Small" Variant="Variant.Filled" DisableElevation="true" Class="d-flex align-stretch text-centered full-width" >
                        <MudButton OnClick="@ViewItemWorkshopPage" FullWidth="true" Disabled="Item.WorkshopFileId == null"><span class="no-wrap">Workshop</span></MudButton>
                        @* TODO: Workshop image preview *@
                        <MudButton FullWidth="true" Disabled="true || Item.PreviewContentId == null"><span class="no-wrap">Images</span></MudButton>
                        <MudButton OnClick="@ShowItemModelDialog" Disabled="String.IsNullOrEmpty(Item.WorkshopFileUrl)"><span class="no-wrap">3D</span></MudButton>
                    </MudButtonGroup>
				</MudPaper>
			</MudItem>

            <MudItem xs="12" sm="6" lg="12">
                <MudPaper Outlined="true" Class="pa-4 full-height">

                    <div>
                        <MudText Typo="MudBlazor.Typo.h6" Class="mt-n1" Style="@($"color: {Item.ForegroundColour}")">@Item.Name</MudText>
                        @if (!String.IsNullOrEmpty(Item.ItemType))
                        {
                            <MudText Typo="MudBlazor.Typo.subtitle1" Class="mt-n2" Color="MudBlazor.Color.Secondary">@Item.ItemType</MudText>
                        }
                    </div>
                    
                    @if (!String.IsNullOrEmpty(Item.Description))
                    {
                        <div class="mt-3">
                            <MudText Typo="MudBlazor.Typo.body2" GutterBottom>@Item.Description</MudText>
                        </div>
                    }
                    @if (Item.Notes != null)
                    {
                        @foreach (var note in Item.Notes)
                        {
                            <div class="mt-3">
                                <MudText Typo="MudBlazor.Typo.body2" GutterBottom>
                                    <MarkdownView Content="@note" />
								</MudText>
                            </div>
                        }
                    }
             
                    <div class="mt-3">
                        
                        @if (Item.Stores?.Any() == true || Item.TimeAccepted != null)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-shopping-cart mud-secondary-text"></i>
                                <span>
                                    @if(Item.Stores?.Count() > 1)
                                    {
                                        <span class="mud-secondary-text">First released on </span>
                                    }
                                    else
                                    {
                                        <span class="mud-secondary-text">Released on </span>
                                    }
                                    @if(Item.Stores?.Any() == true)
                                    {
                                        <MudLink @onclick="@(() => ViewStorePage(Item.Stores.Min(x => x.Date)))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@Item.Stores.Min(x => x.Date).UtcDateTime.ToShortDateString()</MudLink>
                                    }
                                    else
                                    {
                                        <span>@Item.TimeAccepted.Value.UtcDateTime.ToShortDateString()</span>
                                    }
                                </span>
                            </MudText>
                        }
                        @* TODO: Market rank
                        @if (Item.MarketRankTotal > 0)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-balance-scale-left mud-secondary-text"></i>
                                <span>
                                    <MudLink @onclick="@(() => ShowItemTypeDialog())" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@Item.MarketRankIndex cheaper @Item.ItemType.Pluralise(Item.MarketRankTotal)</MudLink>
                                    <span class="mud-secondary-text"> in the marketplace (@Item.MarketRankTotal total).</span>
                                </span>
                            </MudText>
                        }
                        @if (Item.SalesMinimum > 0)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-shopping-cart mud-secondary-text"></i>
                                <span>
                                    @if (Item.SalesMaximum == null)
                                    {
                                        <span class="mud-secondary-text">More than </span>
                                        <span>@Item.SalesMinimum.Value.ToQuantityString() sold</span>
                                    }
                                    else if (Item.SalesMinimum == Item.SalesMaximum)
                                    {
                                        <span>@Item.SalesMinimum.Value.ToQuantityString() sold</span>
                                    }
                                    else
                                    {
                                        <span class="mud-secondary-text">Between </span>
                                        <span>@Item.SalesMinimum.Value.ToQuantityString() - @Item.SalesMaximum.Value.ToQuantityString() sold</span>
                                    }
                                </span>
                                <span>
                                    <i class="fas fa-fw fa-question-circle" title="Steam doesn't disclose exact sales figures, this is just an estimate. See the store analytics & insights for more details." />
                                </span>
                            </MudText>
                        }
                        *@

                        @if (!String.IsNullOrEmpty(Item.ItemCollection))
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-paint-roller mud-secondary-text"></i>
                                <span>
                                    <span class="mud-secondary-text">Part of the </span>
                                    <MudLink @onclick="@(() => ShowItemCollectionDialog())" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@Item.ItemCollection</MudLink>
                                    <span class="mud-secondary-text"> set</span>
                                </span>
                            </MudText>
                        }
                        @if (Item.CraftingComponents?.Any() == true)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-hammer mud-secondary-text"></i>
                                <span>
                                    <span class="mud-secondary-text">Craft with </span>
                                    @foreach (var component in Item.CraftingComponents)
                                    {
                                        <span>@(component.Value)x @component.Key</span>
                                        @if (Item.CraftingComponents.Last().Key != component.Key)
                                        {
                                            <span class="mud-secondary-text">, </span>
                                        }
                                    }
                                </span>
                            </MudText>
                        }
                        @if (Item.BreaksIntoComponents?.Any() == true)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-hammer mud-secondary-text"></i>
                                <span>
                                    <span class="mud-secondary-text">Breaks down into </span>
                                    @foreach (var component in Item.BreaksIntoComponents)
                                    {
                                        <span>@(component.Value)x @component.Key</span>
                                        @if (Item.BreaksIntoComponents.Last().Key != component.Key)
                                        {
                                            <span class="mud-secondary-text">, </span>
                                        }
                                    }
                                </span>
                            </MudText>
                        }
                        @if (Item.CurrentSubscriptions > 0)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-user mud-secondary-text"></i>
                                <span>
                                    <span>@Item.CurrentSubscriptions.Value.ToQuantityString() subscriptions</span>
                                </span>
                            </MudText>
                        }
                        @if (Item.CurrentFavourited > 0)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-heart mud-secondary-text"></i>
                                <span>
                                    <span>@Item.CurrentFavourited.Value.ToQuantityString() favourited</span>
                                </span>
                            </MudText>
                        }
                        @if (Item.Views > 0)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-eye mud-secondary-text"></i>
                                <span>
                                    <span>@Item.Views.Value.ToQuantityString() views</span>
                                </span>
                            </MudText>
                        }

                    </div>

                    <div class="mt-3">
                        @if (Item.IsBanned == true)
                        {
                            <MudTooltip Text="@($"This item has been trade and market banned due to {Item.BanReason.FirstCharToLower()}")">
                                <MudChip Size="MudBlazor.Size.Small" Text="Banned" Icon="fas fa-fw fa-ban mr-2" Variant="MudBlazor.Variant.Outlined" Color="MudBlazor.Color.Warning" />
                            </MudTooltip>
                        }
                        <MudTooltip>
                            <ChildContent>
                                <MudChip Size="MudBlazor.Size.Small" Text="@(Item.IsTradable ? "Tradable" : "Not Tradable")" Disabled="@(!Item.IsTradable)"
                                         Icon="@(Item.IsTradable ? "fas fa-fw fa-exchange-alt mr-2" : "fas fa-fw fa-times")" 
                                         Variant="@(Item.IsTradable ? MudBlazor.Variant.Filled : MudBlazor.Variant.Outlined)" 
                                         Color="@(Item.IsTradable ? MudBlazor.Color.Default : MudBlazor.Color.Default)" />
                            </ChildContent>
                            <TooltipContent>
                                @if (Item.IsTradable)
                                {
                                    @if (Item.TradableRestrictionDays > 0)
                                    {
                                        <span>This item <strong>can</strong> be traded <strong>@(Item.TradableRestrictionDays)</strong> day(s) after purchase</span>
                                    }
                                    else
                                    {
                                        <span>This item <strong>can</strong> be traded immediately after purchase</span>
                                    }
                                }
                                else
                                {
                                    <span>This item <strong>cannot</strong> be traded once purchased</span>
                                }
                            </TooltipContent>
                        </MudTooltip>
                        <MudTooltip>
                            <ChildContent>
                                <MudChip Size="MudBlazor.Size.Small" Text="@(Item.IsMarketable ? "Marketable" : "Not Marketable")" Disabled="@(!Item.IsMarketable)"
                                         Icon="@(Item.IsMarketable ? "fas fa-fw fa-balance-scale-left mr-2" : ((Item.IsAvailableOnStore && Item.MarketableRestrictionDays > 0) ? "fas fa-fw fa-question" : "fas fa-fw fa-times"))" 
                                         Variant="@(Item.IsMarketable ? MudBlazor.Variant.Filled : MudBlazor.Variant.Outlined)" 
                                         Color="@(Item.IsMarketable ? MudBlazor.Color.Default : MudBlazor.Color.Default)" />
                            </ChildContent>
                            <TooltipContent>
                                @if (Item.IsMarketable)
                                {
                                    @if (Item.MarketableRestrictionDays > 0)
                                    {
                                        <span>This item <strong>can</strong> be listed on the Steam Community Market <strong>@(Item.MarketableRestrictionDays)</strong> day(s) after purchase</span>
                                    }
                                    else
                                    {
                                        <span>This item <strong>can</strong> be listed on the Steam Community Market immediately after purchase</span>
                                    }
                                }
                                else
                                {
                                    @if (Item.IsAvailableOnStore && Item.MarketableRestrictionDays > 0)
                                    {
                                        <span>This item <strong>cannot</strong> currently be listed on the Steam Community Market once purchased, but <strong>probably</strong> will be marketable when the next store is released.</span>
                                        <span>This is a common Steam issue with some store items and it generally fixes itself when the store changes. If you have ever noticed that some items are available on the market early but others are not, this is the reason why.</span>
                                    }
                                    else
                                    {
                                        <span>This item <strong>cannot</strong> be listed on the Steam Community Market once purchased</span>
                                    }
                                }
                            </TooltipContent>
                        </MudTooltip>
                        @if (Item.HasGlow == true)
                        {
                            <MudTooltip>
                                <ChildContent>
                                    <MudChip Size="MudBlazor.Size.Small" Text="@($"Glow {(Item.GlowRatio > 0.01m ? "(" + Math.Round((Item.GlowRatio ?? 0) * 100, 0) + "%)" : String.Empty).Trim()}")" Icon="fas fa-fw fa-moon mr-2" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                                </ChildContent>
                                <TooltipContent>
                                    @if (Item.GlowRatio > 0.01m)
                                    {
                                        <span>@Math.Round((Item.GlowRatio ?? 0) * 100, 0)% of this item glows in the dark, making it much easier to see at night</span>
                                    }
                                    else 
                                    {
                                        <span>Some parts of this item glow in the dark, making it much easier to see at night</span>
                                    }
                                </TooltipContent>
                            </MudTooltip>
                        }
                        @if (Item.HasGlowSights == true)
                        {
                            <MudTooltip Text="The iron sights of this weapon glow in the dark, making it much easier to aim at night">
                                <MudChip Size="MudBlazor.Size.Small" Text="Glow Sight" Icon="fas fa-fw fa-crosshairs mr-2" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                            </MudTooltip>
                        }
                        @if (Item.HasCutout == true)
                        {
                            <MudTooltip>
                                <ChildContent>
                                    <MudChip Size="MudBlazor.Size.Small" Text="@($"Cutout {(Item.CutoutRatio > 0.01m ? "(" + Math.Round((Item.CutoutRatio ?? 0) * 100, 0) + "%)" : String.Empty).Trim()}")" Icon="fas fa-fw fa-cut mr-2" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                                </ChildContent>
                                <TooltipContent>
                                    @if (Item.CutoutRatio > 0.01m)
                                    {
                                        <span>@Math.Round((Item.CutoutRatio ?? 0) * 100, 0)% of this items material has been removed. The shape may appeared altered when compared against the default item</span>
                                    }
                                    else 
                                    {
                                        <span>Parts of this items material has been removed. The shape may appeared altered when compared against the default item</span>
                                    }
                                </TooltipContent>
                            </MudTooltip>
                        }
                        @if (Item.IsCraftingComponent == true)
                        {
                            <MudChip Size="MudBlazor.Size.Small" Text="Resource" Icon="fas fa-fw fa-puzzle-piece mr-2" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                        }
                        @if (Item.IsCraftable == true)
                        {
                            <MudChip Size="MudBlazor.Size.Small" Text="Skin Container" Icon="fas fa-fw fa-box mr-2" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                        }
                        @if (Item.IsSpecialDrop == true)
                        {
                            <MudChip Size="MudBlazor.Size.Small" Text="Special Drop" Icon="fas fa-fw fa-crown mr-2" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                        }
                        @if (Item.IsTwitchDrop == true)
                        {
                            <MudChip Size="MudBlazor.Size.Small" Text="Twitch Drop" Icon="fab fa-fw fa-twitch mr-2" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                        }
                    </div>
                    
				</MudPaper>
			</MudItem>
            
            @if (Item.Tags.Any(x => x.Key.StartsWith(Constants.AssetTagAi)) || !String.IsNullOrEmpty(Item.DominantColour))
            {
                <MudItem xs="12" sm="6" lg="12">
                    @if (Item.Tags.Any(x => x.Key.StartsWith(Constants.AssetTagAiCaption)))
                    {
                        <div class="quote-box text-centered pa-2 mb-2">
                            @foreach(var tag in Item.Tags.Where(x => x.Key.StartsWith(Constants.AssetTagAiCaption)).Take(1))
                            {
                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Dark">
                                    <span>Looks like a</span>
                                    <span>@tag.Value.FirstCharToLower().TrimStart('a', ' ')</span>
                                </MudText>
                            }
				        </div>
                    }
                    <MudPaper Outlined="true" Class="py-2 px-3">
                        <div class="d-flex flex-row">
                            <MudIcon Icon="fas fa-robot" Size="MudBlazor.Size.Large" Class="my-1" />
                            <div class="ml-5">
                                @if (!String.IsNullOrEmpty(Item.DominantColour))
                                {
                                    <MudChip Size="MudBlazor.Size.Small" Text="@Item.DominantColour" Variant="MudBlazor.Variant.Filled" Icon="fas fa-fw fa-tint" Style="@($"background-color: {Item.DominantColour}; color: white")" />
                                }
                                @foreach(var tag in Item.Tags.Where(x => x.Key.StartsWith(Constants.AssetTagAiTag)))
                                {
                                    <MudChip Size="MudBlazor.Size.Small" Text="@tag.Value" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                                }
                                @foreach(var tag in Item.Tags.Where(x => !x.Key.StartsWith(Constants.AssetTagAi)))
                                {
                                    <MudChip Size="MudBlazor.Size.Small" Text="@tag.Value" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                                }
						    </div>
                        </div>
				    </MudPaper>
			    </MudItem>
            }
            
            @if (Item.CreatorId != null && !String.IsNullOrEmpty(Item.CreatorName))
            {
                <MudItem xs="12" sm="6" lg="12">
                    <MudPaper Outlined="true" Class=" full-height py-2 px-3">
                        <div class="d-flex flex-row">
                            <MudAvatar Image="@Item.CreatorAvatarUrl" Size="MudBlazor.Size.Medium" Class="my-1" />
                            <div class="ml-3">
                                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default">@Item.CreatorName</MudText>
                                <MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary">
                                    @if (Item.CreatorId != Item.AppId)
                                    {
                                        <span>• </span>
                                        <MudLink Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary" @onclick="@(() => ViewCreatorWorkshopPage())">View Steam Workshop</MudLink>
                                        <br />
                                    }
                                    <span>• </span>
                                    <MudLink Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary" @onclick="@(() => ShowCreatorItemsDialog())">View more items from this creator</MudLink>
								</MudText>
						    </div>
                        </div>
				    </MudPaper>
			    </MudItem>
            }
            
            @if (Item.Stores?.Count() > 1)
            {
                <MudItem xs="12" sm="6" lg="12">
                    <MudPaper Outlined="true" Class="full-height">
                        <div class="d-flex flex-column align-stretch">
                            @foreach (var store in Item.Stores.OrderByDescending(x => x.Date))
                            {
                                <MudTooltip Text="@($"View the store from {store.Date.UtcDateTime.ToShortDateString()}")">
                                    <div @onclick="@(() => ViewStorePage(store.Date))" class="d-flex flex-row align-center justify-start full-width clickable hover-darken px-4 py-2">
                                        <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Secondary">
                                            <i class="fa fa-fw fa-shopping-cart mr-4" />
                                        </MudText>
                                        <div class="d-flex flex-column">
                                            <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default">
                                                <span>@store.Date.UtcDateTime.ToShortDateString()</span>
                                            </MudText>
                                            @if(!String.IsNullOrEmpty(store.Name))
                                            {
                                                <MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary">
                                                    <span class="mud-secondary-text">@store.Name</span>
                                                </MudText>
                                            }
                                        </div>
                                        <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default" Class="flex-grow-1 text-right">
                                            @State.Currency.ToPriceString(store.Price ?? 0)
								        </MudText>
						            </div>
                                    <MudDivider FlexItem="true" />
								</MudTooltip>
                            }
                        </div>
				    </MudPaper>
			    </MudItem>
            }
            
            @* TODO: Technical: app id, class id, workshop id, name id, store id... *@
            @* TODO: Time created/updated/accepted... *@
            @* TODO: Time refreshed... *@

            @* TODO: "Request Update" button *@

        </MudGrid>
    </MudItem>
    
    <MudItem xs="12" lg="9" xl="10">
        <MudGrid>
             
            @if (Item.IsBanned)
            {
                <MudItem xs="12">
                    <Alert Variant="MudBlazor.Variant.Text" Severity="MudBlazor.Severity.Warning" Icon="fas fa-fw fa-ban mt-1" 
                           Title="@($"This item is trade and market banned due to {Item.BanReason.FirstCharToLower()}.")" 
                           Subtitle="The only way you can acquire this item is to 'buy' a Steam account that already contained the item before it was banned. Buying Steam accounts is against the Steam ToS." />
                </MudItem>
            }

            @if(!Item.IsBanned && (ItemPrices == null || ItemPrices.Any()))
            {   
                <MudItem xs="12">
                    <MudPaper Outlined="true">
                        @if (ItemPrices == null)
                        {
                            <Loading Message="Loading prices..." Size="MudBlazor.Size.Medium" Typo="MudBlazor.Typo.h6" />
                        }
                        else
                        {
                            <div class="d-flex flex-row align-stretch justify-sm-space-around flex-wrap">
                                @foreach (var price in ItemPrices)
                                {
                                    <MudTooltip Text="@($"View this item on {@price.Type.GetDisplayName()}")">
                                        <div @onclick="@(() => BuyItem(price))" class="@($"pa-4 {(price.IsAvailable ? "hover-darken clickable" : null)}")">
                                            <MudText Typo="MudBlazor.Typo.h6" Color="price.IsAvailable ? MudBlazor.Color.Inherit : MudBlazor.Color.Secondary" Class="d-flex align-center">
                                                <img src="@($"/images/price/{price.Type.ToString().ToLower()}.png")" style="width:1.3em; height:1.3em" />
                                                <span class="pl-2">@State.Currency.ToPriceString(price.BuyPrice)</span>
                                                @if (price.BuyPrice > 0 && Item.StorePrice > 0 && price.Type != PriceType.SteamStore)
                                                {
                                                    @if (price.BuyPrice > Item.StorePrice)
                                                    {
                                                        <MudChip Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-arrow-up mr-1" Text="@price.BuyPrice.ToMovementString(Item.StorePrice.Value)" 
                                                                Color="MudBlazor.Color.Success" Variant="MudBlazor.Variant.Filled" Class="my-0 mx-2" />
                                                    }
                                                    else if (price.BuyPrice < Item.StorePrice)
                                                    {
                                                        <MudChip Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-arrow-down mr-1" Text="@price.BuyPrice.ToMovementString(Item.StorePrice.Value)" 
                                                                 Color="MudBlazor.Color.Error" Variant="MudBlazor.Variant.Filled" Class="my-0 mx-2" />
                                                    }
                                                    else
                                                    {
                                                        <MudChip Size="MudBlazor.Size.Small" Text="@price.BuyPrice.ToMovementString(Item.StorePrice.Value)" 
                                                                 Color="MudBlazor.Color.Secondary" Variant="MudBlazor.Variant.Filled" Class="my-0 mx-2" />
                                                    }
                                                }
									        </MudText>
                                            <MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary">
                                                <span>@price.Type.GetDisplayName()</span>
                                                @if (price.Type == PriceType.SteamStore && Item.Stores?.Any() == true)
                                                {
                                                    <span> (@Item.Stores.Max(x => x.Date).UtcDateTime.ToShortDateString())</span>
                                                }
                                                else if (price.Type != PriceType.SteamStore && price.QuantityAvailable > 0)
                                                {
                                                    <span> (@price.QuantityAvailable.Value.ToQuantityString())</span>
                                                }
                                            </MudText>
                                        </div>
								    </MudTooltip>
                                }
                            </div>
                        }
				    </MudPaper>
                </MudItem>
            }
 
            @if(!Item.IsBanned && Item.IsAvailableOnMarket)
            {
                <MudItem xs="12" sm="6" xl="3">
                    <MudPaper Outlined="true" Class="text-centered">
                        <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="pa-2">
                            <span>@((Item.MarketSellOrderCount ?? 0).ToQuantityString())</span>
                            <span class="mud-secondary-text"> for sale starting at </span>
                            <span>@State.Currency.ToPriceString(Item.MarketBuyPrice.Value)</span>
                        </MudText>
                        <MudDivider />
                        <MudSimpleTable Dense="true" FixedHeader="true" Style="height:25vh;">
                            <thead>
                                <tr>
                                    <th class="no-wrap text-centered">Price</th>
                                    <th class="no-wrap text-centered">Quantity</th>
                                </tr>
                            </thead>
                            <tbody>
                                <Virtualize ItemsProvider="LoadItemSellOrders" Context="item">
                                    <ItemContent>
                                        <tr class="hover-darken">
                                            <td class="text-centered">
                                                <MudText Typo="Typo.body2" Color="@(item.Quantity >= 50 ? Color.Error : item.Quantity >= 25 ? Color.Warning : Color.Secondary)" Class="no-wrap">
                                                    <span>@State.Currency.ToPriceString(item.Price)</span>
                                                </MudText>
                                            </td>
                                            <td class="text-centered">
                                                <MudText Typo="Typo.body2" Color="@(item.Quantity >= 50 ? Color.Error : item.Quantity >= 25 ? Color.Warning : Color.Secondary)" Class="no-wrap">
                                                    @if (item.Quantity >= 100)
                                                    {
                                                        <MudTooltip Text="Severe mental disability detected; High quantity 'sell wall' listings like this often cause the price to drop as people to start undercut eachother">
                                                            <i class="fas fa-fw fa-wheelchair mr-1" />
                                                        </MudTooltip>
                                                    }
                                                    else if (item.Quantity >= 25)
                                                    {
                                                        <MudTooltip Text="High quantity 'sell wall' listings like this often cause the price to drop as people to start undercut eachother">
                                                            <i class="fas fa-fw fa-exclamation-triangle mr-1" />
                                                        </MudTooltip>
                                                    }
                                                    <span>@item.Quantity.ToQuantityString()</span>
                                                </MudText>
                                            </td>
                                        </tr>
                                    </ItemContent>
                                    <Placeholder>
                                        <tr>
                                            <td class="text-centered">—</td>
                                            <td class="text-centered">—</td>
                                        </tr>
                                    </Placeholder>
                                </Virtualize>
                            </tbody>
                        </MudSimpleTable>
				    </MudPaper>
                </MudItem>
            }
            
            @if(!Item.IsBanned && Item.IsAvailableOnMarket)
            {
                <MudItem xs="12" sm="6" xl="3">
                    <MudPaper Outlined="true" Class="text-centered">
                        <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="pa-2">
                            <span>@((Item.MarketBuyOrderCount ?? 0).ToQuantityString())</span>
                            <span class="mud-secondary-text"> requests to buy at </span>
                            <span>@State.Currency.ToPriceString(Item.MarketSellPrice.Value)</span>
                            <span class="mud-secondary-text"> or lower </span>
                        </MudText>
                        <MudDivider />
                        <MudSimpleTable Dense="true" FixedHeader="true" Style="height:25vh;">
                            <thead>
                                <tr>
                                    <th class="no-wrap text-centered">Price</th>
                                    <th class="no-wrap text-centered">Quantity</th>
                                </tr>
                            </thead>
                            <tbody>
                                <Virtualize ItemsProvider="LoadItemBuyOrders" Context="item">
                                    <ItemContent>
                                        <tr class="hover-darken">
                                            <td class="text-centered">
                                                <MudText Typo="Typo.body2" Color="Color.Secondary"Class="no-wrap">@State.Currency.ToPriceString(item.Price)</MudText>
                                            </td>
                                            <td class="text-centered">
                                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="no-wrap">@item.Quantity.ToQuantityString()</MudText>
                                            </td>
                                        </tr>
                                    </ItemContent>
                                    <Placeholder>
                                        <tr>
                                            <td class="text-centered">—</td>
                                            <td class="text-centered">—</td>
                                        </tr>
                                    </Placeholder>
                                </Virtualize>
                            </tbody>
                        </MudSimpleTable>
				    </MudPaper>
                </MudItem>
            }
            
            @if(!Item.IsBanned && Item.IsAvailableOnMarket)
            {
                <MudItem xs="12" xl="6">
                    <MudPaper Outlined="true" Style="height:30vh; overflow-y:scroll">
                        <Virtualize ItemsProvider="LoadItemActivity" Context="item">
                            <ItemContent>
                                <div class="@(item.IsSale ? "mud-paper mud-paper-square" : null)">
                                    <div class="d-flex flex-row flex-wrap justify-start align-center hover-darken pa-1">
                                        @if (!String.IsNullOrEmpty(item.BuyerName))
                                        {
                                            <img src="@item.BuyerAvatarUrl" class="mx-1" style="width:32px; height:32px;" />
                                            <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.BuyerName</MudText>
                                        }
                                        else if (!String.IsNullOrEmpty(item.SellerName))
                                        {
                                            <img src="@item.SellerAvatarUrl" class="mx-1" style="width:32px; height:32px;" />
                                            <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.SellerName</MudText>
                                        }
                                        <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary" Class="mx-1 no-wrap">@GetActivityDescription(item)</MudText>
                                        <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.Quantity.ToQuantityString()x</MudText>
                                        <img src="@item.IconUrl" class="mx-1" style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary" Class="mx-1 no-wrap">for</MudText>
                                        <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@State.Currency.ToPriceString(item.Price)</MudText>
                                        @if (!String.IsNullOrEmpty(item.BuyerName) && !String.IsNullOrEmpty(item.SellerName))
                                        {
                                            <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary" Class="mx-1 no-wrap">from</MudText>
                                            <img src="@item.SellerAvatarUrl" class="mx-1" style="width:32px; height:32px;" />
                                            <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.SellerName</MudText>
                                        }
                                        <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary" Class="flex-grow-1 mx-1 no-wrap">@((DateTimeOffset.Now - item.Timestamp).ToDurationString(prefix: "about", maxGranularity: 3, suffix: "ago"))</MudText>
                                    </div>
                                </div>
                            </ItemContent>
                            <Placeholder>
                                <div class="d-flex flex-row justify-start align-center">
                                    <MudProgressCircular Indeterminate="true" Class="mx-1" Style="width:32px; height:32px;" />
                                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mx-1">Loading...</MudText>
                                </div>
                            </Placeholder>
                        </Virtualize>
				    </MudPaper>
                </MudItem>
            }
            
            @if(Item.IsAvailableOnMarket)
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Class="pa-2">
                        <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="pa-2">
                            <span>@((Item.Market24hrSales ?? 0).ToQuantityString())</span>
                            <span class="mud-secondary-text"> sold in the last 24hrs, median price of </span>
                            <span>@State.Currency.ToPriceString(Item.Market24hrValue.Value)</span>
                        </MudText>
                        <MudDivider />
                        <style>
                            #SalesHistory_Series_1_TrendLine_0 {
                                stroke-dasharray: 10px 10px;
                                stroke-linejoin: round;
                                stroke-linecap: round;
                                -webkit-animation: dash 1s linear infinite;
                                animation: dash 1s linear infinite;
                            }
                            @@-webkit-keyframes dash {
                                100% {
                                    stroke-dashoffset: -20px;
                                }
                            }
                            @@keyframes dash {
                                100% {
                                    stroke-dashoffset: -20px;
                                }
                            }
                        </style>
                        <SfChart ID="SalesHistory" Theme="Syncfusion.Blazor.Theme.MaterialDark" Background="transparent" Width="100%" Height="100%">
                            <SfDataManager Url="@($"api/item/{Item.Id}/salesTimeline")" Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
                            <ChartArea>
                                <ChartAreaBorder Width="0"></ChartAreaBorder>
                            </ChartArea>
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" IntervalType="IntervalType.Auto" Format="d-MMM-yy" LabelIntersectAction="LabelIntersectAction.Rotate90" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                            </ChartPrimaryXAxis>
                            <ChartAxes>
                                <ChartAxis Name="PriceAxis" LabelFormat="@($"{State.Currency.PrefixText}#,##0.00{State.Currency.SuffixText}")" EdgeLabelPlacement="EdgeLabelPlacement.Shift" OpposedPosition="true" />
                                <ChartAxis Name="QuantityAxis" LabelFormat="#,##" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />
                            </ChartAxes>
                            <ChartSeriesCollection>
                                <ChartSeries XName="date" YName="price" YAxisName="PriceAxis" Opacity="1" Name="Median Price" Width="2" Fill="#388e3c" Type="ChartSeriesType.Line">
                                    <ChartTrendlines>
                                        <ChartTrendline Type="TrendlineTypes.MovingAverage" Period="5" Width="3" Name="Price Trend" Fill="#fff">
                                        </ChartTrendline>
                                    </ChartTrendlines>
                                </ChartSeries>
                                <ChartSeries XName="date" YName="quantity" YAxisName="QuantityAxis" Opacity="1" Name="Quantity Sold" Width="2" Fill="#66c0f4" Type="ChartSeriesType.Line">
                                    <ChartSeriesBorder Width="1" Color="#1b5e20"></ChartSeriesBorder>
                                </ChartSeries>
                            </ChartSeriesCollection>
                            <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="true" EnablePinchZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
                            <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
                            <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                            <ChartLegendSettings Visible="true"></ChartLegendSettings>
                        </SfChart>
				    </MudPaper>
                </MudItem>
            }
            
            @*
            @if (!String.IsNullOrEmpty(Item.ItemCollection))
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Class="pa-4">
                    Collection...
				    </MudPaper>
                </MudItem>
            }
            *@

            @*
            @if (!String.IsNullOrEmpty(Item.ItemType))
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Class="pa-4">
                    Similar (type, colour, price, author)...
				    </MudPaper>
                </MudItem>
            }
            *@

		</MudGrid>
    </MudItem>
           
</MudGrid>

@code {

    [Parameter]
    public ItemDetailedDTO Item { get; set; }
    
    private ItemPriceDTO[] ItemPrices { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!Item.IsBanned)
            {
                ItemPrices = await Http.GetFromJsonAsync<ItemPriceDTO[]>($"/api/item/{Item.Id}/prices");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading the item prices");
            Snackbar.Add($"Unable to load item prices. {ex.Message}", MudBlazor.Severity.Error);
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ItemOrderDTO>> LoadItemSellOrders(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemOrderDTO>>($"api/item/{Item.Id}/sellOrders?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemOrderDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Unable to list item sell orders");
            Snackbar.Add($"Unable to load item sell orders. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ItemOrderDTO>> LoadItemBuyOrders(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemOrderDTO>>($"api/item/{Item.Id}/buyOrders?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemOrderDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Unable to list item buy orders");
            Snackbar.Add($"Unable to load item buy orders. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ItemActivityStatisticDTO>> LoadItemActivity(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<ItemActivityStatisticDTO>>($"api/stats/market/activity?filter={Uri.EscapeDataString(Item.Name)}&start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemActivityStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Unable to list item activity");
            Snackbar.Add($"Unable to load item activity. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
    }
    
    private void BuyItem(ItemPriceDTO price)
    {
        if (price != null && price.IsAvailable && !String.IsNullOrEmpty(price.BuyUrl))
        {
            ExternalNavigationManager.NavigateToNewTab(price.BuyUrl);
        }
    }
    
    private void ViewStorePage(DateTimeOffset storeDate)
    {
        NavigationManager.NavigateTo(
            $"/store/{storeDate.Add(TimeSpan.FromHours(1)).UtcDateTime.ToString(Constants.SCMMStoreIdDateFormat)}"
        );
    }
    
    private void ViewItemWorkshopPage()
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/sharedfiles/filedetails/?id={Item.WorkshopFileId}"
        );
    }
    
    private void ShowItemModelDialog()
    {
        Dialogs.Show<ViewItemModelDialog>(null, parameters: new DialogParameters()
        {
            ["ItemName"] = Item.Name,
            ["ItemType"] = Item.ItemType,
            ["WorkshopFileUrl"] = Item.WorkshopFileUrl,
            ["DisableCutoutControls"] = Item.HasCutout != true,
            ["DisableGlowControls"] = Item.HasGlow != true
        });
    }

    private void ViewCreatorWorkshopPage()
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/profiles/{Item.CreatorId}/myworkshopfiles/?appid={Item.AppId}"
        );
    }
    
    private void ShowCreatorItemsDialog()
    {
        Dialogs.Show<ViewItemListDialog>(null, parameters: new DialogParameters()
        {
            ["ListName"] = $"Skins by {Item.CreatorName}",
            ["ListUrl"] = $"api/item?creatorId={Item.CreatorId}&count=-1",
            ["HighlightedItemId"] = Item.Id
        });
    }

    private void ShowItemTypeDialog()
    {
        Dialogs.Show<ViewItemListDialog>(null, parameters: new DialogParameters()
        {
            ["ListName"] = $"Marketable {Item.ItemType.Pluralise()}",
            ["ListUrl"] = $"api/item?type={Item.ItemType}&count=-1",
            ["HighlightedItemId"] = Item.Id,
            ["SortByValue"] = true
        });
    }

    private void ShowItemCollectionDialog()
    {
        Dialogs.Show<ViewItemCollectionDialog>(null, parameters: new DialogParameters()
        {
            ["CollectionName"] = $"{Item.ItemCollection} Collection",
            ["CollectionUrl"] = $"api/item/collection/{Item.ItemCollection}?creatorId={Item.CreatorId}"
        });
    }
    
    private string GetGlowClass()
    {
        if (Item.HasGlow == true)
        {
            if (!String.IsNullOrEmpty(Item.DominantColour))
            {
                return $"glow-transparent";
            }
            else
            {
                return $"glow";
            }
        }
        return null;
    }

    private string GetGlowStyles()
    {
        if (Item.HasGlow == true)
        {
            if (!String.IsNullOrEmpty(Item.DominantColour))
            {
                return $"filter: drop-shadow(0px 0px 16px {Item.DominantColour});";
            }
        }
        return null;
    }
    
    private string GetActivityDescription(ItemActivityStatisticDTO activity)
    {
        if (activity.IsSale)
        {
            return "purchased";
        }
        switch (activity.Type)
        {
            case SteamMarketItemActivityType.CreatedSellOrder: return $"created a listing of";
            case SteamMarketItemActivityType.CancelledSellOrder: return $"cancelled their listing of";
            case SteamMarketItemActivityType.CreatedBuyOrder: return $"created a buy order of";
            case SteamMarketItemActivityType.CancelledBuyOrder: return $"cancelled their buy order of";
            default: return "did something";
        }
    }

}
