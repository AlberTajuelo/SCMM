@namespace SCMM.Web.Client.Pages.Steam.Inventory
@using SCMM.Web.Shared.Domain.DTOs.InventoryItems;
@using SCMM.Web.Shared; 
@inherits ComponentBase
@inject IJSRuntime JSRuntime

<style>

    .Item-Summary-Root {
        display: inline-flex;
        flex-direction: column;
        align-content: center;
        align-items: center;
        width: 104px;
        height: 128px;
        margin: 8px;
        border-radius: 3px;
        background-color: var(--theme-palette-background-paper, #fff);
    }

    .Item-Summary-Root:hover
    {
        background-color: #666666;
        cursor: pointer;
    }

    .Item-Summary-Root img {
        margin: calc(var(--theme-spacing, 6) * 2px);
        max-width: 72px;
        max-height: 72px;
    }

    .Item-Summary-Badge
    {
        margin: calc(var(--theme-spacing, 6) * 2px);
    }
    
    .Item-Summary-Badge > .Badge-Top-Right-Rectangle 
    {
        top: calc(var(--theme-spacing, 6) * 2px);
        right: calc(var(--theme-spacing, 6) * 2px);
    }

    .Item-Summary-Badge img
    {
        margin: 0px;
    }

</style>

<div style="padding:8px">
    @foreach (var item in Items)
    { 
        <div class="Item-Summary-Root" style="@GetItemStyles(item.Item)" @onclick="@((_) => OnItemClicked(item.Item))">
            @if (item.Quantity > 1)
            {
                <Badge Class="Item-Summary-Badge"
                       Badge="@item.Quantity.ToString()"
                       Color="@Color.Primary">
                    <img src="@item.Item.IconUrl" />
                </Badge>
            }
            else
            {
                <img src="@item.Item.IconUrl" />
            }
            <Typography Variant="@TypographyVariant.Body2">
                @item.Item.Currency.ToPriceString(item.Item.Last1hrValue)
            </Typography>
        </div>
    }
</div>

@code {

    [Parameter]
    public IEnumerable<ProfileInventoryItemSummaryDTO> Items { get; set; }

    private string GetItemStyles(InventoryMarketItemDTO item)
    {
        return $"border: 2px solid {item.ForegroundColour}";
    }

    private void OnItemClicked(InventoryMarketItemDTO item)
    {
        //Navigation.NavigateTo($"steam/marketplace/{item.Id}");
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

}
