@using SCMM.Web.Client.Shared.Dialogs.Items
@using SCMM.Web.Data.Models.UI.Item
@inherits PersistentComponent
@inject IDialogService Dialogs
@inject HttpClient Http
@inject AppState State

<MudField Label="@Label" Disabled="@(ItemTypesGroups == null || !ItemTypesGroups.Any() || State.IsPrerendering)" Variant="@Variant" Margin="@Margin" FullWidth="@FullWidth" Class="@Class">
    <div class="clickable" @onclick="@ShowItemTypePickerDialog">
        <div class="d-flex flex-row align-center">
            @if (ItemTypes?.Length > 0)
            {
                <div class="d-flex flex-row align-center my-n2 mr-2 no-wrap">
                    @if (ItemTypes.Length > 1)
                    {
                        <i class="fa fa-fw fa-list fa-xl mr-2"></i>
                        <span>@ItemTypes.Length Items <small class="mud-secondary-text">(@String.Join(", ", ItemTypes.Select(x => x.Name)))</small></span>
                    }
                    else
                    {
                        @foreach (var itemType in ItemTypes)
                        {
                            <img src="/images/app/@(State.AppId)/items/@(itemType.Id).png" class="mr-2" style="height:2em" />
                            <span>@itemType.Name</span>
                        }
                    }
                </div>
                <MudSpacer />
                <MudIconButton Icon="fa fa-fw fa-times" Size="MudBlazor.Size.Small" OnClick="@(() => SetItemTypes(null))" Class="pa-0 ma-0" title="Clear"></MudIconButton>
            }
            else
            {
                <i class="fa fa-fw fa-tshirt mr-2"></i>
                <span class="mud-secondary-text">Select an item...</span>
            }
        </div>
    </div>
</MudField>

@code {

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public MudBlazor.Variant Variant { get; set; }

    [Parameter]
    public MudBlazor.Margin Margin { get; set; }

    [Parameter]
    public bool FullWidth { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    private IEnumerable<ItemTypeGroupDTO> ItemTypesGroups;

    private ItemTypeDTO[] ItemTypes;

    protected override async Task OnLoadStateAsync()
    {
        ItemTypesGroups = await RestoreFromStateOrLoad(nameof(ItemTypesGroups), async () =>
        {
            return await Http.GetFromJsonWithDefaultsAsync<IEnumerable<ItemTypeGroupDTO>>($"api/item/types");
        });
        ItemTypes = await RestoreFromStateOrLoad(nameof(ItemTypes), () =>
        {
            if (ItemTypesGroups != null && !String.IsNullOrEmpty(Value))
            {
                return Task.FromResult(new ItemTypeDTO[]
                {
                    ItemTypesGroups
                        .SelectMany(x => x.ItemTypes)
                        .FirstOrDefault(x => String.Equals(x.Name, Value, StringComparison.OrdinalIgnoreCase))
                });
            }
            return Task.FromResult(new ItemTypeDTO[0]);
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(ItemTypesGroups), ItemTypesGroups);
        PersistToState(nameof(ItemTypes), ItemTypes);
        return Task.CompletedTask;
    }

    private async Task SetItemTypes(ItemTypeDTO[] itemTypes)
    {
        ItemTypes = itemTypes;
        Value = (itemTypes?.Length > 0 ? String.Join(",", itemTypes.Select(x => x.Name)) : null);
        StateHasChanged();

        await ValueChanged.InvokeAsync(Value);
    }

    private async Task ShowItemTypePickerDialog()
    {
        var dialog = Dialogs.Show<ItemTypeSelectionDialog>(null, parameters: new DialogParameters()
        {
            ["ItemTypesGroups"] = ItemTypesGroups
        });

        var itemTypes = await dialog.GetReturnValueAsync<ItemTypeDTO[]>();
        if (itemTypes != null)
        {
            await SetItemTypes(itemTypes);
        }
    }

}
