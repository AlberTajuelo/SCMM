@namespace SCMM.Web.Client.Pages.Steam.Inventory
@using Web.Shared.Data.Models.UI
@using SCMM.Web.Shared.Domain.DTOs.InventoryItems;
@inherits ComponentBase
@inject ILocalStorageService LocalStorage
@inject ILogger<InventoryItemsInvestment> Logger
@inject HttpClient Http

<Table StickyHeader Size="@Size.Small">
    <TableHead>
        <TableRow>
            <TableCell>
                @CreateSortableColumn("name", "Name")
            </TableCell>
            <TableCell>
                @CreateSortableColumn("buyPrice", "Buy Price")
            </TableCell>
            <TableCell>
                @CreateSortableColumn("marketValue", "Current Market Value")
            </TableCell>
            <TableCell>
                @CreateSortableColumn("resellPrice", "Resell Price")
            </TableCell>
            <TableCell>
                @CreateSortableColumn("resellFees", "Resell Fees")
            </TableCell>
            <TableCell>
                @CreateSortableColumn("resellProfit", "Resell Profit")
            </TableCell>
            <TableCell>
                @CreateSortableColumn("resellROI", "Resell ROI%")
            </TableCell>
        </TableRow>
    </TableHead>
    <TableBody>
        <Virtualize ItemsProvider="LoadItems" Context="item">
            <ItemContent>
                <InventoryItemsInvestmentTableRow Item="@item" ReadOnly="@ReadOnly" />
            </ItemContent>
            <Placeholder>
                <TableRow>
                    <TableCell>
                        <p style="padding: 8px">Loading...</p>
                    </TableCell>
                    <TableCell></TableCell>
                    <TableCell></TableCell>
                    <TableCell></TableCell>
                    <TableCell></TableCell>
                    <TableCell></TableCell>
                    <TableCell></TableCell>
                    <TableCell></TableCell>
                </TableRow>
            </Placeholder>
        </Virtualize>
    </TableBody>
</Table>

@code {

    [Parameter]
    public string SteamId { get; set; }
    
    [Parameter]
    public string Filter { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    private string OrderBy { set; get; } = "marketValue";

    private Sort Direction { set; get; } = Sort.Ascending;

    protected override async Task OnInitializedAsync()
    {
        OrderBy = await LocalStorage.GetItemAsync<string>("Inventory.SortBy");
        Direction = await LocalStorage.GetItemAsync<Sort>("Inventory.SortDirection");
    }

    private RenderFragment CreateSortableColumn(string name, string label)
    {
        return @<TableSortLabel
                    Active="@(OrderBy == name)"
                    Direction="@Direction"
                    OnClick="@CreateOnSortClick(name)">
                    @label
                </TableSortLabel>;
    }

    private EventCallback<EventArgs> CreateOnSortClick(string name)
    {
        return EventCallback.Factory.Create<System.EventArgs>(this, async (_) =>
        {
            await HandleSortClick(name);
        });
    }

    private async Task HandleSortClick(string name)
    {
        if (OrderBy == name)
        {
            Direction = Direction == Sort.Ascending ? Sort.Descending : Sort.Ascending;
        }
        else
        {
            Direction = Sort.Ascending;
        }
        OrderBy = name;
        await LocalStorage.SetItemAsync<string>("Inventory.SortBy", OrderBy);
        await LocalStorage.SetItemAsync<Sort>("Inventory.SortDirection", Direction);
        StateHasChanged();
    }
    
    protected async ValueTask<ItemsProviderResult<InventoryItemListDTO>> LoadItems(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<InventoryItemListDTO>>($"api/inventory/{SteamId}/returnOnInvestment?filter={Filter}&start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<InventoryItemListDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing inventory items");
            throw;
        }
    }
    
}
