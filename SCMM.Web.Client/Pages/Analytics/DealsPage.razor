@page "/deals"
@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Analytic
@inject ILogger<DealsPage> Logger
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<PageContainer Title="Market Deals">

    <MudGrid Spacing="2">
        
        <MudItem xs="12" xl="6">
            <AnalyticsPanel Icon="fas fa-fw fa-search-dollar" Title="Cheapest item offers" Subtitle="Looking to buy an item? Find the cheapest offer across all third party markets.">
                <div class="ma-n4">
                    <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Style="height:70vh;">
                        <thead>
                            <tr>
                                <th>
                                    <MudTextField T="string" ValueChanged="async (x) => { FilterCheapestDeals = x; await VirtualiseCheapestDeals.RefreshDataAsync(); StateHasChanged(); }" DebounceInterval="500" Placeholder="Search items..." FullWidth="true" Class="ma-0 pa-0"
                                                  Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-filter mr-2" IconSize="MudBlazor.Size.Small" />
                                </th>
                                <th>Cheapest Deal</th>
                                <th>Discount</th>
                                <th>Steam Community Market</th>
                            </tr>
                        </thead>
                        <tbody>
                            <Virtualize @ref="VirtualiseCheapestDeals" ItemsProvider="LoadCheapestThirdPartyDeals" Context="item">
                                <ItemContent>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2">@item.Name</MudText>
                                            </div>
                                        </td>
                                        <td>
                                            <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center">
                                                <MudButton Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="@((_) => BuyItem(item.BuyUrl))" Class="mr-2">Buy</MudButton>
                                                <img src="@($"/images/market/{item.BuyFrom.ToString().ToLower()}.png")" alt="@item.BuyFrom.GetDisplayName()" title="@item.BuyFrom.GetDisplayName()" class="mr-2" style="width:1.5em; height:1.5em" />
                                                <span>@State.Currency.ToPriceString(item.BuyTotal)</span>
                                                @if (State.Profile.ItemIncludeMarketFees && item.BuyFee != 0)
                                                {
                                                    <MudTooltip>
                                                        <TooltipContent>
                                                            @if (item.BuyFee > 0)
                                                            {
                                                                <span>Price includes @State.Currency.ToPriceString(item.BuyFee) in estimated fees charged by @item.BuyFrom.GetDisplayName() payment providers</span>
                                                            }
                                                            else
                                                            {
                                                                <span>Price includes @State.Currency.ToPriceString(item.BuyFee) in estimate discounts gained by purchasing @item.BuyFrom.GetDisplayName() balance</span>
                                                            }
                                                        </TooltipContent>
                                                        <ChildContent>
                                                            <i class="fa fa-fw fa-comment-dollar ml-1"></i>
                                                        </ChildContent>
                                                    </MudTooltip>
                                                }
                                            </MudText>
                                        </td>
                                        <td>
                                            <MudTooltip>
                                                <TooltipContent>
                                                    <span>Save @State.Currency.ToPriceString(item.DiscountAmount)</span>
                                                </TooltipContent>
                                                <ChildContent>
                                                    <MudChip Variant="Variant.Filled" Color="Color.Success" Size="@Size.Small" Text="@($"{item.DiscountAmount.ToPercentageString(item.ReferemcePrice)} off")">
                                                    </MudChip>
                                                </ChildContent>
                                            </MudTooltip>
                                        </td>
                                        <td>
                                            <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center">
                                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" OnClick="@((_) => ViewMarketItem(item.AppId, item.Name))" Class="mr-2">View</MudButton>
                                                <img src="@($"/images/market/{item.ReferenceFrom.ToString().ToLower()}.png")" alt="@item.ReferenceFrom.GetDisplayName()" title="@item.ReferenceFrom.GetDisplayName()" class="mr-2" style="width:1.5em; height:1.5em" />
                                                <span>@State.Currency.ToPriceString(item.ReferemcePrice)</span>
                                            </MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td>—</td>
                                        <td>—</td>
                                        <td>—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </AnalyticsPanel>
        </MudItem>
    
        <MudItem xs="12" xl="6">
            <AnalyticsPanel Icon="fas fa-fw fa-search-dollar" Title="Undervalued items on third party markets" Subtitle="Looking to top up your Steam wallet balance? Buy these undervalued third party items and instantly flip them on the Steam Community Market for extra balance.">
                <div class="ma-n4">
                    <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Style="height:70vh;">
                        <thead>
                            <tr>
                                <th>
                                    <MudTextField T="string" ValueChanged="async (x) => { FilterUndervaluedDeals = x; await VirtualiseUndervaluedDeals.RefreshDataAsync(); StateHasChanged(); }" DebounceInterval="500" Placeholder="Search items..." FullWidth="true" Class="ma-0 pa-0"
                                                  Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-filter mr-2" IconSize="MudBlazor.Size.Small" />
                                </th>
                                <th>Buy Now</th>
                                <th class="pa-0">
                                    <i class="fa fa-fw fa-arrow-right"></i>
                                </th>
                                <th>Sell Instantly</th>
                            </tr>
                        </thead>
                        <tbody>
                            <Virtualize @ref="VirtualiseUndervaluedDeals" ItemsProvider="LoadUndervaluedThirdPartyDeals" Context="item">
                                <ItemContent>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2">@item.Name</MudText>
                                            </div>
                                        </td>
                                        <td>
                                            <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center">
                                                <MudButton Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="@((_) => BuyItem(item.BuyUrl))" Class="mr-2">Buy</MudButton>
                                                <img src="@($"/images/market/{item.BuyFrom.ToString().ToLower()}.png")" alt="@item.BuyFrom.GetDisplayName()" title="@item.BuyFrom.GetDisplayName()" class="mr-2" style="width:1.5em; height:1.5em" />
                                                <span>@State.Currency.ToPriceString(item.BuyTotal)</span>
                                                @if (State.Profile.ItemIncludeMarketFees && item.BuyFee != 0)
                                                {
                                                    <MudTooltip>
                                                        <TooltipContent>
                                                            @if (item.BuyFee > 0)
                                                            {
                                                                <span>Price includes @State.Currency.ToPriceString(item.BuyFee) in estimated fees charged by @item.BuyFrom.GetDisplayName()</span>
                                                            }
                                                            else
                                                            {
                                                                <span>Price includes @State.Currency.ToPriceString(item.BuyFee) in estimate discounts gained by purchasing @item.BuyFrom.GetDisplayName() balance</span>
                                                            }
                                                        </TooltipContent>
                                                        <ChildContent>
                                                            <i class="fa fa-fw fa-comment-dollar ml-1"></i>
                                                        </ChildContent>
                                                    </MudTooltip>
                                                }
                                            </MudText>
                                        </td>
                                        <th class="pa-0">
                                            <i class="fa fa-fw fa-arrow-right"></i>
                                        </th>
                                        <td>
                                            <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center">
                                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" OnClick="@((_) => ViewMarketItem(item.AppId, item.Name))" Class="mr-2">Sell</MudButton>
                                                <img src="@($"/images/market/{item.SellTo.ToString().ToLower()}.png")" alt="@item.BuyFrom.GetDisplayName()" title="@item.BuyFrom.GetDisplayName()" class="mr-2" style="width:1.5em; height:1.5em" />
                                                <span>@State.Currency.ToPriceString(item.SellPrice) for <strong>@State.Currency.ToPriceString(item.SellProfit, dense: true)</strong> profit @(State.Profile.ItemIncludeMarketFees ? "after" : "before") fees</span>
                                            </MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr>
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                            </div>
                                        </td>
                                        <td>—</td>
                                        <td></td>
                                        <td>—</td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </div>
            </AnalyticsPanel>
        </MudItem>
    
    </MudGrid>

</PageContainer>

@code {

    private string FilterCheapestDeals { get; set; }
    
    private string FilterUndervaluedDeals { get; set; }

    private Virtualize<MarketItemDealAnalyticDTO> VirtualiseCheapestDeals { get; set; }
    
    private Virtualize<MarketItemFlipDealAnalyticDTO> VirtualiseUndervaluedDeals { get; set; }

    private void ViewMarketItem(ulong appId, string name)
    {
        ExternalNavigationManager.NavigateToNewTab(new SteamMarketListingPageRequest()
        {
            AppId = appId.ToString(),
            MarketHashName = name
        }.ToString());
    }
    
    private void BuyItem(string buyUrl)
    {
        ExternalNavigationManager.NavigateToNewTab(buyUrl);
    }
    
    protected async ValueTask<ItemsProviderResult<MarketItemDealAnalyticDTO>> LoadCheapestThirdPartyDeals(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<MarketItemDealAnalyticDTO>>($"api/analytics/market/thirdParty/cheapestDeals?filter={Uri.EscapeDataString(FilterCheapestDeals ?? String.Empty)}&start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<MarketItemDealAnalyticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'cheapest third party deals' analytics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<MarketItemFlipDealAnalyticDTO>> LoadUndervaluedThirdPartyDeals(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<MarketItemFlipDealAnalyticDTO>>($"api/analytics/market/thirdParty/undervaluedDeals?filter={Uri.EscapeDataString(FilterUndervaluedDeals ?? String.Empty)}&start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<MarketItemFlipDealAnalyticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'undervalued third party deals' analytics");
            throw;
        }
    }
    
}
