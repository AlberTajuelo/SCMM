@namespace SCMM.Web.Client.Shared.Component
@using SCMM.Web.Data.Models.UI.Item
@inject IDialogService Dialogs
@inject ExternalNavigationManager ExternalNavigationManager
@inject AppState State

<div class="@($"item {GetDynamicClassNames()} mud-paper full-height d-flex flex-column")" @onclick="@(() => BuyItem())">
    <div class="item-icon hover-zoom">
        <img src="@Item.IconUrl" />
    </div>
    <div class="ma-2 d-flex flex-column justify-center align-center text-centered">
        <MudText Typo="MudBlazor.Typo.body1" Style="@($"color: {Item.ForegroundColour}")">
            <span>@Item.Name</span>
        </MudText>
        @if (PurchasableItem?.BuyNowPrice != null)
        {
            <MudText Typo="MudBlazor.Typo.body2" Class="no-wrap d-flex flex-row justify-center align-center">
                @switch(PurchasableItem.BuyNowFrom)
                {
                    case PriceType.SteamStore:
                    {
                        <i class="mx-1"><RustIcon /></i>
                        break;
                    }
                    case PriceType.SteamCommunityMarket:
                    {
                        <i class="fab fa-fw fa-steam mx-1" style="transform: scale(1.2)"></i>
                        break;
                    }
                }
                <span>@State.Currency.ToPriceString(PurchasableItem.BuyNowPrice.Value)</span>
            </MudText>
        }
        @if (SubscribableItem?.Subscriptions > 0)
        {
            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="no-wrap">
                <i class="fas fa-fw fa-user"></i>
                <span>@SubscribableItem.Subscriptions.Value.ToQuantityString()</span>
            </MudText>
        }
    </div>
</div>

@code {

    [Parameter]
    public bool Highlighted { get; set; }

    [Parameter]
    public IItemDescription Item { get; set; }

    private ICanBePurchased PurchasableItem => (Item as ICanBePurchased);
    
    private ICanBeSubscribed SubscribableItem => (Item as ICanBeSubscribed);

    private string GetDynamicClassNames()
    {
        var classNames = new List<string>();
        if (PurchasableItem != null)
        {
            classNames.Add("clickable");
        }
        if (Highlighted)
        {
            classNames.Add("flash highlighted");
        }
        return String.Join(' ', classNames);
    }
    
    private void ViewItemDetailsDialog()
    {
        Dialogs.Show<ViewItemDetailsDialog>(null, parameters: new DialogParameters()
        {
            ["ItemName"] = Item.Name,
            ["ItemUrl"] = $"api/item/{Item.Name}"
        });
    }
    

    private void BuyItem()
    {
        if (!String.IsNullOrEmpty(PurchasableItem?.BuyNowUrl))
        {
            ExternalNavigationManager.NavigateToNewTab(PurchasableItem.BuyNowUrl);
        }
    }

}
