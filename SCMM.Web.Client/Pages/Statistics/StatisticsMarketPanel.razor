@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Analytic
@using Syncfusion.Blazor.Charts
@inject ILogger<StatisticsMarketPanel> Logger
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject AppState State

<MudGrid Spacing="2">
    
    <MudItem xs="12" xl="12">
        <StatisticsPanel>
            <div class="d-flex flex-row flex-wrap">
                <div class="d-flex flex-column flex-grow-1">
                    <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="d-flex align-center">
                        <img src="@State.App.IconUrl" class="mr-2" style="width: 1em; height: 1em" />
                        <span>@State.App.Name Index Fund</span>
                    </MudText>
                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                        <span>If there was an <MudLink Typo="MudBlazor.Typo.body2" Href="https://www.investopedia.com/terms/i/indexfund.asp" Target="_blank">index fund</MudLink> that tracked the performance of all market items, how is it performing?</span>
                    </MudText>
                </div>
                <div class="pa-1 flex-shrink-1">
                    <MudButtonGroup Variant="Variant.Text" OverrideStyles="false">
                        <MudButton OnClick="@(() => LoadMarketIndexFund(7))" Color="@(MarketIndexFundMaxDays == 7 ? Color.Primary : Color.Secondary)" Class="px-2" Disabled="State.IsPrerendering">Week</MudButton>
                        <MudButton OnClick="@(() => LoadMarketIndexFund(30))" Color="@(MarketIndexFundMaxDays == 30 ? Color.Primary : Color.Secondary)" Class="px-2" Disabled="State.IsPrerendering">Month</MudButton>
                        <MudButton OnClick="@(() => LoadMarketIndexFund(365))" Color="@(MarketIndexFundMaxDays == 365 ? Color.Primary : Color.Secondary)" Class="px-2" Disabled="State.IsPrerendering">Year</MudButton>
                        <MudButton OnClick="@(() => LoadMarketIndexFund(-1))" Color="@(MarketIndexFundMaxDays == -1 ? Color.Primary : Color.Secondary)" Class="px-2" Disabled="State.IsPrerendering">Lifetime</MudButton>
                    </MudButtonGroup>
                </div>
            </div>
            <div class="d-flex flex-column justify-stretch align-stretch relative" style="height:75vh">
                @if (MarketIndexFundChartData == null)
                {
                    <div class="d-flex align-center justify-center full-width full-height pa-2">
                        <Loading Message="Loading market index fund..." />
                    </div>
                }
                else
                {
                    <SfChart ID="MarketIndexFund" Theme="Syncfusion.Blazor.Theme.FluentDark" Background="transparent" Width="100%" Height="100%">
                        <ChartArea>
                            <ChartAreaBorder Width="0"></ChartAreaBorder>
                        </ChartArea>
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" IntervalType="IntervalType.Auto" Format="d-MMM-yy" LabelIntersectAction="LabelIntersectAction.Rotate90" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                        </ChartPrimaryXAxis>
                        <ChartAxes>
                            <ChartAxis Name="TotalSalesVolumeAxis" RowIndex="0" LabelFormat="#,##" EdgeLabelPlacement="EdgeLabelPlacement.Shift" OpposedPosition="true" />
                            <ChartAxis Name="TotalSalesValueAxis" RowIndex="1" LabelFormat="@($"{State.Currency.PrefixText}#,##0.00{State.Currency.SuffixText}")" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />
                            <ChartAxis Name="AverageItemValueAxis" RowIndex="3" LabelFormat="@($"{State.Currency.PrefixText}#,##0.00{State.Currency.SuffixText}")" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />
                        </ChartAxes>
                        <ChartRows>
                            <ChartRow Height="25%"></ChartRow>
                            <ChartRow Height="35%"></ChartRow>
                            <ChartRow Height="5%"></ChartRow>
                            <ChartRow Height="35%"></ChartRow>
                        </ChartRows>
                        <ChartSeriesCollection>
                            <Syncfusion.Blazor.Charts.ChartSeries DataSource="@MarketIndexFundChartData" YAxisName="TotalSalesVolumeAxis" Name="Daily Sales Volume" XName="Date" YName="TotalSalesVolume" Fill="#66c0f4" Type="ChartSeriesType.StepArea">
                            </Syncfusion.Blazor.Charts.ChartSeries>
                            <Syncfusion.Blazor.Charts.ChartSeries DataSource="@MarketIndexFundChartData" YAxisName="TotalSalesValueAxis" Name="Daily Sales Value" XName="Date" YName="TotalSalesValue" Fill="#388e3c" Type="ChartSeriesType.Line">
                            </Syncfusion.Blazor.Charts.ChartSeries>
                            <Syncfusion.Blazor.Charts.ChartSeries DataSource="@MarketIndexFundChartData" YAxisName="AverageItemValueAxis" Name="@($"{@State.App.Name} Index Fund Value")" XName="Date" YName="AverageItemValue" Fill="@State.App.PrimaryColor" Type="ChartSeriesType.Line">
                            </Syncfusion.Blazor.Charts.ChartSeries>
                        </ChartSeriesCollection>
                        <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="false" EnablePinchZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
                        <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
                        <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                        <ChartLegendSettings Visible="true"></ChartLegendSettings>
                    </SfChart>
                }
            </div>
            <div>
                <MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary" GutterBottom>
                    <span>Based on Dr. Blake Porter's <MudLink Typo="MudBlazor.Typo.caption" Href="https://www.blakeporterneuro.com/video-game-skin-analysis-rust/" Target="_blank">"Video Game Skin Analysis"</MudLink> (2019).</span><br />
                    <span>For every day there are items trading on the Steam Community Market we get the total number of sales and median sale price of all traded items for that day.</span><br />
                    <span>The index fund value is calculated as '<code>sales[day].groupBy(item).avg(item.median_sales_price)</code>'. The cumulative value is calculated as '<code>sales[day].sum(median_sales_price * sales_volume)</code>'.</span><br />
                </MudText>
            </div>
        </StatisticsPanel>
    </MudItem>
    
</MudGrid>

@code {
    
    private IEnumerable<MarketIndexFundChartPointDTO> MarketIndexFundChartData { get; set; }
    
    private int MarketIndexFundMaxDays { get; set; }

    protected override void OnInitialized()
    {
        _ = LoadMarketIndexFund();
    }
    
    protected async Task LoadMarketIndexFund(int maxDays = 30)
    {
        try
        {
            MarketIndexFundMaxDays = maxDays;
            MarketIndexFundChartData = null;
            StateHasChanged();
            MarketIndexFundChartData = await Http.GetFromJsonWithDefaultsAsync<IEnumerable<MarketIndexFundChartPointDTO>>($"api/stats/market/indexFund?maxDays={maxDays}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Unable to list market index fund");
            Snackbar.Add($"Unable to load market index fund. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }
}
