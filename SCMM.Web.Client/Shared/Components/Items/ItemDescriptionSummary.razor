@using SCMM.Web.Data.Models.UI.Item
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject AppState State

<div class="@($"item {GetDynamicClassNames()} mud-paper full-height d-flex flex-column")" @onclick="@(() => OnItemClicked())" @attributes="@AdditionalAttributes">
    @if (PurchasableItem.BuyNowFrom == MarketType.SteamStore && Item.TimeAccepted != null && (DateTimeOffset.Now - Item.TimeAccepted.Value).Duration().TotalDays < 7)
    {
        <MudBadge Color="MudBlazor.Color.Primary" Content="@("New")" Overlap="true" Bordered="false" Origin="Origin.BottomCenter" Class="d-flex flex-grow-1">
            <div class="d-flex flex-grow-1 align-center justify-center hover-zoom">
                <img src="@Item.IconUrl" class="@($"{GetGlowClass()} icon full-width")" style="@GetGlowStyles()" />
            </div>
        </MudBadge>
    }
    else if (PurchasableItem.BuyNowFrom != MarketType.SteamStore && PurchasableItem.BuyNowPrice > 0 && PurchasableItem.OriginalPrice > 0 && (State.Profile.ItemInfo == null || State.Profile.ItemInfo.Any(x => x == ItemInfoType.StorePrice)))
    {
        <MudBadge Color="@((PurchasableItem.BuyNowPrice > PurchasableItem.OriginalPrice) ? MudBlazor.Color.Success : PurchasableItem.BuyNowPrice < PurchasableItem.OriginalPrice ? MudBlazor.Color.Error : MudBlazor.Color.Secondary)" 
                  Content="@($"{(PurchasableItem.BuyNowPrice > PurchasableItem.OriginalPrice ? "▲" : PurchasableItem.BuyNowPrice < PurchasableItem.OriginalPrice ? "▼" : String.Empty)} {PurchasableItem.BuyNowPrice.Value.ToMovementString(PurchasableItem.OriginalPrice.Value)}")" 
                  Overlap="true" Bordered="false" Origin="Origin.BottomCenter" Class="d-flex flex-grow-1">
            <div class="d-flex flex-grow-1 align-center justify-center hover-zoom">
                <img src="@Item.IconUrl" class="@($"{GetGlowClass()} icon full-width")" style="@GetGlowStyles()" />
            </div>
        </MudBadge>
    }
    else
    {
        <div class="d-flex flex-grow-1 justify-center align-center hover-zoom">
            <img src="@Item.IconUrl" class="@($"{GetGlowClass()} icon full-width")" style="@GetGlowStyles()" />
        </div>
    }
    <div class="ma-2 d-flex flex-column justify-center align-center text-centered">
        <MudText Typo="MudBlazor.Typo.body1" Style="@($"color: {Item.ForegroundColour}")">
            <span>@Item.Name</span>
        </MudText>
        @if (PurchasableItem?.BuyNowPrice != null)
        {
            <MudText Typo="MudBlazor.Typo.body2" Class="d-flex flex-row flex-wrap justify-center align-center">
                <img src="@($"/images/price/{PurchasableItem.BuyNowFrom.ToString().ToLower()}.png")" alt="@PurchasableItem.BuyNowFrom.Value.GetDisplayName()" title="@PurchasableItem.BuyNowFrom.Value.GetDisplayName()" class="mr-1" style="width:1.1em; height:1.1em" />
                <span>@State.Currency.ToPriceString(PurchasableItem.BuyNowPrice.Value)</span>
                @if (PurchasableItem.BuyNowPrice > 0 && PurchasableItem.OriginalPrice > 0 && PurchasableItem.BuyNowFrom != MarketType.SteamStore && (State.Profile.ItemInfo == null || State.Profile.ItemInfo.Any(x => x == ItemInfoType.StorePrice)))
                {
                    <span class="mud-secondary-text text-line-through px-1">@State.Currency.ToPriceString(PurchasableItem.OriginalPrice.Value, dense: true)</span>
                }
            </MudText>
        }
        <div class="d-flex flex-row justify-center align-center text-centered">
            @if (PurchasableItem?.Supply > 0 && (State.Profile.ItemInfo == null || State.Profile.ItemInfo.Any(x => x == ItemInfoType.Supply)))
            {
                <MudTooltip Text="Supply on the market">
                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="no-wrap">
                        <i class="fas fa-fw fa-parachute-box"></i>
                        <span>@PurchasableItem.Supply.Value.ToQuantityString()</span>
                    </MudText>
                </MudTooltip>
            }
            @if (PurchasableItem?.Demand > 0 && (State.Profile.ItemInfo == null || State.Profile.ItemInfo.Any(x => x == ItemInfoType.Demand)))
            {
                <MudTooltip Text="Demand from the market in the last 24hrs">
                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="no-wrap">
                        <i class="fas fa-fw fa-exchange-alt ml-1"></i>
                        <span>@PurchasableItem.Demand.Value.ToQuantityString()</span>
                    </MudText>
                </MudTooltip>
            }
        </div>
        @if (SubscribableItem?.Subscriptions > 0 && (State.Profile.ItemInfo == null || State.Profile.ItemInfo.Any(x => x == ItemInfoType.Subscriptions)))
        {
            <MudTooltip Text="Subscribers">
                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="no-wrap">
                    <i class="fas fa-fw fa-user"></i>
                    <span>@SubscribableItem.Subscriptions.Value.ToQuantityString()</span>
                </MudText>
            </MudTooltip>
        }
        @if (Item.TimeAccepted != null && (DateTimeOffset.Now - Item.TimeAccepted.Value).TotalDays > 1 && (State.Profile.ItemInfo == null || State.Profile.ItemInfo.Any(x => x == ItemInfoType.Age)))
        {
            <MudTooltip Text="Age">
                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="no-wrap">
                    <i class="fas fa-fw fa-clock"></i>
                    <span>@((DateTimeOffset.Now - Item.TimeAccepted.Value).ToDurationString(showHours: false, showMinutes: false, showSeconds: false, maxGranularity: 1, zero: "just accepted", suffix: "old"))</span>
                </MudText>
            </MudTooltip>
        }
    </div>
</div>

@code {

    [Parameter]
    public bool Highlighted { get; set; }

    [Parameter]
    public IItemDescription Item { get; set; }

    private ICanBePurchased PurchasableItem => (Item as ICanBePurchased);
    
    private ICanBeSubscribed SubscribableItem => (Item as ICanBeSubscribed);
    
    [Parameter]
    public Action<IItemDescription> OnClick { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }
    
    private string GetDynamicClassNames()
    {
        var classNames = new List<string>();
        if (PurchasableItem != null)
        {
            classNames.Add("clickable");
        }
        if (Highlighted)
        {
            classNames.Add("flash highlighted");
        }
        return String.Join(' ', classNames);
    }
    
    private string GetGlowClass()
    {
        if (Item.HasGlow == true)
        {
            if (!String.IsNullOrEmpty(Item.DominantColour))
            {
                return $"glow-transparent";
            }
            else
            {
                return $"glow";
            }
        }
        return null;
    }

    private string GetGlowStyles()
    {
        if (Item.HasGlow == true)
        {
            if (!String.IsNullOrEmpty(Item.DominantColour))
            {
                return $"filter: drop-shadow(0px 0px 16px {Item.DominantColour});";
            }
        }
        return null;
    }
    
    private void OnItemClicked()
    {
        if (OnClick != null)
        {
            OnClick.Invoke(Item);
        }
        else
        {
            ExternalNavigationManager.NavigateToItem(Item);
        }
    }

}
