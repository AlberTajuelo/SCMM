@page "/steam/store"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SCMM.Web.Shared.Domain.DTOs.StoreItems
@using SCMM.Web.Shared
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AppState State

<DocumentTitle Title="Item Store" />
@if (Items == null)
{
    <Loading />
}
else
{
    <Grid Container Spacing="@Spacing.Two">
        <Grid Item Large="@GridSize.Twelve" ExtraLarge="@GridSize.Six">
            <Paper>
                <Table Narrow="true">
                    <TableBody>
                        @foreach (var item in Items)
                        {
                            <TableRow>
                                <TableCell Class="align-top">
                                    <Hidden ExtraSmallDown>
                                        <img src="@item.IconUrl" style="width:80px" />
                                    </Hidden>
                                </TableCell>
                                <TableCell Class="align-top">
                                    <Typography Variant="@TypographyVariant.H6" Style="@GetItemStyles(item)" GutterBottom="true">
                                        @item.Name
                                    </Typography>
                                    <Typography Variant="@TypographyVariant.Body2">
                                        @foreach (var tag in item.Tags)
                                        {
                                            <div class="Chip-Root">
                                                <span class="Chip-Label">
                                                    @tag.Value
                                                </span>
                                            </div>
                                        }
                                    </Typography>
                                </TableCell>
                                <TableCell Class="align-top">
                                    <Typography Variant="@TypographyVariant.Subtitle1" GutterBottom="true">
                                        <i class="fa fa-fw fa-tag"></i>
                                        @item.Currency.ToPriceString(item.StorePrice)
                                    </Typography>
                                    <Typography Variant="@TypographyVariant.Body2">
                                        @if (item.MarketRankTotal > 0)
                                        {
                                            <small>There are <strong>@item.MarketRankPosition</strong> cheaper market items of this type (@item.MarketRankPosition/@item.MarketRankTotal).</small>
                                        }
                                    </Typography>
                                </TableCell>
                                <TableCell Class="align-top">
                                    <Typography Variant="@TypographyVariant.Body1" NoWrap>
                                        <i class="fa fa-fw fa-user"></i>
                                        @item.Subscriptions.ToQuantityString()
                                    </Typography>
                                    <Typography Variant="@TypographyVariant.Body1" NoWrap>
                                        <i class="fa fa-fw fa-eye"></i>
                                        @item.Views.ToQuantityString()
                                    </Typography>
                                    <Typography Variant="@TypographyVariant.Body1" NoWrap>
                                        <i class="fa fa-fw fa-heart"></i>
                                        @item.Favourited.ToQuantityString()
                                    </Typography>
                                </TableCell>
                                <TableCell Class="align-top" Align="@Align.Right">
                                    <Typography GutterBottom="true" class="Theme-Success">
                                        <Button OnClick="@(() => BuyItem(item))" Variant="@ButtonVariant.Contained" Color="@Color.Primary">Buy</Button>
                                    </Typography>
                                    <Typography class="Theme-Info">
                                        <Button OnClick="@(() => ViewItem(item))" Variant="@ButtonVariant.Outlined" Color="@Color.Primary">View</Button>
                                    </Typography>
                                </TableCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </Paper>
        </Grid>
        <Grid Item Large="@GridSize.Twelve" ExtraLarge="@GridSize.Six">
            <Grid Container>
                <Grid ExtraSmall="@GridSize.Twelve">
                    @if (ItemRevenueChart != null || ItemRankChart != null || ItemRankHistoryChart != null)
                    {
                        <Paper>
                            <Tabs Value="@SelectedItemChartPanel"
                                  OnChange="@OnSelectedItemChartChanged"
                                  IndicatorColor="@Color.Primary"
                                  TextColor="@Color.Primary"
                                  Variant="@TabsVariant.FullWidth">
                                <Tab Id="store-tab" Control="store-tab-panel" Value="0" Label="Sales Revenue" Wrapped />
                                <Tab Id="store-tab" Control="store-tab-panel" Value="1" Label="Popular Now" Wrapped />
                                <Tab Id="store-tab" Control="store-tab-panel" Value="2" Label="Popular This Week" Wrapped />
                            </Tabs>
                            <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="0">
                                @if (ItemRevenueChart != null)
                                {
                                    <Alert Info Title="Sales revenue calculation disclaimer" Rounded="false">
                                        <Icon>
                                            <i class="fa fa-fw fa-exclamation-circle"></i>
                                        </Icon>
                                        <MessageContent>
                                            <span><strong>TL;DR;</strong> Revenue is at least @(State.Currency.ToPriceString(Items.Sum(x => x.Subscriptions * x.StorePrice))) so far this week.</span>
                                            <span>This graph represents the <strong>minimum</strong> revenue earned per-item from store purchases. Because an individual can purchase multiple copies of the same item, actual revenue will always be higher. Steam doesn't advertise exact sales figures, this is the closest estimate.</span>
                                        </MessageContent>
                                    </Alert>
                                    <ChartJsBarChart @ref="ItemRevenueChartJs" Config="@ItemRevenueChart" />
                                }
                            </TabPanel>
                            <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="1">
                                @if (ItemRankChart != null)
                                {
                                    <ChartJsBarChart @ref="ItemRankChartJs" Config="@ItemRankChart" />
                                }
                            </TabPanel>
                            <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="2">
                                @if (ItemRankHistoryChart != null)
                                {
                                    <ChartJsLineChart @ref="ItemRankHistoryChartJs" Config="@ItemRankHistoryChart" />
                                }
                            </TabPanel>
                        </Paper>
                    }
                </Grid>
                <Grid Item ExtraSmall="@GridSize.Six">
                    <YouTubeVideo VideoId="6grqmzE9nAY" />
                </Grid>
                <Grid Item ExtraSmall="@GridSize.Six">
                    <YouTubeVideo VideoId="5Tffwn-D160" />
                </Grid>
            </Grid>
        </Grid>
    </Grid>
}

@code {

    private StoreItemListDTO[] Items { get; set; }

    private object SelectedItemChartPanel { get; set; } = 1;

    private ChartJsBarChart ItemRevenueChartJs { get; set; }

    private ChartJsBarChart ItemRankChartJs { get; set; }

    private ChartJsLineChart ItemRankHistoryChartJs { get; set; }

    private BarConfig ItemRevenueChart { get; set; }

    private BarConfig ItemRankChart { get; set; }

    private LineConfig ItemRankHistoryChart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshItems();
    }

    private async Task BuyItem(StoreItemListDTO item)
    {
        string url = $"https://store.steampowered.com/itemstore/{item.SteamAppId}/detail/{item.SteamId}/";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private async Task ViewItem(StoreItemListDTO item)
    {
        string url = $"https://steamcommunity.com/sharedfiles/filedetails/?id={item.SteamWorkshopId}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private async Task RefreshItems()
    {
        try
        {
            Items = await Http.GetFromJsonAsync<StoreItemListDTO[]>($"StoreItems");
            OnSelectedItemChartChanged(SelectedItemChartPanel);
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private string GetItemStyles(StoreItemListDTO item)
    {
        return $"color: {item.ForegroundColour}";
    }

    private void OnSelectedItemChartChanged(object value)
    {
        SelectedItemChartPanel = value;
        ItemRevenueChart = null;
        ItemRankChart = null;
        ItemRankHistoryChart = null;
        switch (SelectedItemChartPanel)
        {
            case 0: RedrawItemRevenueChart(); break;
            case 1: RedrawItemRankChart(); break;
            case 2: RedrawItemRankHistoryChart(); break;
        }

        StateHasChanged();
    }

    private void RedrawItemRevenueChart()
    {
        ItemRevenueChart = new BarConfig
        {
            Options = new BarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",

                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemRevenueChart.Data.Labels.AddRange(
            Items.Select(x => x.Name).ToArray()
        );

        var itemRevenue = new BarDataset<DoubleWrapper>
        {
            Label = "Minimum Sales Revenue",
            BackgroundColor = "#388e3c",
            BorderColor = "#1b5e20",
            BorderWidth = 1
        };
        itemRevenue.AddRange(
            Items.Select(x => (DoubleWrapper) (x.Subscriptions * x.StorePrice))
        );

        ItemRevenueChart.Data.Datasets.AddRange(new[] {
            itemRevenue
        });
    }

    private void RedrawItemRankChart()
    {
        ItemRankChart = new BarConfig
        {
            Options = new BarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemRankChart.Data.Labels.AddRange(
            Items.Select(x => x.Name).ToArray()
        );

        var itemSubscribers = new BarDataset<DoubleWrapper>
        {
            Label = "Total Subscribers",
            BackgroundColor = "#388e3c",
            BorderColor = "#1b5e20",
            BorderWidth = 1
        };
        itemSubscribers.AddRange(
            Items.Select(x => (DoubleWrapper) x.Subscriptions)
        );

        var itemViews = new BarDataset<DoubleWrapper>
        {
            Label = "Total Views",
            BackgroundColor = "#1976d2",
            BorderColor = "#0d47a1",
            BorderWidth = 1
        };
        itemViews.AddRange(
            Items.Select(x => (DoubleWrapper) x.Views)
        );

        ItemRankChart.Data.Datasets.AddRange(new[] {
            itemSubscribers, itemViews
        });
    }

    private void RedrawItemRankHistoryChart()
    {
        var startOfWeek = Items.FirstOrDefault()?.AcceptedOn.UtcDateTime;
        if (startOfWeek == null)
        {
            return;
        }

        ItemRankHistoryChart = new LineConfig
        {
            Options = new LineOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new Scales
                {

                    xAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemRankHistoryChart.Data.Labels = GetSkinWeekDates(startOfWeek.Value)
            .Select(x => x.ToString("dd MMMM yyyy"))
            .ToList();

        foreach (var item in Items)
        {
            var itemDataSet = new LineDataset<DoubleWrapper>
            {
                Label = item.Name,
                BackgroundColor = GraphDataSetColours[Array.IndexOf(Items, item)],
                BorderColor = GraphDataSetColours[Array.IndexOf(Items, item)],
                BorderWidth = 3,
                LineTension = 0.1,
                Fill = false
            };
            itemDataSet.AddRange(
                GetItemSubscriptionDataset(item, startOfWeek.Value)
            );
            ItemRankHistoryChart.Data.Datasets.Add(itemDataSet);
        }
    }

    IEnumerable<DateTime> GetSkinWeekDates(DateTime startOfWeek)
    {
        return new[] {
            startOfWeek.Date.AddDays(0),
            startOfWeek.Date.AddDays(1),
            startOfWeek.Date.AddDays(2),
            startOfWeek.Date.AddDays(3),
            startOfWeek.Date.AddDays(4),
            startOfWeek.Date.AddDays(5),
            startOfWeek.Date.AddDays(6),
            startOfWeek.Date.AddDays(7)
        };
    }

    IEnumerable<DoubleWrapper> GetItemSubscriptionDataset(StoreItemListDTO item, DateTime startOfWeek)
    {
        var dataSet = new List<DoubleWrapper>();
        if (item?.SubscriptionsHistory?.Any() != true)
        {
            return dataSet;
        }

        var graphDates = GetSkinWeekDates(startOfWeek).Where(x => x < DateTime.UtcNow);
        foreach (var graphDate in graphDates)
        {
            var dataPoint = 0d;
            var dataKey = graphDate.Date.ToString("dd MMM yyyy");
            var keys = item.SubscriptionsHistory.Keys.ToArray();
            if (item.SubscriptionsHistory.ContainsKey(dataKey))
            {
                dataPoint = item.SubscriptionsHistory[dataKey];
            }
            dataSet.Add(dataPoint);
        }
        return dataSet;
    }

    private string[] GraphDataSetColours = {
        "#2196F3",
        "#8BC34A",
        "#FF5722",
        "#E91E63",
        "#9C27B0",
        "#3F51B5",
        "#FF9800",
        "#FFEB3B",
        "#795548",
        "#00BCD4",
        "#607D8B"
    };

}
