@namespace SCMM.Web.Client.Pages.Steam.Inventory
@using SCMM.Web.Shared.Domain.DTOs.MarketItems;
@using SCMM.Web.Shared
@inherits ComponentBase
@inject HttpClient Http

<TableRow @key="@Item.Id" Hover>
    <TableCell Class="@GetItemClass()">
        <img src="@Item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
    </TableCell>
    <TableCell Component="th" Scope="row" Class="@GetItemClass()">
        <strong>@Item.Name</strong>
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @Item.Quantity.ToQuantityString()
    </TableCell>
    <TableCell Class="@GetItemClass()">
        <InputBase Type="number" Margin="@Margin.None" Style="width:70px" PlaceHolder="Set" Value="@Item.BuyPrice?.ToString()"
                   OnChange="@((e) => UpdateItemPrice(e.Value.ToString()))" />
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @if (Item.MarketItem != null)
        {
            @Item.MarketItem.Currency.ToPriceString(Item.MarketItem.Last1hrValue)
        }
        else
        {
            <span>—</span>
        }
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @if (Item.MarketItem != null)
        {
            @Item.MarketItem.Currency.ToPriceString(Item.MarketItem.ResellPrice)
        }
        else
        {
            <span>—</span>
        }
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @if (Item.MarketItem != null)
        {
            @Item.MarketItem.Currency.ToPriceString(Item.MarketItem.ResellTax)
        }
        else
        {
            <span>—</span>
        }
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @if (Item.MarketItem != null && Item.BuyPrice > 0)
        {
            @Item.MarketItem.Currency.ToPriceString(Item.MarketItem.ResellPrice - Item.MarketItem.ResellTax - Item.BuyPrice.Value)
        }
        else
        {
            <span>—</span>
        }
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @if (Item.MarketItem != null && Item.BuyPrice > 0)
        {
            @(((int)Math.Round(((decimal)(Item.MarketItem.ResellPrice - Item.MarketItem.ResellTax) / Item.BuyPrice.Value) * 100, 0)).ToRoIString())
        }
        else
        {
            <span>∞</span>
        }
    </TableCell>
</TableRow>

@code { 

    [Parameter]
    public InventoryItemListDTO Item { get; set; }

    private string GetItemClass()
    {
        if (Item.BuyPrice == 0 || Item.BuyPrice == null || Item.MarketItem == null)
        {
            return null;
        }
        var roi = ((int)Math.Round(((decimal)(Item.MarketItem.ResellPrice - Item.MarketItem.ResellTax) / Item.BuyPrice.Value) * 100, 0));
        if (roi >= 100)
        {
            return "Background-Success";
        }
        if (roi < 100)
        {
            return "Background-Error";
        }
        return null;
    }

    private async Task UpdateItemPrice(string value)
    {
        var buyPrice = 0;
        if (Int32.TryParse(value, out buyPrice) || String.IsNullOrEmpty(value))
        {
            if (buyPrice != Item.BuyPrice)
            {
                Item.BuyPrice = buyPrice;
                await Http.PutAsJsonAsync<int>($"InventoryItems/item/{Item.Id}", buyPrice);
            }
        }
    }

}
