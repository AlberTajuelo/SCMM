@page "/steam/store"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SCMM.Web.Shared.Domain.DTOs.StoreItems
@using SCMM.Web.Shared
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<Grid Container Spacing="@Spacing.Two">
    <Grid Item Medium="@GridSize.Twelve" Large="@GridSize.True">
        @if (items == null)
        {
            <Loading />
        }
        else
        {
            <Paper>
                <Table Narrow="true">
                    <TableBody>
                        @foreach (var item in items)
                        {
                            <TableRow>
                                <TableCell Class="align-top">
                                    <img src="@item.IconUrl" style="width:80px" />
                                </TableCell>
                                <TableCell Class="align-top">
                                    <Typography Variant="@TypographyVariant.H6" Style="@GetItemStyles(item)" GutterBottom="true">
                                        @item.Name
                                    </Typography>
                                    <Typography Variant="@TypographyVariant.Body2">
                                        @foreach (var tag in item.Tags)
                                        {
                                            <div class="Chip-Root">
                                                <span class="Chip-Label">
                                                    @tag.Value
                                                </span>
                                            </div>
                                        }
                                    </Typography>
                                </TableCell>
                                <TableCell Class="align-top">
                                    <Typography Variant="@TypographyVariant.Subtitle1" GutterBottom="true">
                                        <i class="fa fa-fw fa-tag"></i>
                                        @item.Currency.ToPriceString(item.StorePrice)
                                    </Typography>
                                    <Typography Variant="@TypographyVariant.Body2">
                                        @if (item.MarketRankTotal > 0)
                                        {
                                            <small>There are <strong>@item.MarketRankPosition</strong> cheaper market items of this type (@item.MarketRankPosition/@item.MarketRankTotal).</small>
                                        }
                                    </Typography>
                                </TableCell>
                                <TableCell Class="align-top">
                                    <Typography Variant="@TypographyVariant.Body1" NoWrap>
                                        <i class="fa fa-fw fa-user"></i>
                                        @item.Subscriptions.ToQuantityString()
                                    </Typography>
                                    <Typography Variant="@TypographyVariant.Body1" NoWrap>
                                        <i class="fa fa-fw fa-eye"></i>
                                        @item.Views.ToQuantityString()
                                    </Typography>
                                    <Typography Variant="@TypographyVariant.Body1" NoWrap>
                                        <i class="fa fa-fw fa-heart"></i>
                                        @item.Favourited.ToQuantityString()
                                    </Typography>
                                </TableCell>
                                <TableCell Class="align-top" Align="@Align.Right">
                                    <Typography GutterBottom="true" class="Theme-Success">
                                        <Button OnClick="@(() => BuyItem(item))" Variant="@ButtonVariant.Contained" Color="@Color.Primary">Buy</Button>
                                    </Typography>
                                    <Typography class="Theme-Info">
                                        <Button OnClick="@(() => ViewItem(item))" Variant="@ButtonVariant.Outlined" Color="@Color.Primary">View</Button>
                                    </Typography>
                                </TableCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </Paper>
        }
    </Grid>
    <Grid Item Medium="@GridSize.Twelve" Large="@GridSize.True">
        <Grid Container>
            <Grid ExtraSmall="@GridSize.Twelve">
                @if (itemRankChart != null || itemRankHistoryChart != null)
                {
                    <Paper>
                        <Tabs Value="@selectedItemChartPanel"
                              OnChange="@OnSelectedItemChartChanged"
                              IndicatorColor="@Color.Primary"
                              TextColor="@Color.Primary"
                              Variant="@TabsVariant.FullWidth">
                            <Tab Value="0" Label="Most Popular" />
                            <Tab Value="1" Label="This Weeks Trend" />
                        </Tabs>
                        <TabPanel Value="@selectedItemChartPanel" Index="0">
                            @if (itemRankChart != null)
                            {
                                <ChartJsBarChart @ref="itemRankChartJs" Config="@itemRankChart" />
                            }
                        </TabPanel>
                        <TabPanel Value="@selectedItemChartPanel" Index="1">
                            @if (itemRankHistoryChart != null)
                            {
                                <ChartJsLineChart @ref="itemRankHistoryChartJs" Config="@itemRankHistoryChart" />
                            }
                        </TabPanel>
                    </Paper>
                }
            </Grid>
            <Grid Item ExtraSmall="@GridSize.Six">
                <YouTubeVideo VideoId="6mBAuuIjX9Y" />
            </Grid>
            <Grid Item ExtraSmall="@GridSize.Six">
                <YouTubeVideo VideoId="pukk_mdIG68" />
            </Grid>
        </Grid>
    </Grid>

    <!--
    <Grid Item ExtraSmall="@GridSize.True">
        <Grid Container>
            <Grid Item ExtraSmall="@GridSize.Twelve">
                <div class="YouTube-Container">
                    <iframe id="ytplayer" type="text/html" width="720" height="405"
                            src="https://www.youtube.com/embed/pukk_mdIG68?modestbranding=1"
                            frameborder="0" allowfullscreen>
                    </iframe>
                </div>
            </Grid>
            <Grid Item ExtraSmall="@GridSize.Twelve">
                <div class="YouTube-Container">
                    <iframe id="ytplayer" type="text/html" width="720" height="405"
                            src="https://www.youtube.com/embed/6mBAuuIjX9Y?modestbranding=1"
                            frameborder="0" allowfullscreen>
                    </iframe>
                </div>
            </Grid>
        </Grid>
    </Grid>
    -->

</Grid>

@code {

    private StoreItemListDTO[] items;

    private object selectedItemChartPanel = 0;
    private ChartJsBarChart itemRankChartJs;
    private ChartJsLineChart itemRankHistoryChartJs;
    private BarConfig itemRankChart;
    private LineConfig itemRankHistoryChart;

    protected override async Task OnInitializedAsync()
    {
        await RefreshItems();
    }

    private async Task BuyItem(StoreItemListDTO item)
    {
        string url = $"https://store.steampowered.com/itemstore/{item.SteamAppId}/detail/{item.SteamId}/";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private async Task ViewItem(StoreItemListDTO item)
    {
        string url = $"https://steamcommunity.com/sharedfiles/filedetails/?id={item.SteamWorkshopId}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private async Task RefreshItems()
    {
        try
        {
            items = await Http.GetFromJsonAsync<StoreItemListDTO[]>($"StoreItems");
            OnSelectedItemChartChanged(selectedItemChartPanel);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private string GetItemStyles(StoreItemListDTO item)
    {
        return $"color: {item.ForegroundColour}";
    }

    private void OnSelectedItemChartChanged(object value)
    {
        selectedItemChartPanel = value;
        itemRankChart = null;
        itemRankHistoryChart = null;
        switch (selectedItemChartPanel)
        {
            case 0: RedrawItemRankChart(); break;
            case 1: RedrawItemRankHistoryChart(); break;
        }

        StateHasChanged();
    }

    private void RedrawItemRankChart()
    {
        itemRankChart = new BarConfig
        {
            Options = new BarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        itemRankChart.Data.Labels.AddRange(
            items.Select(x => x.Name).ToArray()
        );

        var itemSubscribers = new BarDataset<DoubleWrapper>
        {
            Label = "Total Subscribers",
            BackgroundColor = "#388e3c",
            BorderColor = "#1b5e20",
            BorderWidth = 1
        };
        itemSubscribers.AddRange(
            items.Select(x => (DoubleWrapper) x.Subscriptions)
        );

        var itemViews = new BarDataset<DoubleWrapper>
        {
            Label = "Total Views",
            BackgroundColor = "#1976d2",
            BorderColor = "#0d47a1",
            BorderWidth = 1
        };
        itemViews.AddRange(
            items.Select(x => (DoubleWrapper) x.Views)
        );

        itemRankChart.Data.Datasets.AddRange(new[] {
            itemSubscribers, itemViews
        });
    }

    private void RedrawItemRankHistoryChart()
    {
        var startOfWeek = items.FirstOrDefault()?.AcceptedOn.UtcDateTime;
        if (startOfWeek == null)
        {
            return;
        }

        itemRankHistoryChart = new LineConfig
        {
            Options = new LineOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new Scales
                {

                    xAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        itemRankHistoryChart.Data.Labels = GetSkinWeekDates(startOfWeek.Value)
            .Select(x => x.ToString("dd MMMM yyyy"))
            .ToList();

        foreach (var item in items)
        {
            var itemDataSet = new LineDataset<DoubleWrapper>
            {
                Label = item.Name,
                BackgroundColor = GraphDataSetColours[Array.IndexOf(items, item)],
                BorderColor = GraphDataSetColours[Array.IndexOf(items, item)],
                BorderWidth = 5,
                Fill = false
            };
            itemDataSet.AddRange(
                GetItemSubscriptionDataset(item, startOfWeek.Value)
            );
            itemRankHistoryChart.Data.Datasets.Add(itemDataSet);
        }
    }

    IEnumerable<DateTime> GetSkinWeekDates(DateTime startOfWeek)
    {
        return new[] {
            startOfWeek.Date.AddDays(0),
            startOfWeek.Date.AddDays(1),
            startOfWeek.Date.AddDays(2),
            startOfWeek.Date.AddDays(3),
            startOfWeek.Date.AddDays(4),
            startOfWeek.Date.AddDays(5),
            startOfWeek.Date.AddDays(6),
            startOfWeek.Date.AddDays(7)
        };
    }

    IEnumerable<DoubleWrapper> GetItemSubscriptionDataset(StoreItemListDTO item, DateTime startOfWeek)
    {
        var dataSet = new List<DoubleWrapper>();
        if (item?.SubscriptionsHistory?.Any() != true)
        {
            return dataSet;
        }

        var graphDates = GetSkinWeekDates(startOfWeek).Where(x => x < DateTime.UtcNow);
        foreach (var graphDate in graphDates)
        {
            var dataPoint = 0d;
            var dataKey = graphDate.Date.ToString("dd MMM yyyy");
            var keys = item.SubscriptionsHistory.Keys.ToArray();
            if (item.SubscriptionsHistory.ContainsKey(dataKey))
            {
                dataPoint = item.SubscriptionsHistory[dataKey];
            }
            dataSet.Add(dataPoint);
        }
        return dataSet;
    }

    private string[] GraphDataSetColours = {
        "#2196F3",
        "#8BC34A",
        "#FF5722",
        "#E91E63",
        "#9C27B0",
        "#3F51B5",
        "#FF9800",
        "#FFEB3B",
        "#795548",
        "#00BCD4",
        "#607D8B"
    };

}
