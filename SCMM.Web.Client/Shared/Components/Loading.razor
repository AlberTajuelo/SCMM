
<div class="loading-container" @attributes="AdditionalAttributes">
    <MudProgressCircular Indeterminate="@(ProgressTotal == null)" Value="@((double)(ProgressLoaded ?? 0))" Min="0" Max="@((double)(ProgressTotal ?? 0))" Size="@Size" />
    <MudText Typo="@Typo" Class="ma-6">
        <span>@Message</span>
        @if (ProgressLoaded > 0 && ProgressTotal > 0)
        {
            <span class="mud-secondary-text">(@ProgressLoaded.Value.ToPercentageString(ProgressTotal.Value))</span>
        }
	</MudText>
</div>

@code {

    [Parameter]
    public string Message { set; get; } = "Loading...";
    
    [Parameter]
    public long? ProgressLoaded { get; set; }
    
    [Parameter]
    public long? ProgressTotal { get; set; }

    [Parameter]
    public MudBlazor.Size Size { get; set; } = MudBlazor.Size.Medium;
    
    [Parameter]
    public MudBlazor.Typo Typo { get; set; } = MudBlazor.Typo.h6;

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }
    
    private string GetLoadingMessage()
    {
        if (ProgressTotal > 0)
        {
            return $"{Message}";
        }
        else 
        {
            return Message;
        }
    }
}