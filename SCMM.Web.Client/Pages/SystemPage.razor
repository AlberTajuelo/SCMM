@page "/system"
@inject ILogger<SystemPage> Logger
@inject ISnackbar Snackbar
@inject ISystemService SystemService
@inject AppState State

<PageContainer Title="SCMM - Service Health">
    @if (State.SystemStatus == null)
    {
        <Loading Message="Check system status..." />
    }
    else
    {
       <MudGrid Spacing="4">

            @*
            <MudItem xs="12" xxl="6">
                <MudPaper Outlined="true" Class="pa-4">
                    <MudStack Row="true" AlignItems="AlignItems.Start" Justify="Justify.SpaceBetween">
                        <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Default" GutterBottom>
                            <i class="fas fa-fw fa-server" />
                            <span>SCMM Services</span>
                        </MudText>
                        <MudIconButton Size="Size.Small" Variant="Variant.Text" Icon="fas fa-fw fa-rotate" Color="Color.Secondary" Title="Refresh system status" Disabled="State.IsPrerendering"
                                       OnClick="@(async () => await RefreshSystemStatusAsync())"></MudIconButton>
                    </MudStack>
                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                        <span>Under construction</span>
                    </MudText>
                </MudPaper>
            </MudItem>
            *@

            @if (State.SystemStatus.SteamApp != null)
            {
                <MudItem xs="12" xxl="6">
                    <MudPaper Outlined="true" Class="pa-4">
                        <MudStack Row="true" AlignItems="AlignItems.Start" Justify="Justify.SpaceBetween">
                            <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Default" GutterBottom>
                                <i class="fab fa-fw fa-steam" />
                                <span>Steam Services</span>
                            </MudText>
                            <MudIconButton Size="Size.Small" Variant="Variant.Text" Icon="fas fa-fw fa-rotate" Color="Color.Secondary" Title="Refresh system status" Disabled="State.IsPrerendering"
                                           OnClick="@(async () => await RefreshSystemStatusAsync())"></MudIconButton>
                        </MudStack>
                        <MudSimpleTable Elevation="0" Dense="true">
                            <thead>
                                <tr>
                                    <th>Recent @State.SystemStatus.SteamApp.Name Item Definition Archives</th>
                                    <th>Published</th>
                                    <th class="text-right">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var itemDefinitionArchive in State.SystemStatus.SteamApp.ItemDefinitionArchives)
                                {
                                    <tr>
                                        <td>@itemDefinitionArchive.Digest <small class="mud-secondary-text">(@(itemDefinitionArchive.Size.ToQuantityString()) bytes)</small></td>
                                        <td>@((DateTimeOffset.Now - itemDefinitionArchive.PublishedOn).ToDurationString(maxGranularity: 2, suffix: "ago"))</td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.inherit" Color="@(itemDefinitionArchive.IsImported ? Color.Success : Color.Warning)">
                                                @if (itemDefinitionArchive.IsImported)
                                                {
                                                    <span><i class="fas fa-fw fa-circle-check mr-1"></i>Imported</span>
                                                }
                                                else
                                                {
                                                    <span><i class="fas fa-fw fa-circle-exclamation mr-1"></i>Not processed</span>
                                                }
                                            </MudText>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                        <MudSimpleTable Elevation="0" Dense="true" Class="mt-4">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Update Frequency</th>
                                    <th>Update Delta</th>
                                    <th>Target Delta</th>
                                    <th class="text-right">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (State.SystemStatus.SteamApp.AssetDescriptionsUpdates.Newest != null && State.SystemStatus.SteamApp.AssetDescriptionsUpdates.Oldest != null)
                                {
                                    <tr>
                                        <td>@State.SystemStatus.SteamApp.Name Item Asset Descriptions</td>
                                        <td>
                                            <dl>
                                                <dt class="mud-secondary-text">Newest item update is:</dt>
                                                <dd>@((DateTimeOffset.Now - State.SystemStatus.SteamApp.AssetDescriptionsUpdates.Newest.Value).ToDurationString(maxGranularity: 2, suffix: "old"))</dd>
                                                <dt class="mud-secondary-text">Oldest item update is:</dt>
                                                <dd>@((DateTimeOffset.Now - State.SystemStatus.SteamApp.AssetDescriptionsUpdates.Oldest.Value).ToDurationString(maxGranularity: 2, suffix: "old"))</dd>
                                            </dl>
                                        </td>
                                        <td>@State.SystemStatus.SteamApp.AssetDescriptionsUpdates.Delta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td>Less than @State.SystemStatus.SteamApp.AssetDescriptionsUpdates.TargetDelta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.inherit" Color="@(State.SystemStatus.SteamApp.AssetDescriptionsUpdates.IsOnTarget ? Color.Success : Color.Warning)">
                                                @if (State.SystemStatus.SteamApp.AssetDescriptionsUpdates.IsOnTarget)
                                                {
                                                    <span><i class="fas fa-fw fa-circle-check mr-1"></i>Running on schedule</span>
                                                }
                                                else
                                                {
                                                    <span><i class="fas fa-fw fa-circle-exclamation mr-1"></i>Running behind schedule</span>
                                                }
                                            </MudText>
                                        </td>
                                    </tr>
                                }
                                @if (State.SystemStatus.SteamApp.MarketOrderUpdates.Newest != null && State.SystemStatus.SteamApp.MarketOrderUpdates.Oldest != null)
                                {
                                    <tr>
                                        <td>@State.SystemStatus.SteamApp.Name Market Item Buy/Sell Orders</td>
                                        <td>
                                            <dl>
                                                <dt class="mud-secondary-text">Newest item update is:</dt>
                                                <dd>@((DateTimeOffset.Now - State.SystemStatus.SteamApp.MarketOrderUpdates.Newest.Value).ToDurationString(maxGranularity: 2, suffix: "old"))</dd>
                                                <dt class="mud-secondary-text">Oldest item update is:</dt>
                                                <dd>@((DateTimeOffset.Now - State.SystemStatus.SteamApp.MarketOrderUpdates.Oldest.Value).ToDurationString(maxGranularity: 2, suffix: "old"))</dd>
                                            </dl>
                                        </td>
                                        <td>@State.SystemStatus.SteamApp.MarketOrderUpdates.Delta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td>Less than @State.SystemStatus.SteamApp.MarketOrderUpdates.TargetDelta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.inherit" Color="@(State.SystemStatus.SteamApp.MarketOrderUpdates.IsOnTarget ? Color.Success : Color.Warning)">
                                                @if (State.SystemStatus.SteamApp.MarketOrderUpdates.IsOnTarget)
                                                {
                                                    <span><i class="fas fa-fw fa-circle-check mr-1"></i>Running on schedule</span>
                                                }
                                                else
                                                {
                                                    <span><i class="fas fa-fw fa-circle-exclamation mr-1"></i>Running behind schedule</span>
                                                }
                                            </MudText>
                                        </td>
                                    </tr>
                                }
                                @if (State.SystemStatus.SteamApp.MarketSaleUpdates.Newest != null && State.SystemStatus.SteamApp.MarketSaleUpdates.Oldest != null)
                                {
                                    <tr>
                                        <td>@State.SystemStatus.SteamApp.Name Market Item Sales History</td>
                                        <td>
                                            <dl>
                                                <dt class="mud-secondary-text">Newest item update is:</dt>
                                                <dd>@((DateTimeOffset.Now - State.SystemStatus.SteamApp.MarketSaleUpdates.Newest.Value).ToDurationString(maxGranularity: 2, suffix: "old"))</dd>
                                                <dt class="mud-secondary-text">Oldest item update is:</dt>
                                                <dd>@((DateTimeOffset.Now - State.SystemStatus.SteamApp.MarketSaleUpdates.Oldest.Value).ToDurationString(maxGranularity: 2, suffix: "old"))</dd>
                                            </dl>
                                        </td>
                                        <td>@State.SystemStatus.SteamApp.MarketSaleUpdates.Delta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td>Less than @State.SystemStatus.SteamApp.MarketSaleUpdates.TargetDelta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.inherit" Color="@(State.SystemStatus.SteamApp.MarketSaleUpdates.IsOnTarget ? Color.Success : Color.Warning)">
                                                @if (State.SystemStatus.SteamApp.MarketSaleUpdates.IsOnTarget)
                                                {
                                                    <span><i class="fas fa-fw fa-circle-check mr-1"></i>Running on schedule</span>
                                                }
                                                else
                                                {
                                                    <span><i class="fas fa-fw fa-circle-exclamation mr-1"></i>Running behind schedule</span>
                                                }
                                            </MudText>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudPaper>
                </MudItem>
            }

            @if (State.SystemStatus.WebProxies?.Any() == true)
            {
                <MudItem xs="12" xxl="6">
                    <MudPaper Outlined="true" Class="pa-4">
                        <MudStack Row="true" AlignItems="AlignItems.Start" Justify="Justify.SpaceBetween">
                            <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Default" GutterBottom>
                                <i class="fas fa-fw fa-robot" />
                                <span>SCMM Proxies</span>
                            </MudText>
                            <MudIconButton Size="Size.Small" Variant="Variant.Text" Icon="fas fa-fw fa-rotate" Color="Color.Secondary" Title="Refresh system status" Disabled="State.IsPrerendering"
                                           OnClick="@(async () => await RefreshSystemStatusAsync())"></MudIconButton>
                        </MudStack>
                        <MudSimpleTable Elevation="0" FixedHeader="true" Dense="true" Style="height:50vh">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Location</th>
                                    <th>Last Checked</th>
                                    <th class="text-right">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var webProxy in State.SystemStatus.WebProxies)
                                {
                                    <tr>
                                        <td>
                                            <i class="fas fa-fw fa-globe mr-1"></i>
                                            <span>Proxy #@(State.SystemStatus.WebProxies.IndexOf(webProxy) + 1)</span>
                                            <span><small>(@webProxy.Id)</small></span>
                                        </td>
                                        <td>
                                            <span>@webProxy.CountryFlag @webProxy.CityName</span>
                                            <span><small>(@webProxy.Address)</small></span>
                                        </td>
                                        <td>@((DateTimeOffset.Now - webProxy.LastCheckedOn).ToDurationString(maxGranularity: 2, suffix: "ago"))</td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.inherit" Color="@(webProxy.IsAvailable ? Color.Success : Color.Warning)">
                                                @if (webProxy.IsAvailable)
                                                {
                                                    <span><i class="fas fa-fw fa-circle-check mr-1"></i>Online</span>
                                                }
                                                else
                                                {
                                                    <span><i class="fas fa-fw fa-circle-exclamation mr-1"></i>Unavailable</span>
                                                }
                                            </MudText>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudPaper>
                </MudItem>
            }
        
            @*
            <MudItem xs="12" xxl="6">
                <MudPaper Outlined="true" Class="pa-4">
                    <MudStack Row="true" AlignItems="AlignItems.Start" Justify="Justify.SpaceBetween">
                        <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Default" GutterBottom>
                            <i class="fas fa-fw fa-shapes" />
                            <span>3rd Party Services</span>
                        </MudText>
                        <MudIconButton Size="Size.Small" Variant="Variant.Text" Icon="fas fa-fw fa-rotate" Color="Color.Secondary" Title="Refresh system status" Disabled="State.IsPrerendering"
                                       OnClick="@(async () => await RefreshSystemStatusAsync())"></MudIconButton>
                    </MudStack>
                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                        <span>Under construction</span>
                    </MudText>
                </MudPaper>
            </MudItem>
            *@

        </MudGrid> 
    }
</PageContainer>

@code {

    protected override async Task OnInitializedAsync()
    {
        if (State.SystemStatus == null)
        {
            await RefreshSystemStatusAsync();
        }
    }

    public async Task RefreshSystemStatusAsync()
    {
        try
        {
            var systemStatus = await SystemService.GetSystemStatusAsync(State.AppId);
            if (systemStatus != null)
            {
                State.SystemStatus = systemStatus;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error refreshing system status");
            Snackbar.Add($"Unable to refresh system status. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

}
