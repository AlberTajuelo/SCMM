@page "/skin/{ItemId}"
@page "/item/{ItemId}"
@using SCMM.Web.Data.Models.Domain.MarketItems
@using SCMM.Web.Data.Models
@inject ILogger<MarketListingDetailsPage> Logger
@inject HttpClient Http

@if (Item == null)
{
    <Loading Message="Loading market item..." />
}
else
{
    <Title Value="@Item.Name" />
    <Grid Container Spacing="@Spacing.Four">
        <Grid Item ExtraSmall="@GridSize.One">
            <img src="@Item.IconUrl" style="width:100%" />
        </Grid>
        <Grid Item ExtraSmall="@GridSize.Eleven">
            <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.H5" Style="@GetItemStyles(Item)" GutterBottom="true">
                @Item.Name
            </Skclusive.Material.Typography.Typography>
            <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Paragraph="true">
                @foreach (var tag in Item.Tags)
                {
                    <div class="Chip-Root">
                        <span class="Chip-Label">
                            @tag.Value
                        </span>
                    </div>
                }
            </Skclusive.Material.Typography.Typography>
            <Skclusive.Material.Typography.Typography Paragraph="true">
                <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body1" NoWrap>
                    <i class="fas fa-fw fa-user"></i>
                    @Item.Subscriptions.Value.ToQuantityString()
                </Skclusive.Material.Typography.Typography>
                <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body1" NoWrap>
                    <i class="fas fa-fw fa-eye"></i>
                    @Item.Views.Value.ToQuantityString()
                </Skclusive.Material.Typography.Typography>
                <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body1" NoWrap>
                    <i class="fas fa-fw fa-heart"></i>
                    @Item.Favourited.Value.ToQuantityString()
                </Skclusive.Material.Typography.Typography>
            </Skclusive.Material.Typography.Typography>
        </Grid>
        <Grid Item ExtraSmall="@GridSize.Three">
            <Paper Class="Chart-Root">
                Sell orders list
            </Paper>
        </Grid>
        <Grid Item ExtraSmall="@GridSize.Three">
            <Paper Class="Chart-Root">
                Buy orders list
            </Paper>
        </Grid>
        <Grid Item ExtraSmall="@GridSize.Six">
            <Paper Class="Chart-Root">
                Buy/Sell orders chart
            </Paper>
        </Grid>
        <Grid Item ExtraSmall="@GridSize.Twelve">
            <Paper Class="Chart-Root">
                Sales history chart
            </Paper>
        </Grid>
    </Grid>
}

@code {

    [Parameter]
    public string ItemId { get; set; }

    private MarketItemDetailDTO Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Item = await Http.GetFromJsonAsync<MarketItemDetailDTO>($"api/market/{ItemId}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading market item details for '{Item.Id}')");
        }
    }

    private string GetItemStyles(MarketItemDetailDTO item)
    {
        return $"color: {item.ForegroundColour}";
    }

}
