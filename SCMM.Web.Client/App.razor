@inject ILogger<App> Logger
@inject ISnackbar Snackbar
@inject UIState UIState
@inject HttpClient Http

<AppProviders />
<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        @if (State != null)
        {
            <CascadingValue Value="@routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(AppLayout)" />
            </CascadingValue>
        }
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(AppLayout)">
            <Alert Title="Not Found (404)" SubTitle="Looks like that doesn't exist anymore, check that the URL is correct, then try again." />
        </LayoutView>
    </NotFound>
</Router>

@code {

    private UIState State { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!(await UIState.ReadFromStorageAsync()))
            {
                await UIState.TryGuessLocalityAsync();
                await UIState.WriteToStorageAsync();
            }
            await UIState.RefreshAsync(Http);

            State = UIState;
            State.Changed += (s, e) => StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialise application state");
            Snackbar.Add($"Unable to load application state. {ex.Message}", MudBlazor.Severity.Error);
        }
    }

}
