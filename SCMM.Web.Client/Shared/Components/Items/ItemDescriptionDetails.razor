@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Steam.Data.Models.Attributes
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Statistic
@using Syncfusion.Blazor.Charts
@using System.Reflection
@inject ILogger<ItemDescriptionDetails> Logger
@inject IDialogService Dialogs
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<MudGrid UserAttributes="@AdditionalAttributes">

    <MudItem xs="12" lg="4" xl="3">
        <MudGrid>

            <MudItem xs="12" sm="6" lg="12">
                <MudPaper Outlined="true" Class="full-width full-height" Style="@($"background-color: {Item.BackgroundColour}")">
                    <div class="d-flex flex-column full-height item-preview-container">
                        @if (Item.Previews.Any())
                        {
                            <MudCarousel ShowArrows="true" ShowDelimiters="false" AutoCycle="true" TData="object" Class="full-width full-height" Style="min-height: 25rem;">
                                <MudCarouselItem Transition="Transition.Fade" Class="d-flex flex-grow-1 align-center justify-center">
                                    <div class="d-flex flex-grow-1 align-center justify-center">
                                        <img src="@Item.IconLargeUrl" class="@($"{GetGlowClass()} icon full-width pa-8")" style="@GetGlowStyles()" />
                                    </div>
                                </MudCarouselItem>
                                @foreach (var preview in Item.Previews.Where(x => x.Value == SteamMediaType.Image))
                                {
                                    <MudCarouselItem Transition="Transition.Fade" Class="d-flex flex-grow-1 align-center justify-center">
                                        <img src="@preview.Key" class="full-height" />
                                    </MudCarouselItem>
                                }
                            </MudCarousel>
                        }
                        else
                        {
                            <div class="d-flex flex-grow-1 align-center justify-center">
                                <img src="@Item.IconLargeUrl" class="@($"{GetGlowClass()} icon full-width pa-8")" style="@GetGlowStyles()" />
                            </div>
                        }
                        @if (Item.WorkshopFileId != null)
                        {
                            <div class="d-flex align-center justify-center full-width item-preview-controls">
                                <MudButtonGroup Color="Color.Default" Size="Size.Medium" Variant="Variant.Filled" DisableElevation="true">
                                    <MudTooltip Text="View the workshop page">
                                        <MudButton OnClick="@ViewItemWorkshopPage" Disabled="Item.WorkshopFileId == null">
                                            <i class="fas fa-fw fa-tools mr-1"></i>
                                            <span class="no-wrap">Workshop</span>
                                        </MudButton>
								    </MudTooltip>
                                    <MudTooltip Text="View an interactive 3D render of this item">
                                        <MudButton OnClick="@ShowItemModelDialog" Disabled="String.IsNullOrEmpty(Item.WorkshopFileUrl)">
                                            <i class="fab fa-fw fa-unity mr-1"></i>
                                            <span class="no-wrap">3D</span>
                                        </MudButton>
								    </MudTooltip>
                                    <MudTooltip Text="Download the workshop file for this item">
                                        <MudButton OnClick="@DownloadItemWorkshopFile" Disabled="String.IsNullOrEmpty(Item.WorkshopFileUrl)">
                                            <i class="fas fa-fw fa-download"></i>
                                            <span class="no-wrap">&nbsp;</span>
                                        </MudButton>
								    </MudTooltip>
                                </MudButtonGroup>
                            </div>
                        }
                    </div>
				</MudPaper>
			</MudItem>

            <MudItem xs="12" sm="6" lg="12">
                <MudPaper Outlined="true" Class="pa-4 full-height">

                    <div>
                        <MudText Typo="MudBlazor.Typo.h6" Class="mt-n1" Style="@($"color: {Item.ForegroundColour}")">@Item.Name</MudText>
                        @if (!String.IsNullOrEmpty(Item.ItemType))
                        {
                            <MudText Typo="MudBlazor.Typo.subtitle1" Class="mt-n2" Color="MudBlazor.Color.Secondary">@Item.ItemType</MudText>
                        }
                    </div>
                    
                    @if (!String.IsNullOrEmpty(Item.Description))
                    {
                        <div class="mt-3">
                            <MudText Typo="MudBlazor.Typo.body2" GutterBottom>@Item.Description</MudText>
                        </div>
                    }
                    @if (Item.Notes != null)
                    {
                        @foreach (var note in Item.Notes)
                        {
                            <div class="mt-3">
                                <MudText Typo="MudBlazor.Typo.body2" GutterBottom>
                                    <MarkdownView Content="@note" />
								</MudText>
                            </div>
                        }
                    }
             
                    <div class="mt-3">
                        
                        @if (Item.Stores?.Any() == true || Item.TimeAccepted != null)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-shopping-cart mud-secondary-text"></i>
                                <span>
                                    @if(Item.Stores?.Count() > 1)
                                    {
                                        <span class="mud-secondary-text">First released on </span>
                                    }
                                    else
                                    {
                                        <span class="mud-secondary-text">Released on </span>
                                    }
                                    @if(Item.Stores?.Any() == true)
                                    {
                                        <MudLink @onclick="@(() => ViewStorePage(Item.Stores.MinBy(x => x.Date).Id))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@((Item.Stores.MinBy(x => x.Date).Date ?? Item.TimeAccepted)?.ToString("d"))</MudLink>
                                    }
                                    else
                                    {
                                        <span>@Item.TimeAccepted.Value.ToString("d")</span>
                                    }
                                    @if (Item.StorePrice > 0)
                                    {
                                        <span class="mud-secondary-text"> for </span>
                                        <span> @State.Currency.ToPriceString(Item.StorePrice.Value)</span>
                                    }
                                </span>
                            </MudText>
                        }
                        @* TODO: Market rank
                        @if (Item.MarketRankTotal > 0)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-balance-scale-left mud-secondary-text"></i>
                                <span>
                                    <MudLink @onclick="@(() => ShowItemTypeDialog())" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@Item.MarketRankIndex cheaper @Item.ItemType.Pluralise(Item.MarketRankTotal)</MudLink>
                                    <span class="mud-secondary-text"> in the marketplace (@Item.MarketRankTotal total).</span>
                                </span>
                            </MudText>
                        }
                        @if (Item.SalesMinimum > 0)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-shopping-cart mud-secondary-text"></i>
                                <span>
                                    @if (Item.SalesMaximum == null)
                                    {
                                        <span class="mud-secondary-text">More than </span>
                                        <span>@Item.SalesMinimum.Value.ToQuantityString() sold</span>
                                    }
                                    else if (Item.SalesMinimum == Item.SalesMaximum)
                                    {
                                        <span>@Item.SalesMinimum.Value.ToQuantityString() sold</span>
                                    }
                                    else
                                    {
                                        <span class="mud-secondary-text">Between </span>
                                        <span>@Item.SalesMinimum.Value.ToQuantityString() - @Item.SalesMaximum.Value.ToQuantityString() sold</span>
                                    }
                                </span>
                                <span>
                                    <i class="fas fa-fw fa-question-circle" title="Steam doesn't disclose exact sales figures, this is just an estimate. See the store analytics & insights for more details." />
                                </span>
                            </MudText>
                        }
                        *@

                        @if (!String.IsNullOrEmpty(Item.ItemCollection))
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-paint-roller mud-secondary-text"></i>
                                <span>
                                    <span class="mud-secondary-text">Part of the </span>
                                    <MudLink @onclick="@(() => ShowItemCollectionDialog())" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@Item.ItemCollection</MudLink>
                                    <span class="mud-secondary-text"> collection</span>
                                </span>
                            </MudText>
                        }
                        @if (Item.CraftingComponents?.Any() == true)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-hammer mud-secondary-text"></i>
                                <span>
                                    <span class="mud-secondary-text">Craft with </span>
                                    @foreach (var component in Item.CraftingComponents)
                                    {
                                        <span>@(component.Value)x @component.Key</span>
                                        @if (Item.CraftingComponents.Last().Key != component.Key)
                                        {
                                            <span class="mud-secondary-text">, </span>
                                        }
                                    }
                                </span>
                            </MudText>
                        }
                        @if (Item.BreaksIntoComponents?.Any() == true)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-hammer mud-secondary-text"></i>
                                <span>
                                    <span class="mud-secondary-text">Breaks down into </span>
                                    @foreach (var component in Item.BreaksIntoComponents)
                                    {
                                        <span>@(component.Value)x @component.Key</span>
                                        @if (Item.BreaksIntoComponents.Last().Key != component.Key)
                                        {
                                            <span class="mud-secondary-text">, </span>
                                        }
                                    }
                                </span>
                            </MudText>
                        }
                        @if (Item.CurrentSubscriptions > 0)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-user mud-secondary-text"></i>
                                <span>
                                    <span>@Item.CurrentSubscriptions.Value.ToQuantityString() subscriptions</span>
                                </span>
                            </MudText>
                        }
                        @if (Item.VotesUp != null && Item.VotesDown != null)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-thumbs-up mud-secondary-text"></i>
                                <span>
                                    <span>@(((int?)Item.VotesUp ?? 0).ToQuantityString()) votes</span>
                                </span>
                                @if (Item.VotesUp > 0 && Item.VotesDown > 0)
                                {
                                    <span class="mud-secondary-text"> (@(((int)Item.VotesUp.Value).ToPercentageString((int)Item.VotesUp.Value + (int)Item.VotesDown.Value)) approval rating) </span>
                                }
                            </MudText>
                        }
                        @if (Item.CurrentFavourited > 0)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-heart mud-secondary-text"></i>
                                <span>
                                    <span>@Item.CurrentFavourited.Value.ToQuantityString() favourited</span>
                                </span>
                            </MudText>
                        }
                        @if (Item.Views > 0)
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                <i class="fas fa-fw fa-eye mud-secondary-text"></i>
                                <span>
                                    <span>@Item.Views.Value.ToQuantityString() workshop views</span>
                                </span>
                            </MudText>
                        }

                    </div>

                    <div class="mt-3">
                        @if (Item.IsBanned == true)
                        {
                            <MudTooltip Text="@($"This item has been trade and market banned due to {Item.BanReason.FirstCharToLower()}")">
                                <MudChip Size="MudBlazor.Size.Small" Text="Banned" Icon="fas fa-fw fa-ban mr-2" Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Warning" Class="mud-chip-outlined" />
                            </MudTooltip>
                        }
                        @if (Item.IsPermanent == true)
                        {
                            <MudTooltip Text="@($"This item will be permanently bound to your Steam account after purchase and it cannot be traded or sold")">
                                <MudChip Size="MudBlazor.Size.Small" Text="Permanent" Icon="fas fa-fw fa-thumbtack mr-2" Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                            </MudTooltip>
                        }
                        <MudTooltip>
                            <ChildContent>
                                <MudChip Size="MudBlazor.Size.Small" Text="@(Item.IsTradable ? "Tradable" : "Not Tradable")" Disabled="@(!Item.IsTradable)" Class="mud-chip-outlined"
                                         Icon="@(Item.IsTradable ? "fas fa-fw fa-exchange-alt mr-2" : "fas fa-fw fa-times")" 
                                         Variant="@(Item.IsTradable ? MudBlazor.Variant.Text : MudBlazor.Variant.Outlined)" 
                                         Color="@(Item.IsTradable ? MudBlazor.Color.Default : MudBlazor.Color.Default)" />
                            </ChildContent>
                            <TooltipContent>
                                @if (Item.IsTradable)
                                {
                                    @if (Item.TradableRestrictionDays > 0)
                                    {
                                        <span>This item <strong>can</strong> be traded <strong>@(Item.TradableRestrictionDays)</strong> day(s) after purchase</span>
                                    }
                                    else
                                    {
                                        <span>This item <strong>can</strong> be traded immediately after purchase</span>
                                    }
                                }
                                else
                                {
                                    <span>This item <strong>cannot</strong> be traded once purchased</span>
                                }
                            </TooltipContent>
                        </MudTooltip>
                        <MudTooltip>
                            <ChildContent>
                                <MudChip Size="MudBlazor.Size.Small" Text="@(Item.IsMarketable ? "Marketable" : "Not Marketable")" Disabled="@(!Item.IsMarketable)" Class="mud-chip-outlined"
                                         Icon="@(Item.IsMarketable ? "fas fa-fw fa-balance-scale-left mr-2" : ((Item.IsAvailableOnStore && Item.MarketableRestrictionDays > 0) ? "fas fa-fw fa-question" : "fas fa-fw fa-times"))" 
                                         Variant="@(Item.IsMarketable ? MudBlazor.Variant.Text : MudBlazor.Variant.Outlined)" 
                                         Color="@(Item.IsMarketable ? MudBlazor.Color.Default : MudBlazor.Color.Default)" />
                            </ChildContent>
                            <TooltipContent>
                                @if (Item.IsMarketable)
                                {
                                    @if (Item.MarketableRestrictionDays > 0)
                                    {
                                        <span>This item <strong>can</strong> be listed on the Steam Community Market <strong>@(Item.MarketableRestrictionDays)</strong> day(s) after purchase</span>
                                    }
                                    else
                                    {
                                        <span>This item <strong>can</strong> be listed on the Steam Community Market immediately after purchase</span>
                                    }
                                }
                                else
                                {
                                    @if (Item.IsAvailableOnStore && Item.MarketableRestrictionDays > 0)
                                    {
                                        <span>This item <strong>cannot</strong> currently be listed on the Steam Community Market once purchased, but <strong>probably</strong> will be marketable when the next store is released.</span>
                                        <span>This is a common Steam issue with some store items and it generally fixes itself when the store changes. If you have ever noticed that some items are available on the market early but others are not, this is the reason why.</span>
                                    }
                                    else
                                    {
                                        <span>This item <strong>cannot</strong> be listed on the Steam Community Market once purchased</span>
                                    }
                                }
                            </TooltipContent>
                        </MudTooltip>
                        @if (Item.HasGlow == true)
                        {
                            <MudTooltip>
                                <ChildContent>
                                    <MudChip Size="MudBlazor.Size.Small" Text="@($"Glow {(Item.GlowRatio > 0.01m ? "(" + Math.Round((Item.GlowRatio ?? 0) * 100, 0) + "%)" : String.Empty).Trim()}")" Icon="fas fa-fw fa-moon mr-2" 
                                             Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                                </ChildContent>
                                <TooltipContent>
                                    @if (Item.GlowRatio > 0.01m)
                                    {
                                        <span>@Math.Round((Item.GlowRatio ?? 0) * 100, 0)% of this item glows in the dark, making it much easier to see at night</span>
                                    }
                                    else 
                                    {
                                        <span>Some parts of this item glow in the dark, making it much easier to see at night</span>
                                    }
                                </TooltipContent>
                            </MudTooltip>
                        }
                        @if (Item.HasGlowSights == true)
                        {
                            <MudTooltip Text="The iron sights of this weapon glow in the dark, making it much easier to aim at night">
                                <MudChip Size="MudBlazor.Size.Small" Text="Glow Sight" Icon="fas fa-fw fa-crosshairs mr-2" 
                                         Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                            </MudTooltip>
                        }
                        @if (Item.HasCutout == true)
                        {
                            <MudTooltip>
                                <ChildContent>
                                    <MudChip Size="MudBlazor.Size.Small" Text="@($"Cutout {(Item.CutoutRatio > 0.01m ? "(" + Math.Round((Item.CutoutRatio ?? 0) * 100, 0) + "%)" : String.Empty).Trim()}")" Icon="fas fa-fw fa-cut mr-2" 
                                             Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                                </ChildContent>
                                <TooltipContent>
                                    @if (Item.CutoutRatio > 0.01m)
                                    {
                                        <span>@Math.Round((Item.CutoutRatio ?? 0) * 100, 0)% of this items material has been removed. The shape may appeared altered when compared against the default item</span>
                                    }
                                    else 
                                    {
                                        <span>Parts of this items material has been removed. The shape may appeared altered when compared against the default item</span>
                                    }
                                </TooltipContent>
                            </MudTooltip>
                        }
                        @if (Item.IsCraftingComponent == true)
                        {
                            <MudTooltip Text="This item can be used to craft other skin related items from the in-game 'workshop' menu">
                                <MudChip Size="MudBlazor.Size.Small" Text="Resource" Icon="fas fa-fw fa-puzzle-piece mr-2" 
                                         Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                            </MudTooltip>
                        }
                        @if (Item.IsCraftable == true)
                        {
                            <MudTooltip Text="This item can be crafted from resources using the in-game 'workshop' menu">
                                <MudChip Size="MudBlazor.Size.Small" Text="Skin Container" Icon="fas fa-fw fa-box mr-2" 
                                         Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                            </MudTooltip>
                        }
                        @if (Item.IsSpecialDrop == true)
                        {
                            <MudTooltip Text="This item is a limited-time drop, generally done as part of special event (e.g. charity or promotion)">
                                <MudChip Size="MudBlazor.Size.Small" Text="Special Drop" Icon="fas fa-fw fa-crown mr-2" 
                                         Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                            </MudTooltip>
                        }
                        @if (Item.IsTwitchDrop == true)
                        {
                            <MudTooltip Text="This item is a limited-time drop, obtaining from watching streamers on Twitch.tv">
                                <MudChip Size="MudBlazor.Size.Small" Text="Twitch Drop" Icon="fab fa-fw fa-twitch mr-2" 
                                         Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                            </MudTooltip>
                        }
                        @if (Item.HasReturnedToStoreBefore == true)
                        {
                            <MudTooltip Text="This item has returned from a previous store release">
                                <MudChip Size="MudBlazor.Size.Small" Text="Returning Item" Icon="fas fa-fw fa-redo mr-2" 
                                         Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                            </MudTooltip>
                        }
                    </div>
                    
				</MudPaper>
			</MudItem>
            
            <MudItem xs="12">
                @if (Item.Tags.Any(x => x.Key.StartsWith(SCMM.Steam.Data.Models.Constants.AssetTagAiCaption)))
                {
                    <div class="quote-box text-centered pa-2 mb-2">
                        @foreach(var tag in Item.Tags.Where(x => x.Key.StartsWith(SCMM.Steam.Data.Models.Constants.AssetTagAiCaption)).Take(1))
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Dark">
                                <span>Looks like a</span>
                                <span>@tag.Value.FirstCharToLower().TrimStart('a', ' ')</span>
                            </MudText>
                        }
				    </div>
                }
                <MudPaper Outlined="true" Class="py-2 px-3">
                    <div class="d-flex flex-row align-center">
                        <MudIcon Icon="fas fa-robot" Size="MudBlazor.Size.Large" Class="my-1" />
                        <div class="ml-5">
                            @if (!String.IsNullOrEmpty(Item.DominantColour))
                            {
                                <MudChip Size="MudBlazor.Size.Small" Text="@Item.DominantColour" Variant="MudBlazor.Variant.Text" Icon="fas fa-fw fa-tint" 
                                            Class="mud-chip-outlined" Style="@($"background-color: {Item.DominantColour}; color: white")" />
                            }
                            @foreach(var tag in Item.Tags.Where(x => x.Key.StartsWith(SCMM.Steam.Data.Models.Constants.AssetTagAiTag)))
                            {
                                <MudChip Size="MudBlazor.Size.Small" Text="@tag.Value" Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                            }
                            @foreach(var tag in Item.Tags.Where(x => !x.Key.StartsWith(SCMM.Steam.Data.Models.Constants.AssetTagAi) && !x.Key.StartsWith(SCMM.Steam.Data.Models.Constants.SteamAssetTagWorkshop)))
                            {
                                <MudChip Size="MudBlazor.Size.Small" Text="@tag.Value" Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                            }
						</div>
                    </div>
				</MudPaper>
			</MudItem>
            
            @if (Item.CreatorId != null && !String.IsNullOrEmpty(Item.CreatorName))
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Class=" full-height py-2 px-3">
                        <div class="d-flex flex-row">
                            <MudAvatar Image="@Item.CreatorAvatarUrl" Size="MudBlazor.Size.Medium" Class="my-1" />
                            <div class="ml-3">
                                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default">@Item.CreatorName</MudText>
                                <MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary">
                                    @if (Item.CreatorId != Item.AppId)
                                    {
                                        <span>• </span>
                                        <MudLink Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary" @onclick="@(() => ViewCreatorWorkshopPage())">View Steam Workshop</MudLink>
                                        <br />
                                    }
                                    <span>• </span>
                                    <MudLink Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary" @onclick="@(() => ShowCreatorItemsDialog())">View more items from this creator</MudLink>
								</MudText>
						    </div>
                        </div>
				    </MudPaper>
			    </MudItem>
            }
            
            @if (Item.Stores?.Count() > 1)
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Class="full-height">
                        <div class="d-flex flex-column align-stretch">
                            @foreach (var store in Item.Stores.Where(x => x.Date != null).OrderByDescending(x => x.Date))
                            {
                                <MudTooltip Text="@($"View the store from {store.Date.Value.ToString("d")}")">
                                    <div @onclick="@(() => ViewStorePage(store.Id))" class="d-flex flex-row align-center justify-start full-width clickable hover-darken px-4 py-2">
                                        <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Secondary">
                                            <i class="fa fa-fw fa-shopping-cart mr-4" />
                                        </MudText>
                                        <div class="d-flex flex-column">
                                            <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default">
                                                <span>@store.Date.Value.ToString("d")</span>
                                            </MudText>
                                            @if(!String.IsNullOrEmpty(store.Name))
                                            {
                                                <MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary">
                                                    <span class="mud-secondary-text">@store.Name</span>
                                                </MudText>
                                            }
                                        </div>
                                        <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default" Class="flex-grow-1 text-right">
                                            @State.Currency.ToPriceString(store.Price ?? 0)
								        </MudText>
						            </div>
                                    <MudDivider FlexItem="true" />
								</MudTooltip>
                            }
                        </div>
				    </MudPaper>
			    </MudItem>
            }
            
            <MudItem xs="12">
                <MudPaper Outlined="true" Class="pa-4">
                    <MudTimeline>
                        @foreach (var timelineEvent in GetTimelineEvents().OrderByDescending(x => x.Timestamp))
                        {
                            <MudTimelineItem Color="@timelineEvent.Color" TimelineAlign="TimelineAlign.End" Size="Size.Medium" Elevation="25">
                                <ItemOpposite>
                                    <MudText Typo="Typo.body1" Color="@timelineEvent.Color">@timelineEvent.Timestamp.ToString("d")</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">@((DateTimeOffset.Now - timelineEvent.Timestamp).ToDurationString(maxGranularity: 1, suffix: "ago"))</MudText>
                                </ItemOpposite>
                                <ItemDot>
                                    <i class="@timelineEvent.Icon" />
                                </ItemDot>
                                <ItemContent>
                                    <MudText Typo="Typo.body1" Color="@timelineEvent.Color">@timelineEvent.Title</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">@timelineEvent.Subtitle</MudText>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                    </MudTimeline>
		        </MudPaper>
            </MudItem>
            
            @* TODO: Technical: app id, class id, workshop id, name id, store id... *@
            @* TODO: Time created/updated/accepted... *@
            @* TODO: Time refreshed... *@

            @* TODO: "Request Update" button *@
            
        </MudGrid>
    </MudItem>
    
    <MudItem xs="12" lg="8" xl="9">
        <MudGrid>
             
            @if (Item.IsBanned)
            {
                <MudItem xs="12">
                    <Alert Variant="MudBlazor.Variant.Text" Severity="MudBlazor.Severity.Warning" Icon="fas fa-fw fa-ban mt-1" 
                           Title="@($"This item is trade and market banned due to {Item.BanReason.FirstCharToLower()}.")" 
                           Subtitle="The only way you can acquire this item is to 'buy' a Steam account that already contained the item before it was banned. Buying Steam accounts is against the Steam ToS." />
                </MudItem>
            }
            
            @if(Item.BuyPrices?.Any() == true && !Item.IsBanned)
            {   
                <MudItem xs="12">
                    <MudPaper Outlined="true">
                        <div class="d-flex flex-row align-stretch justify-center flex-wrap">
                            @foreach (var price in Item.BuyPrices.Where(x => x.MarketType == MarketType.SteamStore || (x.IsAvailable && (Item.MarketSellOrderLowestPrice == null || (x.Price + (State.Profile.ItemIncludeMarketFees ? x.Fee : 0)) <= Item.MarketSellOrderLowestPrice))).OrderBy(x => (x.Price + (State.Profile.ItemIncludeMarketFees ? x.Fee : 0))))
                            {
                                <MudTooltip Text="@(price.IsAvailable ? $"Buy from {price.MarketType.GetDisplayName()}" : $"Currently unavailable from {price.MarketType.GetDisplayName()}")">
                                    <div @onclick="@(() => BuyItem(price))" class="@($"py-4 px-6 {(price.IsAvailable ? "hover-darken clickable" : null)}")">
                                        <MudText Typo="MudBlazor.Typo.h6" Color="price.IsAvailable ? MudBlazor.Color.Inherit : MudBlazor.Color.Secondary" Class="d-flex align-center">
                                            <img src="@($"/images/market/{price.MarketType.ToString().ToLower()}.png")" alt="@price.MarketType.GetDisplayName()" title="@price.MarketType.GetDisplayName()" style="width:1.3em; height:1.3em" />
                                            @if ((price.Price + (State.Profile.ItemIncludeMarketFees ? price.Fee : 0)) > 0)
                                            {
                                                <span class="pl-2">@State.Currency.ToPriceString((price.Price + (State.Profile.ItemIncludeMarketFees ? price.Fee : 0)))</span>
                                                @if (State.Profile.ItemIncludeMarketFees && price.Fee != 0)
                                                {
                                                    <MudTooltip>
                                                        <TooltipContent>
                                                            @if (price.Fee > 0)
                                                            {
                                                                <span>Price includes @State.Currency.ToPriceString(price.Fee) in estimated fees charged by @price.MarketType.GetDisplayName() payment providers</span>
                                                            }
                                                            else
                                                            {
                                                                <span>Price includes @State.Currency.ToPriceString(price.Fee) in estimate discounts gained by purchasing @price.MarketType.GetDisplayName() balance</span>
                                                            }
                                                        </TooltipContent>
                                                        <ChildContent>
                                                            <i class="fa fa-fw fa-comment-dollar ml-1"></i>
                                                        </ChildContent>
                                                    </MudTooltip>
                                                }
                                            }
                                            else 
                                            {
                                                <span class="pl-2">Unavailable</span>
                                            }
                                            @if ((price.Price + (State.Profile.ItemIncludeMarketFees ? price.Fee : 0)) > 0 && price.MarketType != MarketType.SteamStore)
                                            {
                                                @if ((price.Price + (State.Profile.ItemIncludeMarketFees ? price.Fee : 0)) == Item.BuyPrices.Where(x => x.IsAvailable).Min(x => (x.Price + (State.Profile.ItemIncludeMarketFees ? x.Fee : 0))))
                                                {
                                                    <MudChip Size="MudBlazor.Size.Small" Text="Best Deal" Color="MudBlazor.Color.Success" Variant="MudBlazor.Variant.Filled" Class="ma-0 ml-2" />
                                                }
                                            }
									    </MudText>
                                        <MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary">
                                            @if (price.Type.HasFlag(PriceTypes.Cash))
                                            {
                                                <i class="fa fa-fw fa-credit-card mr-1" title="Cash or credit"></i>
                                            }
                                            @if (price.Type.HasFlag(PriceTypes.Trade))
                                            {
                                                <i class="fa fa-fw fa-exchange-alt mr-1" title="Trade or exchange"></i>
                                            }
                                            <span>@price.MarketType.GetDisplayName()</span>
                                            @if (price.MarketType == MarketType.SteamStore && Item.Stores?.Any() == true)
                                            {
                                                <span> from @(Item.Stores.Max(x => x.Date)?.ToString("d") ?? Item.Stores.MaxBy(x => x.Date)?.Name)</span>
                                            }
                                            else if (price.MarketType != MarketType.SteamStore && price.Supply > 0)
                                            {
                                                <span> (@price.Supply.Value.ToQuantityString())</span>
                                            }
                                        </MudText>
                                    </div>
								</MudTooltip>
                            }
                        </div>
				    </MudPaper>
                </MudItem>
            }
 
            @if (Item.IsAvailableOnMarket && !Item.IsBanned && MarketItemDistribution != null && MarketItemDistributionChartData?.Any() == true)
            {
                <MudItem xs="12" xl="6">
                    <MudPaper Outlined="true" Class="text-centered">
                        <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="pa-2 text-centered">
                            <span>Item distribution</span>
                        </MudText>
                        <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="px-4 text-centered">
                            @if (MarketItemDistribution.HasUnknownItems)
                            {
                                <span>There are an estimated <strong>@((MarketItemDistribution.EstimatedItemCount ?? 0).ToQuantityString())</strong> (or more) copies of this item in existance, of which we can only confirm that <strong>@(MarketItemDistribution.KnownItemCount.ToQuantityString())</strong> currently exist. Our database is not comprehensive and there are always more copies that we don't know about.</span>
                            }
                            else
                            {
                                <span>There are <strong>@(MarketItemDistribution.KnownItemCount.ToQuantityString())</strong> (or more) confirmed copies of this item currently in existance. Our database is not comprehensive and there are always more copies that we don't know about.</span>
                            }
                        </MudText>
                        <SfAccumulationChart ID="MarketItemDistribution" Theme="Syncfusion.Blazor.Theme.MaterialDark" EnableAnimation="false" Background="transparent" Width="100%" Height="100%" EnableSmartLabels="true">
                            <AccumulationChartSeriesCollection>
                                <AccumulationChartSeries DataSource="@MarketItemDistributionChartData" XName="Name" YName="Value" PointColorMapping="Fill" Radius="80%" StartAngle="315" EndAngle="315" InnerRadius="0%">
                                    <AccumulationChartAnimation Enable="false" />
                                    <AccumulationDataLabelSettings Name="Label" Visible="true" Position="AccumulationLabelPosition.Outside">
                                        <AccumulationChartDataLabelFont Color="#eeeeee" />
                                        <AccumulationChartConnector Type="ConnectorType.Curve" />
                                    </AccumulationDataLabelSettings>
                                </AccumulationChartSeries>
                            </AccumulationChartSeriesCollection>
                            <AccumulationChartAnnotations>
                                @if (MarketItemDistribution.UnknownItemCount > 0 && MarketItemDistribution.HasUnknownItems)
                                {
                                    <AccumulationChartAnnotation X="Estimated Unknown Copies" Y="@MarketItemDistribution.UnknownItemCount.Value.ToString()" CoordinateUnits="Units.Point" Region="Regions.Series">
                                        <ContentTemplate>
                                            <i class="fa fa-fw fa-question text-outlined" style="@($"font-size: 5em; transform: scale({Math.Min(Math.Round((MarketItemDistribution.UnknownItemCount.Value / (decimal)MarketItemDistribution.TotalItemCount) * 3, 2), 1)})")" />
                                        </ContentTemplate>
                                    </AccumulationChartAnnotation>
                                }
                                @if (MarketItemDistribution.KnownInventoryItemCount > 0)
                                {
                                    <AccumulationChartAnnotation X="Player Inventories" Y="@MarketItemDistribution.KnownInventoryItemCount.ToString()" CoordinateUnits="Units.Point" Region="Regions.Series">
                                        <ContentTemplate>
                                            <i class="fa fa-fw fa-users text-outlined" style="@($"font-size: 5em; transform: scale({Math.Min(Math.Round((MarketItemDistribution.KnownInventoryItemCount / (decimal)MarketItemDistribution.TotalItemCount) * 3, 2), 1)})")" />
                                        </ContentTemplate>
                                    </AccumulationChartAnnotation>
                                }
                            </AccumulationChartAnnotations>
                            <AccumulationChartLegendSettings Visible="false" />
                            <AccumulationChartTooltipSettings Enable="true" />
                        </SfAccumulationChart>
                    </MudPaper>
		        </MudItem>
            }

            @if(Item.IsAvailableOnMarket && !Item.IsBanned)
            {
                <MudItem xs="12" sm="6" xl="3">
                    <MudPaper Outlined="true" Class="d-flex flex-column text-centered full-height">
                        <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="pa-2">
                            @if (Item.MarketSellOrderCount > 0) 
                            {
                                <span>@((Item.MarketSellOrderCount ?? 0).ToQuantityString())</span>
                                <span class="mud-secondary-text"> for sale </span>
                                @if (Item.MarketSellOrderLowestPrice > 0)
                                {
                                    <span class="mud-secondary-text"> starting at </span>
                                    <span>@State.Currency.ToPriceString(Item.MarketSellOrderLowestPrice.Value)</span>
                                }
                            }
                            else
                            {
                                <span class="mud-secondary-text">There are no active listings for this item</span>
                            } 
                        </MudText>
                        <MudDivider />
                        <MudSimpleTable Dense="true" FixedHeader="true" Style="height:25vh;" Class="flex-grow-1">
                            <thead>
                                <tr>
                                    <th class="no-wrap text-centered">Price</th>
                                    <th class="no-wrap text-centered">Quantity</th>
                                </tr>
                            </thead>
                            <tbody>
                                <Virtualize ItemsProvider="LoadItemSellOrders" Context="item">
                                    <ItemContent>
                                        <tr class="hover-darken">
                                            <td class="text-centered">
                                                <MudText Typo="Typo.body2" Color="@(item.Quantity >= 50 ? Color.Error : item.Quantity >= 25 ? Color.Warning : Color.Secondary)" Class="no-wrap">
                                                    <span>@State.Currency.ToPriceString(item.Price)</span>
                                                </MudText>
                                            </td>
                                            <td class="text-centered">
                                                <MudText Typo="Typo.body2" Color="@(item.Quantity >= 50 ? Color.Error : item.Quantity >= 25 ? Color.Warning : Color.Secondary)" Class="no-wrap">
                                                    @if (item.Quantity >= 100)
                                                    {
                                                        <MudTooltip Text="Severe mental disability detected; High quantity 'sell wall' listings like this often cause the price to drop as people to start undercut eachother">
                                                            <i class="fas fa-fw fa-wheelchair mr-1" />
                                                        </MudTooltip>
                                                    }
                                                    else if (item.Quantity >= 25)
                                                    {
                                                        <MudTooltip Text="High quantity 'sell wall' listings like this often cause the price to drop as people to start undercut eachother">
                                                            <i class="fas fa-fw fa-exclamation-triangle mr-1" />
                                                        </MudTooltip>
                                                    }
                                                    <span>@item.Quantity.ToQuantityString()</span>
                                                </MudText>
                                            </td>
                                        </tr>
                                    </ItemContent>
                                    <Placeholder>
                                        <tr>
                                            <td class="text-centered">—</td>
                                            <td class="text-centered">—</td>
                                        </tr>
                                    </Placeholder>
                                </Virtualize>
                            </tbody>
                        </MudSimpleTable>
				    </MudPaper>
                </MudItem>
            }
            
            @if(Item.IsAvailableOnMarket && !Item.IsBanned)
            {
                <MudItem xs="12" sm="6" xl="3">
                    <MudPaper Outlined="true" Class="d-flex flex-column text-centered full-height">
                        <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="pa-2">
                            @if (Item.MarketBuyOrderCount > 0) 
                            {
                                <span>@((Item.MarketBuyOrderCount ?? 0).ToQuantityString())</span>
                                <span class="mud-secondary-text"> requests to buy </span>
                                @if (Item.MarketBuyOrderHighestPrice > 0)
                                {
                                    <span class="mud-secondary-text"> at </span>
                                    <span>@State.Currency.ToPriceString(Item.MarketBuyOrderHighestPrice.Value)</span>
                                    <span class="mud-secondary-text"> or lower </span>
                                }
                            }
                            else
                            {
                                <span class="mud-secondary-text">There are no active buy requests for this item</span>
                            }
                        </MudText>
                        <MudDivider />
                        <MudSimpleTable Dense="true" FixedHeader="true" Style="height:25vh;" Class="flex-grow-1">
                            <thead>
                                <tr>
                                    <th class="no-wrap text-centered">Price</th>
                                    <th class="no-wrap text-centered">Quantity</th>
                                </tr>
                            </thead>
                            <tbody>
                                <Virtualize ItemsProvider="LoadItemBuyOrders" Context="item">
                                    <ItemContent>
                                        <tr class="hover-darken">
                                            <td class="text-centered">
                                                <MudText Typo="Typo.body2" Color="Color.Secondary"Class="no-wrap">@State.Currency.ToPriceString(item.Price)</MudText>
                                            </td>
                                            <td class="text-centered">
                                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="no-wrap">@item.Quantity.ToQuantityString()</MudText>
                                            </td>
                                        </tr>
                                    </ItemContent>
                                    <Placeholder>
                                        <tr>
                                            <td class="text-centered">—</td>
                                            <td class="text-centered">—</td>
                                        </tr>
                                    </Placeholder>
                                </Virtualize>
                            </tbody>
                        </MudSimpleTable>
				    </MudPaper>
                </MudItem>
            }
            
            @if(Item.IsAvailableOnMarket)
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Class="pa-2">
                        @if (!Item.IsBanned)
                        {
                            <div class="d-flex flex-row flex-wrap justify-end">
                                <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="pa-2 flex-grow-1">
                                    @if (Item.Market24hrSales > 0 && Item.Market24hrValue > 0)
                                    {
                                        <span>@((Item.Market24hrSales ?? 0).ToQuantityString())</span>
                                        <span class="mud-secondary-text"> sold in the last 24hrs, median price of </span>
                                        <span>@State.Currency.ToPriceString(Item.Market24hrValue.Value)</span>
                                    }
                                    else
                                    {
                                        <span>@((Item.Market24hrSales ?? 0).ToQuantityString())</span>
                                        <span class="mud-secondary-text"> sold in the last 24hrs</span>
                                    }
                                    @if (MarketItemSalesTrend > 0)
                                    {
                                        <span class="mud-success-text"><i class="fa fa-fw fa-arrow-up ml-1"/> trending up</span>
                                    }
                                    else if (MarketItemSalesTrend < 0)
                                    {
                                        <span class="mud-error-text"><i class="fa fa-fw fa-arrow-down ml-1"/> trending down</span>
                                    }
                                </MudText>
                                <div class="pa-1 flex-shrink-1">
                                    <MudToggleIconButton @bind-Toggled="@MarketItemSalesAnnotations"
                                         Icon="fa fw-fw fa-toggle-off" Color="@Color.Secondary" Title="Off"
                                         ToggledIcon="fa fw-fw fa-toggle-on" ToggledColor="@Color.Primary" ToggledTitle="On"/>
                                    <span class="mr-2">Annotations @(MarketItemSalesAnnotations ? "On" : "Off")</span>
                                    <MudButtonGroup Variant="Variant.Text" OverrideStyles="false">
                                        <MudButton OnClick="@(() => LoadItemSales(7))" Color="@(MarketItemSalesMaxDays == 7 ? Color.Primary : Color.Secondary)" Class="px-2">Week</MudButton>
                                        <MudButton OnClick="@(() => LoadItemSales(30))" Color="@(MarketItemSalesMaxDays == 30 ? Color.Primary : Color.Secondary)" Class="px-2">Month</MudButton>
                                        <MudButton OnClick="@(() => LoadItemSales(-1))" Color="@(MarketItemSalesMaxDays == -1 ? Color.Primary : Color.Secondary)" Class="px-2">Lifetime</MudButton>
                                    </MudButtonGroup>
                                </div>
                            </div>
                        }
                        <div class="d-flex flex-column justify-stretch align-stretch relative">
                            @if (MarketItemSalesChartData == null)
                            {
                                <div class="d-flex align-center justify-center full-width full-height pa-2">
                                    <Loading Message="Loading sales history..." />
                                </div>
                            }
                            else
                            {
                                <style>
                                    #SalesHistory_Series_1_TrendLine_0 {
                                        stroke-dasharray: 10px 10px;
                                        stroke-linejoin: round;
                                        stroke-linecap: round;
                                        -webkit-animation: dash 1s linear infinite;
                                        animation: dash 1s linear infinite;
                                    }
                                    @@-webkit-keyframes dash {
                                        100% {
                                            stroke-dashoffset: -20px;
                                        }
                                    }
                                    @@keyframes dash {
                                        100% {
                                            stroke-dashoffset: -20px;
                                        }
                                    }
                                </style>
                                <SfChart ID="SalesHistory" Theme="Syncfusion.Blazor.Theme.MaterialDark" Background="transparent" Width="100%" Height="100%">
                                    <ChartArea>
                                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                                    </ChartArea>
                                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" IntervalType="IntervalType.Auto" Format="d-MMM-yy" LabelIntersectAction="LabelIntersectAction.Rotate90" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                    </ChartPrimaryXAxis>
                                    <ChartAxes>
                                        <ChartAxis Name="VolumeAxis" RowIndex="0" LabelFormat="#,##" EdgeLabelPlacement="EdgeLabelPlacement.Shift" OpposedPosition="true">
                                        </ChartAxis>
                                        <ChartAxis Name="PriceAxis" RowIndex="1" LabelFormat="@($"{State.Currency.PrefixText}#,##0.00{State.Currency.SuffixText}")" RangePadding="ChartRangePadding.None" PlotOffset="30">
                                        </ChartAxis>
                                    </ChartAxes>
                                    <ChartRows>
                                        <ChartRow Height="30%"></ChartRow>
                                        <ChartRow Height="70%"></ChartRow>
                                    </ChartRows>
                                    <ChartSeriesCollection>
                                        <Syncfusion.Blazor.Charts.ChartSeries DataSource="@MarketItemSalesChartData" YAxisName="VolumeAxis" Name="Volume" XName="Date" YName="Volume" Fill="#66c0f4" Type="ChartSeriesType.Column">
                                        </Syncfusion.Blazor.Charts.ChartSeries>
                                        <Syncfusion.Blazor.Charts.ChartSeries DataSource="@MarketItemSalesChartData" YAxisName="PriceAxis" Name="Median Price" XName="Date" YName="Median" Volume="Volume" High="High" Low="Low" Open="Open" Close="Close"
                                                                              Fill="#388e3c" BearFillColor="#2ecd71" BullFillColor="#e74c3d" Type="@(MarketItemSalesMaxDays >= 1 && MarketItemSalesMaxDays <= 30 ? ChartSeriesType.Candle : ChartSeriesType.Line)">
                                            <ChartTrendlines>
                                                <ChartTrendline Type="TrendlineTypes.Polynomial" Width="3" Name="Median Price Trend" Fill="@(MarketItemSalesTrend > 0 ? "#2ecd71" : "#e74c3d")" EnableTooltip="true">
                                                </ChartTrendline>
                                            </ChartTrendlines>
                                        </Syncfusion.Blazor.Charts.ChartSeries>
                                    </ChartSeriesCollection>
                                    <ChartAnnotations>
                                        @if (MarketItemSalesAnnotations && Collection?.Items?.Any() == true)
                                        {
                                            @foreach (var itemGroup in Collection.Items.Where(x => x.TimeAccepted != null && MarketItemSalesChartData.Any(y => DateTime.Equals(y.Date, x.TimeAccepted.Value.Date))).GroupBy(x => x.TimeAccepted.Value.Date))
                                            {
                                                <ChartAnnotation YAxisName="PriceAxis" X="@MarketItemSalesChartData.FirstOrDefault(x => DateTime.Equals(x.Date, itemGroup.Key))?.Date" Y="@MarketItemSalesChartData.FirstOrDefault(x => DateTime.Equals(x.Date, itemGroup.Key))?.Median.ToString()" CoordinateUnits="Units.Point" Region="Regions.Series">
                                                    <ContentTemplate>
                                                        <div class="d-flex flex-column">
                                                            @foreach (var item in itemGroup)
                                                            {
                                                                <MudTooltip Text="@($"{item.Name} was accepted")">
                                                                    <MudChip Size="Size.Small" Class="pa-1" Style="height:auto">
                                                                        <div class="hover-zoom hover-zoom-extreme">
                                                                            <img src="@item.IconUrl" alt="@item.Name" style="width:3em; height:3em" />
                                                                        </div>
                                                                    </MudChip>
                                                                </MudTooltip>
                                                            }
                                                        </div>
                                                    </ContentTemplate>
                                                </ChartAnnotation>
                                            }
                                        }
                                    </ChartAnnotations>
                                    <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="false" EnablePinchZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
                                    <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
                                    <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                                    <ChartLegendSettings Visible="true"></ChartLegendSettings>
                                </SfChart>
                            }
                        </div>
				    </MudPaper>
                </MudItem>
            }
            
            @if(Item.IsAvailableOnMarket && !Item.IsBanned)
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Style="height:30vh; overflow-y:scroll">
                        <Virtualize ItemsProvider="LoadItemActivity" Context="item">
                            <ItemContent>
                                <div class="@(item.IsSale ? "mud-paper mud-paper-square" : null)">
                                    <div class="d-flex flex-row flex-wrap justify-start align-center hover-darken pa-1">
                                        @if (!String.IsNullOrEmpty(item.BuyerName))
                                        {
                                            <img src="@item.BuyerAvatarUrl" class="mx-1" style="width:32px; height:32px;" />
                                            <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.BuyerName</MudText>
                                        }
                                        else if (!String.IsNullOrEmpty(item.SellerName))
                                        {
                                            <img src="@item.SellerAvatarUrl" class="mx-1" style="width:32px; height:32px;" />
                                            <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.SellerName</MudText>
                                        }
                                        <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary" Class="mx-1 no-wrap">@GetActivityDescription(item)</MudText>
                                        <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.Quantity.ToQuantityString()x</MudText>
                                        <img src="@item.IconUrl" class="mx-1" style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary" Class="mx-1 no-wrap">for</MudText>
                                        <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@State.Currency.ToPriceString(item.Price)</MudText>
                                        @if (!String.IsNullOrEmpty(item.BuyerName) && !String.IsNullOrEmpty(item.SellerName))
                                        {
                                            <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary" Class="mx-1 no-wrap">from</MudText>
                                            <img src="@item.SellerAvatarUrl" class="mx-1" style="width:32px; height:32px;" />
                                            <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.SellerName</MudText>
                                        }
                                        <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary" Class="flex-grow-1 mx-1 no-wrap">@((DateTimeOffset.Now - item.Timestamp).ToDurationString(prefix: "about", maxGranularity: 3, suffix: "ago"))</MudText>
                                    </div>
                                </div>
                            </ItemContent>
                            <Placeholder>
                                <div class="d-flex flex-row justify-start align-center pa-1">
                                    <MudProgressCircular Indeterminate="true" Class="mx-1" Style="width:32px; height:32px;" />
                                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mx-1">Loading...</MudText>
                                </div>
                            </Placeholder>
                        </Virtualize>
				    </MudPaper>
                </MudItem>
            }
            
            @if (!String.IsNullOrEmpty(Item.ItemCollection))
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Class="pa-4">
                        @if (Collection == null)
                        {
                            <Loading Message="Loading item collection..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
                        } 
                        else
                        {
                            <div class="d-flex">
                                <MudTooltip Text="@Collection.CreatorName">
                                    <MudAvatar Image="@Collection.CreatorAvatarUrl" Size="MudBlazor.Size.Medium" Class="mt-2" />
                                </MudTooltip>
                                <div class="ml-4">
                                    <MudText Typo="MudBlazor.Typo.h6" Class="no-wrap">@Collection.Name Collection</MudText>
                                    <MudText Typo="MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Secondary" Class="mt-n1">
                                        <span>There are <strong>@(Collection.Items?.Count ?? 0) items</strong> in this collection.</span>
                                    </MudText>
                                    @if(Collection.BuyNowPrice > 0)
                                    {
                                        <MudText Typo="MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Secondary" Class="mt-n1">
                                            <span>Total cost: <strong>@State.Currency.ToPriceString(Collection.BuyNowPrice.Value)</strong></span>
                                        </MudText>
                                    }
                                </div>
                            </div>
                            <MudGrid Class="mt-1">
                                @foreach (var item in Collection.Items)
                                {
                                    <MudItem xs="6" sm="4" md="3" lg="3" xl="2">
                                        <ItemDescriptionSummary Item="@item" />
                                    </MudItem>
                                }
                            </MudGrid>
                        }
				    </MudPaper>
                </MudItem>
            }
            
            @if (!Item.IsAvailableOnMarket)
            {
                <MudItem xs="12">
                    @if (Item.MarketableRestrictionDays > 0)
                    {
                        <Alert Variant="MudBlazor.Variant.Outlined" Severity="MudBlazor.Severity.Normal" Icon="fas fa-fw fa-balance-scale-left mt-1" 
                                Title="This item is not available on the market yet" 
                                Subtitle="More information will become available when this item becomes marketable" />
                    }
                    else
                    {
                        <Alert Variant="MudBlazor.Variant.Text" Severity="MudBlazor.Severity.Warning" Icon="fas fa-fw fa-balance-scale-left mt-1" 
                               Title="This item is not available on the market" 
                               Subtitle="Only limited information is available for this item as it is unmarketable" />
                    }
                </MudItem>
            }

		</MudGrid>
    </MudItem>
           
</MudGrid>

@code {

    [Parameter]
    public ItemDetailedDTO Item { get; set; }

    private ItemCollectionDTO Collection { get; set; }

    private ItemDistributionDTO MarketItemDistribution { get; set; }

    private IEnumerable<object> MarketItemDistributionChartData { get; set;}

    private IEnumerable<ItemSalesChartPointDTO> MarketItemSalesChartData { get; set; }

    private decimal MarketItemSalesTrend { get; set; }

    private bool MarketItemSalesAnnotations { get; set; } = true;

    private int MarketItemSalesMaxDays { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!String.IsNullOrEmpty(Item.ItemCollection))
            {
                Collection = await Http.GetFromJsonWithDefaultsAsync<ItemCollectionDTO>($"api/item/collection/{Item.ItemCollection}?creatorId={(!Item.IsTwitchDrop ? Item.CreatorId : null)}");
            }
            if (Item.IsMarketable && Item.IsAvailableOnMarket && !Item.IsBanned)
            {
                MarketItemDistribution = await Http.GetFromJsonWithDefaultsAsync<ItemDistributionDTO>($"api/item/{Item.Id}/distribution");
                RebuildMarketItemDistributionChartData();
            }
            if (Item.IsMarketable && Item.IsAvailableOnMarket && !Item.IsBanned)
            {
                await LoadItemSales();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading the item collection");
            Snackbar.Add($"Unable to load item collection. {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    protected async ValueTask<ItemsProviderResult<ItemOrderDTO>> LoadItemSellOrders(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemOrderDTO>>($"api/item/{Item.Id}/sellOrders?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemOrderDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Unable to list item sell orders");
            Snackbar.Add($"Unable to load item sell orders. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
    }

    protected async ValueTask<ItemsProviderResult<ItemOrderDTO>> LoadItemBuyOrders(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemOrderDTO>>($"api/item/{Item.Id}/buyOrders?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemOrderDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Unable to list item buy orders");
            Snackbar.Add($"Unable to load item buy orders. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
    }

    protected async ValueTask<ItemsProviderResult<ItemActivityStatisticDTO>> LoadItemActivity(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemActivityStatisticDTO>>($"api/stats/market/activity?item={Uri.EscapeDataString(Item.Name)}&start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemActivityStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Unable to list item activity");
            Snackbar.Add($"Unable to load item activity. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
    }

    protected async Task LoadItemSales(int maxDays = 30)
    {
        try
        {
            MarketItemSalesMaxDays = maxDays;
            MarketItemSalesTrend = 0;
            MarketItemSalesChartData = null;
            StateHasChanged();
            MarketItemSalesChartData = await Http.GetFromJsonWithDefaultsAsync<IEnumerable<ItemSalesChartPointDTO>>($"api/item/{Item.Id}/sales?maxDays={maxDays}");
            MarketItemSalesTrend = ((maxDays >= 1 && maxDays <= 30)
                ? (MarketItemSalesChartData?.LastOrDefault()?.Close ?? 0) - (MarketItemSalesChartData?.FirstOrDefault()?.Median ?? 0)
                : (MarketItemSalesChartData?.LastOrDefault()?.Median ?? 0) - (MarketItemSalesChartData?.FirstOrDefault()?.Median ?? 0)
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Unable to list item sales");
            Snackbar.Add($"Unable to load item sales. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void RebuildMarketItemDistributionChartData()
    {
        if (MarketItemDistribution == null)
        {
            return;
        }

        var marketItemDistribution = new List<ChartData>();
        if (MarketItemDistribution.UnknownItemCount > 0 && MarketItemDistribution.HasUnknownItems)
        {
            marketItemDistribution.Add(new ChartData() 
            {
                Name = "Estimated Unknown Copies",
                Value = (double) MarketItemDistribution.UnknownItemCount.Value,
                Fill = "#616161"
            });
        }
        if (MarketItemDistribution.KnownInventoryItemCount > 0)
        {
            marketItemDistribution.Add(new ChartData() 
            {
                Name = "Player Inventories",
                Value = (double) MarketItemDistribution.KnownInventoryItemCount,
                Fill = "#0288d1"
            });
        }
        if (MarketItemDistribution.KnownMarketItemCounts != null)
        {
            foreach (var market in MarketItemDistribution.KnownMarketItemCounts.OrderBy(x => x.Value))
            {
                marketItemDistribution.Add(new ChartData() 
                {
                    Name = market.Key.GetDisplayName(),
                    Value = (double) market.Value
                });
            }
        }

        MarketItemDistributionChartData = marketItemDistribution;
    }

    private void BuyItem(ItemMarketPriceDTO price)
    {
        if (price != null && price.IsAvailable && !String.IsNullOrEmpty(price.Url))
        {
            ExternalNavigationManager.NavigateToNewTab(price.Url);
        }
    }
    
    private void ViewStorePage(string storeId)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"/store/{storeId}"
        );
    }
    
    private void ViewItemWorkshopPage()
    {
        ExternalNavigationManager.NavigateToNewTab(new SteamWorkshopFileDetailsPageRequest() 
        {
            Id = Item.WorkshopFileId.ToString()
        });
    }
    
    private void DownloadItemWorkshopFile()
    {
        ExternalNavigationManager.NavigateTo(Item.WorkshopFileUrl);
    }
    
    private void ShowItemModelDialog()
    {
        Dialogs.Show<ViewItemModelDialog>(null, parameters: new DialogParameters()
        {
            ["ItemName"] = Item.Name,
            ["ItemType"] = Item.ItemType,
            ["WorkshopFileUrl"] = Item.WorkshopFileUrl,
            ["DisableCutoutControls"] = Item.HasCutout != true,
            ["DisableGlowControls"] = Item.HasGlow != true
        });
    }

    private void ViewCreatorWorkshopPage()
    {
        ExternalNavigationManager.NavigateToNewTab(new SteamProfileMyWorkshopFilesPageRequest() 
        {
            SteamId = Item.CreatorId.ToString(),
            AppId = Item.AppId.ToString()
        });
    }
    
    private void ShowCreatorItemsDialog()
    {
        Dialogs.Show<ViewItemListDialog>(null, parameters: new DialogParameters()
        {
            ["ListName"] = $"Skins by {Item.CreatorName}",
            ["ListUrl"] = $"api/item?creatorId={Item.CreatorId}&count=-1",
            ["HighlightedItemId"] = Item.Id
        });
    }

    private void ShowItemTypeDialog()
    {
        Dialogs.Show<ViewItemListDialog>(null, parameters: new DialogParameters()
        {
            ["ListName"] = $"Marketable {Item.ItemType.Pluralise()}",
            ["ListUrl"] = $"api/item?type={Item.ItemType}&count=-1",
            ["HighlightedItemId"] = Item.Id,
            ["SortByValue"] = true
        });
    }

    private void ShowItemCollectionDialog()
    {
        Dialogs.Show<ViewItemCollectionDialog>(null, parameters: new DialogParameters()
        {
            ["CollectionName"] = $"{Item.ItemCollection} Collection",
            ["CollectionUrl"] = $"api/item/collection/{Item.ItemCollection}?creatorId={(!Item.IsTwitchDrop ? Item.CreatorId : null)}"
        });
    }
    
    private string GetGlowClass()
    {
        if (Item.HasGlow == true)
        {
            if (!String.IsNullOrEmpty(Item.DominantColour))
            {
                return $"glow-transparent";
            }
            else
            {
                return $"glow";
            }
        }
        return null;
    }

    private string GetGlowStyles()
    {
        if (Item.HasGlow == true)
        {
            if (!String.IsNullOrEmpty(Item.DominantColour))
            {
                return $"filter: drop-shadow(0px 0px 16px {Item.DominantColour});";
            }
        }
        return null;
    }
    
    private string GetActivityDescription(ItemActivityStatisticDTO activity)
    {
        if (activity.IsSale)
        {
            return "purchased";
        }
        switch (activity.Type)
        {
            case SteamMarketItemActivityType.CreatedSellOrder: return $"created a listing of";
            case SteamMarketItemActivityType.CancelledSellOrder: return $"cancelled their listing of";
            case SteamMarketItemActivityType.CreatedBuyOrder: return $"created a buy order of";
            case SteamMarketItemActivityType.CancelledBuyOrder: return $"cancelled their buy order of";
            default: return "did something";
        }
    }

    private IEnumerable<TimelineEvent> GetTimelineEvents()
    {
        var events = new List<TimelineEvent>();
        if (Item.TimeCreated != null)
        {
            events.Add(new TimelineEvent()
            {
                Timestamp = Item.TimeCreated.Value,
                Color = Color.Default,
                Icon = "fas fa-fw fa-plus",
                Title = "Item Created",
                Subtitle = $"{Item.CreatorName} published the item."
            });
        }
        if (Item.TimeAccepted != null)
        {
            events.Add(new TimelineEvent()
            {
                Timestamp = Item.TimeAccepted.Value,
                Color = Color.Default,
                Icon = "fas fa-fw fa-check",
                Title = "Item Accepted",
                Subtitle = $"Item was accepted for {State.App.Name}."
            });
        }
        foreach (var change in Item.Changes)
        {
            events.Add(new TimelineEvent()
            {
                Timestamp = new DateTimeOffset(change.Key, TimeZoneInfo.Utc.BaseUtcOffset),
                Color = Color.Info,
                Icon = "fas fa-fw fa-wrench",
                Title = "Item Updated",
                Subtitle = !String.IsNullOrEmpty(change.Value) ? change.Value : "An unknown file change was made."
            });
        }
        if (Item.TimeMarketFirstSold != null)
        {
            events.Add(new TimelineEvent()
            {
                Timestamp = Item.TimeMarketFirstSold.Value,
                Color = Color.Default,
                Icon = "fas fa-fw fa-balance-scale-left",
                Title = "First Market Listing",
                Subtitle = "Item first appeared on the market."
            });
        }
        if (Item.TimeMarketHighestValue != null)
        {
            events.Add(new TimelineEvent()
            {
                Timestamp = Item.TimeMarketHighestValue.Value,
                Color = Color.Success,
                Icon = "fas fa-fw fa-arrow-up",
                Title = "All-Time High Value",
                Subtitle = State.Currency.ToPriceString(Item.MarketHighestValue.Value)
            });
        }
        if (Item.TimeMarketLowestValue != null)
        {
            events.Add(new TimelineEvent()
            {
                Timestamp = Item.TimeMarketLowestValue.Value,
                Color = Color.Error,
                Icon = "fas fa-fw fa-arrow-down",
                Title = "All-Time Low Value",
                Subtitle = State.Currency.ToPriceString(Item.MarketLowestValue.Value)
            });
        }

        // TODO: Highest market volume day
        // TODO: Stores

        return events;
    }

    private class TimelineEvent 
    {
        public DateTimeOffset Timestamp { get; set; }

        public Color Color { get; set; }

        public string Icon { get; set; }

        public string Title { get; set; }

        public string Subtitle { get; set; }
    }

    private class ChartData
    {
        public string Name {get; set; }

        public double Value {get; set; }

        public string Label => $"{Name} ({((long)Value).ToQuantityString()})";

        public string Fill { get; set; }
    }
}
