@using SCMM.Web.Data.Models.UI.Profile.Inventory
@inject ILogger<AppNavigationMenu> Logger
@inject IDialogService Dialogs
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

@if (State.IsAuthenticated)
{
    <div class="profile-container">
        <MudAvatar Image="@State.Profile.AvatarLargeUrl" Style="height:64px; width:64px;" />
        <MudText Typo="MudBlazor.Typo.h6">@State.Profile.Name</MudText>
        <RoleBadges Roles="@State.Profile.Roles" />
        <MudIconButton OnClick="NavigateSettings" Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-cog" title="Your settings" />
        <MudIconButton OnClick="NavigateSignOut" Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-sign-out-alt" title="Sign out" />
    </div>
}
else
{
    <div class="signin-container">
        <MudLink Class="signin-button" @onclick="async () => await ShowSignInDialog()">
            <img src="/images/sits_01.png" alt="Sign in through Steam" title="Sign in through Steam" />
        </MudLink>
    </div>
}

<NavigationMenu Items="@NavigationMenuItems" Class="flex-grow-1" />

<MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary" Class="pa-4">
    <span><MudLink Href="/about" Typo="MudBlazor.Typo.caption">SCMM is fanmade</MudLink> and not affilated with Valve Corporation or Facepunch.</span>
</MudText>

@code {

    private List<INavigationMenuItem> NavigationMenuItems { get; set; }

    private ProfileInventoryTotalsDTO InventoryTotals { get; set; }

    private DateTimeOffset? StoreNextUpdateTime { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        NavigationMenuItems = RebuildMenuItems();
        StateHasChanged();

        await RefreshInventoryTotals();
        await RefreshStoreTimeRemaining();
        NavigationMenuItems = RebuildMenuItems();
        StateHasChanged();
    }

    private async Task RefreshInventoryTotals()
    {
        if (!State.IsAuthenticated)
        {
            return;
        }
        try
        {
            InventoryTotals = await Http.GetFromJsonAsync<ProfileInventoryTotalsDTO>(
                $"api/profile/{State.Profile?.SteamId}/inventory/total"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error refreshing inventory totals for '{State.Profile?.SteamId}'");
        }
    }

    private async Task RefreshStoreTimeRemaining()
    {
        try
        {
            StoreNextUpdateTime = await Http.GetFromJsonAsync<DateTimeOffset>(
                $"api/store/nextUpdateTime"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error refreshing remaining store time");
        }
    }

    private List<INavigationMenuItem> RebuildMenuItems()
    {
        var inventoryValue = String.Empty;
        if (InventoryTotals?.MarketValue > 0)
        {
            inventoryValue = State.Currency.ToPriceString(InventoryTotals.MarketValue);
        }

        var storeUpdateTimeRemaining = String.Empty;
        if (StoreNextUpdateTime != null)
        {
            var nextStoreIsOverdue = (StoreNextUpdateTime.Value <= DateTimeOffset.Now);
            storeUpdateTimeRemaining = (StoreNextUpdateTime.Value - DateTimeOffset.Now).ToDurationString(
                suffix: (nextStoreIsOverdue ? "overdue" : "remaining"), zero: "due now", showSeconds: false, maxGranularity: 2
            );
        }

        var items = new List<INavigationMenuItem>();
        if (State.IsAuthenticated)
        {
            items.AddRange(new List<INavigationMenuItem>
            {
                new NavigationMenuItemLink
                {
                    Icon = "fas fa-fw fa-funnel-dollar",
                    Title = "Item Inventory",
                    Path = $"/inventory/{State.Profile?.SteamId}",
                    SubTitle = inventoryValue,
                    Prefix = true
                }
            });
        }
        else
        {
            items.AddRange(new List<INavigationMenuItem>
            {
                new NavigationMenuItemLink
                {
                    Icon = "fas fa-fw fa-funnel-dollar",
                    Title = "Inventory Analyser",
                    SubTitle = "What is your inventory worth?",
                    Path = $"/inventory",
                    Prefix = true
                }
            });
        }
        if (items.Any())
        {
            items.Add(null);
        }
        items.AddRange(new List<INavigationMenuItem>
        {
            new NavigationMenuItemLink
            {
                Icon = "fas fa-fw fa-shopping-cart",
                Title = "Store",
                SubTitle = storeUpdateTimeRemaining,
                Path =  "/store",
                Prefix =  true
            },
            new NavigationMenuItemLink
            {
                Icon = "fas fa-fw fa-paint-roller",
                Title = "Skins",
                SubTitle = "Explore all item skins",
                Path = "/items",
                Prefix = true
            },
            new NavigationMenuItemLink
            {
                Icon = "fas fa-fw fa-chart-pie",
                Title = "Statistics",
                SubTitle = "View market trends and stats",
                Path = "/stats",
                Prefix = true
            },
            new NavigationMenuItemLink
            {
                Icon = "fas fa-fw fa-exchange-alt",
                Title = "Market Activity",
                SubTitle = "View recent market activity",
                Path = "/activity",
                Prefix = true
            }
        });
        if (items.Any())
        {
            items.Add(null);
        }
        items.AddRange(new List<INavigationMenuItem>
        {
            new NavigationMenuItemLink
            {
                Icon = "fas fa-fw fa-robot",
                Title = "Get the bot",
                SubTitle = "Invite our bot to your Discord",
                Path =  "https://discord.com/api/oauth2/authorize?client_id=761034518424715264&permissions=2112&scope=bot"
            },
            new NavigationMenuItemLink
            {
                Icon = "fab fa-fw fa-discord",
                Title = "Join the community",
                SubTitle = "Come have a chat on Discord",
                Path =  "https://discord.gg/CRMf95Z"
            },
            new NavigationMenuItemLink
            {
                Icon = "fas fa-fw fa-donate",
                Title = "Donate",
                SubTitle = "Show your support",
                OnClick = ShowDonationDialog
            },
            new NavigationMenuItemGroup
            {
                Icon = "fas fa-fw fa-info-circle",
                Title = "About",
                Children = new List<INavigationMenuItem>
                {
                    new NavigationMenuItemLink
                    {
                        //Icon = "fas fa-fw fa-info fa-sm",
                        Title = "Website",
                        Path =  "/about",
                        Prefix = true
                    },
                    new NavigationMenuItemLink
                    {
                        //Icon = "fas fa-fw fa-user-secret fa-sm",
                        Title = "Privacy Policy",
                        Path =  "/privacy",
                        Prefix =  true
                    },
                    new NavigationMenuItemLink
                    {
                        //Icon = "fas fa-fw fa-handshake fa-sm",
                        Title = "Terms of Service",
                        Path =  "/tos",
                        Prefix =  true
                    },
                    new NavigationMenuItemLink
                    {
                        //Icon = "fas fa-fw fa-book fa-sm",
                        Title = "API Documentation",
                        Path =  "/docs"
                    },
                }
            }
        });

        return items;
    }

    private void ShowDonationDialog()
    {
        Dialogs.Show<DonateDialog>();
    }

    private async Task ShowSignInDialog()
    {
        var result = await Dialogs.Show<SignInDialog>().Result;
        if (!result.Cancelled && (bool) result.Data == true)
        {
            NavigateSignIn();
        }
    }
    
    private void NavigateSettings()
    {
        NavigationManager.NavigateTo($"/settings");
    }

    private void NavigateSignIn()
    {
        ExternalNavigationManager.NavigateTo($"/signin?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
    }

    private void NavigateSignOut()
    {
        ExternalNavigationManager.NavigateTo($"/signout?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
    }

}
