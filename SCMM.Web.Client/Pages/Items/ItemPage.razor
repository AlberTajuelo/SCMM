@using SCMM.Web.Client.Shared.Components.Items
@using SCMM.Web.Data.Models.UI.Item
@page "/item/{Name}"
@page "/items/{Name}"
@page "/skin/{Name}"
@page "/skins/{Name}"
@inherits PersistentComponent
@inject ILogger<ItemPage> Logger
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject AppState State

<PageContainer Title="@($"{State?.App?.Name} Skin - {Item?.Name ?? Name}")" 
               Description="@(Item?.Description)"
               ImageUrl="@(Item?.IconLargeUrl ?? Item?.PreviewUrl)">

    @if (Item == null)
    {
        <Loading Message="Loading item..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
    } 
    else
    {
        <ItemDescriptionDetails Item="@Item" />
    }
            
</PageContainer>

@code {

    [Parameter]
    public string Name { get; set; }

    private ItemDetailedDTO Item;

    protected override async Task OnLoadStateAsync()
    {
        Item = await RestoreFromStateOrLoad(nameof(Item), async () =>
        {
            await LoadItem();
            return Item;
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(Item), Item);
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        // If we have navigated to a different item, reload the new item
        if ((Item != null) && !String.Equals(Name, Item?.Name, StringComparison.InvariantCultureIgnoreCase))
        {
            Item = null;
            StateHasChanged();
            await LoadItem();
        }
    }
    
    private async Task LoadItem()
    {
        try
        {
            Item = await Http.GetFromJsonWithDefaultsAsync<ItemDetailedDTO>($"/api/item/{Uri.EscapeDataString(Name)}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading the item details");
            Snackbar.Add($"Unable to load item details. {ex.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }

}
