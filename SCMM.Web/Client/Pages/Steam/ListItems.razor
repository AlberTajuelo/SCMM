@page "/steam/items"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SCMM.Web.Shared.Domain.DTOs.Steam
@using SCMM.Web.Shared
@attribute [Authorize]
@inject HttpClient Http

<Row>
    <Column ColumnSize="ColumnSize.Is5">

        @if (items == null)
        {
            <Text><em>Loading...</em></Text>
        }
        else
        {
            <TextEdit Text="@itemFilter" TextChanged="@OnItemFilterChanged" Placeholder="Search for item..." />
            <DataGrid TItem="SteamMarketItemDTO" Data="@items" SelectedRowChanged="@OnItemSelectionChanged" Narrow="true" Striped="true" ShowPager="true" PageSize="25">
                <DataGridColumn TItem="SteamMarketItemDTO" Field="@nameof(SteamMarketItemDTO.Description.IconUrl)" Caption="Icon">
                    <DisplayTemplate>
                        <img src="@((context as SteamMarketItemDTO).Description.IconUrl)" style="max-width:24px; max-height:24px" />
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="SteamMarketItemDTO" Field="@nameof(SteamMarketItemDTO.Name)" Caption="Name" Sortable="true">
                    <DisplayTemplate>
                        <Text Weight="TextWeight.Bold">@((context as SteamMarketItemDTO).Name)</Text>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="SteamMarketItemDTO" Field="@nameof(SteamMarketItemDTO.Supply)" Caption="Supply" Sortable="true">
                    <DisplayTemplate>
                        <Text>@((context as SteamMarketItemDTO).Supply.ToSaturationString(@context.Demand))</Text>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="SteamMarketItemDTO" Field="@nameof(SteamMarketItemDTO.Demand)" Caption="Demand" Sortable="true">
                    <DisplayTemplate>
                        <Text>@((context as SteamMarketItemDTO).Demand.ToSaturationString(@context.Supply))</Text>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="SteamMarketItemDTO" Field="@nameof(SteamMarketItemDTO.SellLowestPrice)" Caption="Lowest Price" Sortable="true">
                    <DisplayTemplate>
                        <Text>@((context as SteamMarketItemDTO).Currency.ToPriceString(context.SellLowestPrice))</Text>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="SteamMarketItemDTO" Field="@nameof(SteamMarketItemDTO.SellLowestDelta)" Caption="Lowest Price Delta" Sortable="true">
                    <DisplayTemplate>
                        <Text>@((context as SteamMarketItemDTO).Currency.ToPriceString(context.SellLowestDelta))</Text>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGrid>
        }

    </Column>
    <Column ColumnSize="ColumnSize.Is7">

        @if (selectedItem != null)
        {
            <Row>
                <Column ColumnSize="ColumnSize.Is2">
                    <img src="@selectedItem.Description.IconLargeUrl" style="max-width:128px; max-height:128px" />
                </Column>
                <Column ColumnSize="ColumnSize.Is10">
                    <Heading Size="HeadingSize.Is3">
                        @selectedItem.Name
                    </Heading>
                    <Paragraph>
                        <Text>This is a skin for the Metal Facemask item. You will be able to apply this skin when you craft the item in game.</Text>
                    </Paragraph>
                    <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is2">Armour</Badge>
                    <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is2">Metal Facemask</Badge>
                    <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is2">Cloth</Badge>
                    <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is1">Blackout</Badge>
                    <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is2">MDE</Badge>
                    <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is2">50K+</Badge>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Table Narrow="true">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Buy Now Price</TableHeaderCell>
                                <TableHeaderCell>Quantity</TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var order in selectedItem.SellOrders.OrderBy(x => x.Price).Take(5))
                            {
                                <TableRow>
                                    <TableRowCell>
                                        <Text Weight="TextWeight.Bold">@selectedItem.Currency.ToPriceString(order.Price)</Text>
                                    </TableRowCell>
                                    <TableRowCell>@order.Quantity</TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Table Narrow="true">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Buy Asking Price</TableHeaderCell>
                                <TableHeaderCell>Quantity</TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var order in selectedItem.BuyOrders.OrderByDescending(x => x.Price).Take(5))
                            {
                                <TableRow>
                                    <TableRowCell>
                                        <Text Weight="TextWeight.Bold">@selectedItem.Currency.ToPriceString(order.Price)</Text>
                                    </TableRowCell>
                                    <TableRowCell>@order.Quantity</TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is12">
                    <LineChart @ref="priceHistory" TItem="double" />
                </Column>
            </Row>
        }
        else
        {
            <Text>No item selected</Text>
        }

    </Column>
</Row>


@code {

    private string itemFilter = "blackout";
    private SteamMarketItemDTO[] items;
    private SteamMarketItemDTO selectedItem;
    LineChart<double> priceHistory;

    protected override async Task OnInitializedAsync()
    {
        await RefreshItems();
    }

    async void OnItemFilterChanged(string value)
    {
        itemFilter = value;
        await RefreshItems();
    }

    async void OnItemSelectionChanged(SteamMarketItemDTO item)
    {
        selectedItem = item;
        await RedrawPriceHistory();
    }

    async Task RefreshItems()
    {
        try
        {
            items = await Http.GetFromJsonAsync<SteamMarketItemDTO[]>($"SteamItems?filter={itemFilter}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task RedrawPriceHistory()
    {
        await priceHistory.Clear();
        //await priceHistory.AddLabel(Labels);
        //await priceHistory.AddDataSet(GetLineChartDataset());
        //await priceHistory.AddDataSet(GetLineChartDataset());
        await priceHistory.Update();
    }

}
