@page "/stats"
@using SCMM.Steam.Data.Models
@using SCMM.Steam.Data.Models.Enums
@using SCMM.Web.Data.Models
@using SCMM.Web.Data.Models.Steam
@using SCMM.Web.Data.Models.UI
@using SCMM.Web.Data.Models.UI.MarketStatistics
@inject ILogger<MarketStatisticsPage> Logger
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AppState State

<style>

    .Dashboard-Card, .Dashboard-Chart-Card {
        display: flex;
        flex-flow: column;
        height: 100%;
    }
    
    .Dashboard-Card .CardHeader-Root {
        flex: 0 1 auto;
    }

    .Dashboard-Card .CardContent-Root {
        flex: 1 1 auto;
        height: 500px;
        overflow-y: auto;
        padding: 0px;
    }

</style>

<Title Value="Market Statistics" />
<Grid Container Spacing="@Spacing.Two">

    <Grid Item ExtraSmall="@GridSize.Twelve">
        <Alert Severity="@Skclusive.Core.Component.Severity.Info" Variant="@AlertVariant.Outlined">
            <IconContent>
                <DiscordBotIcon />
            </IconContent>
            <ChildContent>
                <AlertTitle>SCMM Discord Bot</AlertTitle>
                <span>Beep Boop! Did you know I can join your Discord community to provide tools and alerts for the Steam community marketplace? Click the <a @onclick="InviteDiscordBot">invite button</a> to get started.</span>
            </ChildContent>
            <ActionContent>
                <Button Color="@Skclusive.Core.Component.Color.Inherit" Size="@Skclusive.Core.Component.Size.Large"
                        OnClick="@(() => InviteDiscordBot())">
                    INVITE
                </Button>
        </ActionContent>
        </Alert>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" ExtraLarge="@GridSize.Six">    
        <Card Class="Dashboard-Chart-Card">
            <CardHeader>
                <TitleContent>
                    <Grid Container>
                        <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Three">
                            <Skclusive.Material.Typography.Typography Variant="TypographyVariant.H6" Color="@Skclusive.Core.Component.Color.TextPrimary">
                                Market Sales
                            </Skclusive.Material.Typography.Typography>
                            <Skclusive.Material.Typography.Typography Variant="TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary">
                                Total number of sales per day
                            </Skclusive.Material.Typography.Typography>
                        </Grid>
                        <Grid Item Container ExtraSmall="@GridSize.Twelve" Small="@GridSize.Nine" Style="flex-direction: row-reverse">
                            <Button OnClick="@(() => RefreshSalesPerDay(null))" Color="@Skclusive.Core.Component.Color.TextSecondary">
                                All
                            </Button>
                            <Divider Orientation="@Skclusive.Core.Component.Orientation.Vertical" />
                            <Button OnClick="@(() => RefreshSalesPerDay(365))" Color="@Skclusive.Core.Component.Color.TextSecondary">
                                12m
                            </Button>
                            <Divider Orientation="@Skclusive.Core.Component.Orientation.Vertical" />
                            <Button OnClick="@(() => RefreshSalesPerDay(182))" Color="@Skclusive.Core.Component.Color.TextSecondary">
                                6m
                            </Button>
                            <Divider Orientation="@Skclusive.Core.Component.Orientation.Vertical" />
                            <Button OnClick="@(() => RefreshSalesPerDay(30))" Color="@Skclusive.Core.Component.Color.TextSecondary">
                                1m
                            </Button>
                            @if (SalesYesterday > 0)
                            {
                                <Divider Orientation="@Skclusive.Core.Component.Orientation.Vertical" />
                                <Skclusive.Material.Typography.Typography Variant="TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary" Style="display: flex; align-items: center; align-content: center; padding: 8px 16px;">
                                    <strong>@SalesYesterday.ToQuantityString() sales yesterday</strong>
                                </Skclusive.Material.Typography.Typography>
                            }
                        </Grid>
                    </Grid>
                </TitleContent>
            </CardHeader>
            <CardContent>
                @if (SalesPerDayChart == null)
                {
                    <Loading Message="Loading sales chart..." />
                }
                else
                {
                    <ChartJsLineChart @ref="SalesPerDayChartJs" Config="@SalesPerDayChart" />
                }
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.H6" Color="@Skclusive.Core.Component.Color.TextPrimary">
                        Hot Right Now
                    </Skclusive.Material.Typography.Typography>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary">
                        Items with the highest number of sales in the past 24hrs.
                    </Skclusive.Material.Typography.Typography>
                </TitleContent>
            </CardHeader>
            <CardContent>
                <Table Size="@Skclusive.Core.Component.Size.Small">
                    <TableBody>
                        <Virtualize ItemsProvider="LoadHotRightNow" Context="item">
                            <ItemContent>
                                <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>
                                        <span class="Text-NoWrap">@item.Last24hrSales.ToQuantityString()</span>
                                    </TableCell>
                                </TableRow>
                            </ItemContent>
                            <Placeholder>
                                <TableRow>
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="/images/loading.gif" style="width:32px; height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px">Loading...</strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>—</TableCell>
                                </TableRow>
                            </Placeholder>
                        </Virtualize>
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.H6" Color="@Skclusive.Core.Component.Color.TextPrimary">
                        Most Recent
                    </Skclusive.Material.Typography.Typography>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary">
                        Items with the lowest market age.
                    </Skclusive.Material.Typography.Typography>
                </TitleContent>
            </CardHeader>
            <CardContent>
                <Table Size="@Skclusive.Core.Component.Size.Small">
                    <TableBody>
                        <Virtualize ItemsProvider="LoadMostRecent" Context="item">
                            <ItemContent>
                                <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>
                                        <span class="Text-NoWrap">@item.MarketAge</span>
                                    </TableCell>
                                </TableRow>
                            </ItemContent>
                            <Placeholder>
                                <TableRow>
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="/images/loading.gif" style="width:32px; height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px">Loading...</strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>—</TableCell>
                                </TableRow>
                            </Placeholder>
                        </Virtualize>
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.H6" Color="@Skclusive.Core.Component.Color.TextPrimary">
                        <img src="/images/stonks-guy.png" style="width:24px; margin-right: -10px;" />
                        📈 Stonking
                    </Skclusive.Material.Typography.Typography>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary">
                        Items currently at their all-time highest value.
                    </Skclusive.Material.Typography.Typography>
                </TitleContent>
            </CardHeader>
            <CardContent>
                <Table Size="@Skclusive.Core.Component.Size.Small">
                    <TableBody>
                        <Virtualize ItemsProvider="LoadAllTimeHigh" Context="item">
                            <ItemContent>
                                <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>
                                        <span class="Text-NoWrap">@item.Currency.ToPriceString(item.Last1hrValue)</span>
                                    </TableCell>
                                </TableRow>
                            </ItemContent>
                            <Placeholder>
                                <TableRow>
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="/images/loading.gif" style="width:32px; height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px">Loading...</strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>—</TableCell>
                                </TableRow>
                            </Placeholder>
                        </Virtualize>
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.H6" Color="@Skclusive.Core.Component.Color.TextPrimary">
                        <img src="/images/stonks-guy.png" style="width:24px; margin-right: -10px;" />
                        📉 Crashing
                    </Skclusive.Material.Typography.Typography>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary">
                        Items currently at their all-time lowest value.
                    </Skclusive.Material.Typography.Typography>
                </TitleContent>
            </CardHeader>
            <CardContent>
                <Table Size="@Skclusive.Core.Component.Size.Small">
                    <TableBody>
                        <Virtualize ItemsProvider="LoadAllTimeLow" Context="item">
                            <ItemContent>
                                <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>
                                        <span class="Text-NoWrap">@item.Currency.ToPriceString(item.Last1hrValue)</span>
                                    </TableCell>
                                </TableRow>
                            </ItemContent>
                            <Placeholder>
                                <TableRow>
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="/images/loading.gif" style="width:32px; height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px">Loading...</strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>—</TableCell>
                                </TableRow>
                            </Placeholder>
                        </Virtualize>
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.H6" Color="@Skclusive.Core.Component.Color.TextPrimary">
                        Profitable Flips
                    </Skclusive.Material.Typography.Typography>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary">
                        Items with the largest gap in asking price vs buy now price with a upward trending average price. These items can be profitable if you are able to buy low and then sell high after the seven day market cooldown.
                    </Skclusive.Material.Typography.Typography>
                </TitleContent>
            </CardHeader>
            <CardContent>
                <Table Size="@Skclusive.Core.Component.Size.Small">
                    <TableHead>
                        <TableRow>
                            <TableCell></TableCell>
                            <TableCell>Buy At</TableCell>
                            <TableCell>Potential Profit</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        <Virtualize ItemsProvider="LoadProfitableFlips" Context="item">
                            <ItemContent>
                                <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>
                                        <span class="Text-NoWrap">@item.Currency.ToPriceString(item.BuyAskingPrice)</span>
                                    </TableCell>
                                    <TableCell>
                                        <span class="Text-NoWrap Text-Success">@item.Currency.ToPriceString(item.BuyNowPrice - item.BuyAskingPrice - ((long)Math.Floor(Math.Max(item.BuyNowPrice * EconomyExtensions.FeeMultiplier, 1))))</span>
                                    </TableCell>
                                </TableRow>
                            </ItemContent>
                            <Placeholder>
                                <TableRow>
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="/images/loading.gif" style="width:32px; height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px">Loading...</strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>—</TableCell>
                                    <TableCell>—</TableCell>
                                </TableRow>
                            </Placeholder>
                        </Virtualize>
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.H6" Color="@Skclusive.Core.Component.Color.TextPrimary">
                        Most Profitable
                    </Skclusive.Material.Typography.Typography>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary">
                        Items with the highest current market value.
                    </Skclusive.Material.Typography.Typography>
                </TitleContent>
            </CardHeader>
            <CardContent>
                <Table Size="@Skclusive.Core.Component.Size.Small">
                    <TableBody>
                        <Virtualize ItemsProvider="LoadMostProfitable" Context="item">
                            <ItemContent>
                                <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>
                                        <span class="Text-NoWrap">@item.Currency.ToPriceString(item.Last1hrValue)</span>
                                    </TableCell>
                                </TableRow>
                            </ItemContent>
                            <Placeholder>
                                <TableRow>
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="/images/loading.gif" style="width:32px; height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px">Loading...</strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>—</TableCell>
                                </TableRow>
                            </Placeholder>
                        </Virtualize>
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.H6" Color="@Skclusive.Core.Component.Color.TextPrimary">
                        Most Popular
                    </Skclusive.Material.Typography.Typography>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary">
                        Items with them highest number of unique owners (subscribers).
                    </Skclusive.Material.Typography.Typography>
                </TitleContent>
            </CardHeader>
            <CardContent>
                <Table Size="@Skclusive.Core.Component.Size.Small">
                    <TableBody>
                        <Virtualize ItemsProvider="LoadMostPopular" Context="item">
                            <ItemContent>
                                <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>
                                        <span class="Text-NoWrap">
                                            <i class="fas fa-fw fa-user"></i>
                                            @item.Subscriptions.ToQuantityString()
                                        </span>
                                    </TableCell>
                                </TableRow>
                            </ItemContent>
                            <Placeholder>
                                <TableRow>
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="/images/loading.gif" style="width:32px; height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px">Loading...</strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>—</TableCell>
                                </TableRow>
                            </Placeholder>
                        </Virtualize>
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.H6" Color="@Skclusive.Core.Component.Color.TextPrimary">
                        Most Saturated
                    </Skclusive.Material.Typography.Typography>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary">
                        Items with the highest number of listings on the marketplace
                    </Skclusive.Material.Typography.Typography>
                </TitleContent>
            </CardHeader>
            <CardContent>
                <Table Size="@Skclusive.Core.Component.Size.Small">
                    <TableHead>
                        <TableRow>
                            <TableCell></TableCell>
                            <TableCell>Supply</TableCell>
                            <TableCell>Demand</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        <Virtualize ItemsProvider="LoadMostSaturated" Context="item">
                            <ItemContent>
                                <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>
                                        <strong class="Text-NoWrap">@item.Supply.ToQuantityString()</strong>
                                    </TableCell>
                                    <TableCell>
                                        @if (item.Demand > 0)
                                        {
                                            <span>@item.Demand.ToQuantityString() sold yesterday</span>
                                        }
                                        else 
                                        {
                                            <span>None sold yesterday</span>
                                        }
                                    </TableCell>
                                </TableRow>
                            </ItemContent>
                            <Placeholder>
                                <TableRow>
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="/images/loading.gif" style="width:32px; height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px">Loading...</strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>—</TableCell>
                                    <TableCell>—</TableCell>
                                </TableRow>
                            </Placeholder>
                        </Virtualize>
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.H6" Color="@Skclusive.Core.Component.Color.TextPrimary">
                        Skin Creators
                    </Skclusive.Material.Typography.Typography>
                    <Skclusive.Material.Typography.Typography Variant="TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary">
                        Creators with the highest number of accepted in-game skins.
                    </Skclusive.Material.Typography.Typography>
                </TitleContent>
            </CardHeader>
            <CardContent>
                <Table Size="@Skclusive.Core.Component.Size.Small">
                    <TableHead>
                        <TableRow>
                            <TableCell></TableCell>
                            <TableCell>Items</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        <Virtualize ItemsProvider="LoadAcceptedCreators" Context="item">
                            <ItemContent>
                                <TableRow Hover OnClick="@((_) => ViewProfile(item.SteamId))">
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="@item.AvatarUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px">@item.Name</strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>
                                        <strong class="Text-NoWrap">@item.Items.ToQuantityString()</strong>
                                    </TableCell>
                                </TableRow>
                            </ItemContent>
                            <Placeholder>
                                <TableRow>
                                    <TableCell>
                                        <div style="display:flex; align-content:center; align-items:center">
                                            <img src="/images/loading.gif" style="width:32px; height:32px; margin:-4px 0px;" />
                                            <strong style="margin:8px">Loading...</strong>
                                        </div>
                                    </TableCell>
                                    <TableCell>—</TableCell>
                                </TableRow>
                            </Placeholder>
                        </Virtualize>
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    </Grid>
    
</Grid>

@code {

    private int SalesYesterday { get; set; }
    private IDictionary<string, DashboardSalesDataDTO> SalesPerDay { get; set; }
    private ChartJsLineChart SalesPerDayChartJs;
    private LineConfig SalesPerDayChart;
    
    protected override async Task OnInitializedAsync()
    {
        await RefreshSalesPerDay(30);
    }

    private void InviteDiscordBot()
    {
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", "https://discord.com/api/oauth2/authorize?client_id=761034518424715264&permissions=2048&scope=bot");
    }

    private void ViewItem(ISteamMarketListing item)
    {
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }
    
    private void ViewProfile(string steamId)
    {
        string url = $"https://steamcommunity.com/profiles/{steamId}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }
    
    private string GetItemStyles(ISteamAssetStyles item)
    {
        return $"color: {item.ForegroundColour}";
    }

    private async Task RefreshSalesPerDay(int? maxDays = null)
    {
        try
        {
            SalesYesterday = 0;
            SalesPerDay = null;
            SalesPerDayChart = null;
            StateHasChanged();
            SalesYesterday = await Http.GetFromJsonAsync<int>($"api/market/stat/salesCountYesterday");
            SalesPerDay = await Http.GetFromJsonAsync<IDictionary<string, DashboardSalesDataDTO>>($"api/market/stat/salesPerDay?maxDays={maxDays}");
            RedrawSalesPerDayChart();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'sales per day' market dashboard");
        }
    }

    private void RedrawSalesPerDayChart()
    {
        SalesPerDayChart = new LineConfig
        {
            Options = new LineOptions
            {
                Legend = new Legend
                {
                    Display = false,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new Scales
                {

                    xAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#999999"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#999999"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#999999"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#999999"
                            }
                        }
                    }
                }
            }
        };

        SalesPerDayChart.Data.Labels = SalesPerDay.Keys.ToList();

        var salesDataSet = new LineDataset<DoubleWrapper>
        {
            Label = "Market Sales",
            BackgroundColor = "#000000",
            BorderColor = "#000000",
            BorderWidth = 2,
            PointBorderWidth = 2,
            //LineTension = 0.1,
            Fill = false
        };
        if (SalesPerDay.Count >= 500)
        {
            salesDataSet.PointRadius = 1;
        }
        else if (SalesPerDay.Count >= 300)
        {
            salesDataSet.PointRadius = 2;
        }
        else if (SalesPerDay.Count >= 150)
        {
            salesDataSet.PointRadius = 3;
        }
        else
        {
            salesDataSet.PointRadius = 4;
        }
        salesDataSet.AddRange(
            SalesPerDay.Select(x => (DoubleWrapper)x.Value.Sales).ToList()
        );

        SalesPerDayChart.Data.Datasets.Add(salesDataSet);
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetSalesDTO>> LoadHotRightNow(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetSalesDTO>>($"api/market/stat/hotRightNow?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetSalesDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'hot right now' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetAgeDTO>> LoadMostRecent(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetAgeDTO>>($"api/market/stat/mostRecent?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetAgeDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most recent' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetMarketValueDTO>> LoadAllTimeHigh(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetMarketValueDTO>>($"api/market/stat/allTimeHigh?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetMarketValueDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'all time high' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetMarketValueDTO>> LoadAllTimeLow(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetMarketValueDTO>>($"api/market/stat/allTimeLow?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetMarketValueDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'all time low' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetBuyOrderValueDTO>> LoadProfitableFlips(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetBuyOrderValueDTO>>($"api/market/stat/profitableFlips?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetBuyOrderValueDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'profitable flips' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetMarketValueDTO>> LoadMostProfitable(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetMarketValueDTO>>($"api/market/stat/mostProfitable?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetMarketValueDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most profitable' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetSubscriptionsDTO>> LoadMostPopular(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetSubscriptionsDTO>>($"api/market/stat/mostPopular?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetSubscriptionsDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most popular' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetSupplyDemandDTO>> LoadMostSaturated(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetSupplyDemandDTO>>($"api/market/stat/mostSaturated?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetSupplyDemandDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most staurated' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardProfileWorkshopValueDTO>> LoadAcceptedCreators(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardProfileWorkshopValueDTO>>($"api/market/stat/acceptedCreators?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardProfileWorkshopValueDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'accepted creators' market dashboard");
            throw;
        }
    }
}
