@page "/steam/marketplace"
@using SCMM.Web.Shared.Domain.DTOs.MarketItems
@using SCMM.Web.Shared
@inject ILogger<MarketListingsPage> Logger
@inject NavigationManager Navigation
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<Title Value="Market Listings" />

<style>

    .Market-List-Container {
        max-height: calc(100vh - 150px);
        overflow: auto;
    }
</style>

<MarketListingsSearch OnSearch="@(async (x) => await RefreshItems(x))" />
@if (Items == null)
{
    <Loading />
}
else 
{
    <MarketItemsSummary Items="@Items" />
}
<!--
<Paper Class="Market-List-Container">
    <MarketListingsTable Items="@Items" NoMoreItems="@NoMoreItems" OnMoreItemsRequested="@(() => OnMoreItemsRequested())" OnItemClick="@((x) => OnItemSelectionChanged(x))"
                         OrderBy="@OrderBy" Direction="@Direction" OnSortChanged="@((orderBy, direction) => OnSortChanged(orderBy, direction))" />
</Paper>
-->

@code {

    private IList<MarketItemListDTO> Items { get; set; }

    private bool NoMoreItems { get; set; } = false;

    private string Filter { get; set; }

    private string OrderBy { set; get; } = nameof(MarketItemListDTO.Last24hrSales);

    private Sort Direction { set; get; } = Sort.Ascending;

    private int Page { get; set; } = 0;

    private int PageMore { get; set; } = 0;

    private int PageSize { get; set; } = 100;

    protected override async Task OnInitializedAsync()
    {
        OrderBy = await LocalStorage.GetItemAsync<string>("Market.SortBy");
        Direction = await LocalStorage.GetItemAsync<Sort>("Market.SortDirection");
        await RefreshItems(Filter);
    }

    private async Task OnMoreItemsRequested()
    {
        PageMore++;
        var response = await Http.GetFromJsonAsync<MarketItemListPaginatedDTO>(
            $"api/market?filter={Uri.EscapeDataString(Filter ?? String.Empty)}&sort={Uri.EscapeDataString(OrderBy)}&sortDesc={Direction == Sort.Descending}&page={PageMore}&pageSize={PageSize}"
        );
        if (response != null)
        {
            NoMoreItems = ((response.Page + 1) * response.PageSize) >= response.Total;
            if (response.Items?.Any() == true)
            {
                var items = new List<MarketItemListDTO>(Items);
                foreach (var item in response.Items)
                {
                    if (!items.Any(x => x.Id == item.Id))
                    {
                        items.Add(item);
                    }
                }
                Items = items;
                StateHasChanged();
            }
        }
    }

    private void OnSortChanged(string orderBy, Sort direction)
    {
        OrderBy = orderBy;
        Direction = direction;
        RefreshItems(Filter);
        LocalStorage.SetItemAsync<string>("Market.SortBy", OrderBy);
        LocalStorage.SetItemAsync<Sort>("Market.SortDirection", Direction);
    }

    private void OnItemSelectionChanged(MarketItemListDTO item)
    {
        //Navigation.NavigateTo($"steam/marketplace/{item.Id}");
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

    private async Task RefreshItems(string filter = null)
    {
        try
        {
            PageMore = 0;
            NoMoreItems = false;
            if (!String.IsNullOrEmpty(filter))
            {
                Filter = filter;
            }

            Items = null;
            StateHasChanged();
            var response = await Http.GetFromJsonAsync<MarketItemListPaginatedDTO>(
                $"api/market?filter={Uri.EscapeDataString(Filter ?? String.Empty)}&sort={OrderBy}&sortDesc={Direction == Sort.Descending}&page={Page}&pageSize={PageSize}"
            );
            Items = response.Items;
            NoMoreItems = ((response.Page + 1) * response.PageSize) >= response.Total;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing market items");
        }
    }

}
