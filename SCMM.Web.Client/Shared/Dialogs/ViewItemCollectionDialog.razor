@using SCMM.Web.Client.Shared.Components.Items
@using SCMM.Web.Data.Models.UI.Item
@inherits ResponsiveDialog
@inject ILogger<ViewItemCollectionDialog> Logger
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject AppState State

<MudDialog>
    <TitleContent>
        @if (Collection == null || String.IsNullOrEmpty(Collection.Name))
        {
            <MudText Typo="MudBlazor.Typo.h6">@CollectionName</MudText>
        } 
        else
        {
            <div class="d-flex">
                @if (!String.IsNullOrEmpty(Collection.CreatorAvatarUrl))
                {
                    <MudTooltip Text="@Collection.CreatorName">
                        <MudAvatar Image="@Collection.CreatorAvatarUrl" Size="MudBlazor.Size.Medium" Class="mt-2" />
                    </MudTooltip>
                }
                <div class="ml-4">
                    <MudText Typo="MudBlazor.Typo.h6" Class="no-wrap">@Collection.Name Collection</MudText>
                    <MudText Typo="MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Secondary" Class="mt-n1">
                        <span>There are <strong>@(Collection.Items?.Count ?? 0) items</strong> in this collection.</span>
                    </MudText>
                    @if(Collection.BuyNowPrice > 0)
                    {
                        <MudText Typo="MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Secondary" Class="mt-n1">
                            <span>Total cost: <strong>@State.Currency.ToPriceString(Collection.BuyNowPrice.Value)</strong></span>
                        </MudText>
                    }
                </div>
                <MudDivider FlexItem="true" />
                <MudToggleIconButton @bind-Toggled="@UseCollectionLayout" Size="Size.Medium" Class="mr-12"
                        Icon="fas fa-fw fa-tshirt" Color="@Color.Default" Title="Switch to item layout"
                        ToggledIcon="fas fa-fw fa-th" ToggledColor="@Color.Default" ToggledTitle="Switch to grid layout" />
            </div>
        }
    </TitleContent>
    <DialogContent>
        @if (Collection == null)
        {
            <Loading Message="Loading item collection..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
        } 
        else
        {
            @if (UseCollectionLayout)
            {
                <ItemCollectionLayout Items="@Collection.Items" />
            }
            else 
            {  
                <div class="py-4">
                    <MudGrid>
                        @foreach (var item in Collection.Items)
                        {
                            <MudItem xs="6" sm="4" md="3" lg="2" xl="2">
                                <ItemDescriptionSummary Item="@item" />
                            </MudItem>
                        }
                    </MudGrid>
                </div>
            }
        }
    </DialogContent>
</MudDialog>

@code {

    [Parameter]
    public string CollectionName { get; set; }
    
    [Parameter]
    public string CollectionUrl { get; set; }

    private ItemCollectionDTO Collection { get; set; }
    
    private bool UseCollectionLayout { get; set; } = false;

    protected override void OnConfigure(ResponsiveDialogOptions options)
    {
        options.FullscreenBreakpoint = MudBlazor.Breakpoint.Sm;
        options.MaxWidth = MudBlazor.MaxWidth.Large;
        options.FullWidth = true; // force item images to scale equally
        options.CloseButton = true;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            Collection = await Http.GetFromJsonWithDefaultsAsync<ItemCollectionDTO>(CollectionUrl);
            Dialog.ForceRender();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading the item collection");
            Snackbar.Add($"Unable to load item collection. {ex.Message}", MudBlazor.Severity.Error);
        }
    }

}
