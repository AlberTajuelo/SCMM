@namespace SCMM.Web.Client.Shared.Dialog
@using SCMM.Steam.Data.Models.Enums
@using SCMM.Web.Data.Models.UI.Item
@inject ILogger<ViewItemListDialog> Logger
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject DocumentManager Document

<MudDialog>
    <TitleContent>
        <MudText Typo="MudBlazor.Typo.h6">@ListName</MudText>
    </TitleContent>
    <DialogContent>
        @if (List == null)
        {
            <Loading Message="Loading item list..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
        } 
        else
        {
            <MudGrid Style="max-height:90vh; overflow-x:hidden; overflow-y:scroll">
                @foreach (var item in List.OrderBy(x => x.BuyNowPrice))
                {
                    <MudItem xs="6" sm="3" md="2">
                        <ItemDescriptionDetails Item="@item" Highlighted="@(item.Id == HighlightedItemId)" />
                    </MudItem>
                }
            </MudGrid>
        }
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter] 
    public MudDialogInstance Dialog { get; set; }
    
    [Parameter]
    public string ListName { get; set; }
    
    [Parameter]
    public string ListUrl { get; set; }

    [Parameter]
    public ulong HighlightedItemId { get; set; }

    private ItemDetailsDTO[] List { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            List = await Http.GetFromJsonAsync<ItemDetailsDTO[]>(ListUrl);
            StateHasChanged();

            if (HighlightedItemId > 0)
            {
                Document.ScrollElementIntoView("Highlighted", TimeSpan.FromSeconds(0.5));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading the item list");
            Snackbar.Add($"Unable to load item list. {ex.Message}", MudBlazor.Severity.Error);
        }
    }
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Dialog.Options.CloseButton = true;
        Dialog.Options.MaxWidth = MudBlazor.MaxWidth.Medium;
        Dialog.Options.FullWidth = true;
        Dialog.SetOptions(Dialog.Options);
    }
}
