@using SCMM.Web.Data.Models.UI.Profile.Inventory
@inject ILogger<InventoryItemsPanel> Logger
@inject HttpClient Http
@inject AppState State

@if (InventoryItems == null)
{
    @if (LoadingError != null)
    {
        <Alert Exception="@LoadingError" />
    }
    else
    {
        <Loading Message="Loading inventory items..." />
    }
}
else if (!InventoryItems.FilterBy(Filter).Any())
{
    <Alert Severity="MudBlazor.Severity.Normal" Icon="fas fa-fw fa-frown" SubTitle="No items found" Class="pa-8" />
}
else 
{
    <div class="d-flex flex-wrap flex-row align-start justify-center">
        @foreach (var item in InventoryItems.FilterBy(Filter))
        {
            @if (item.Quantity > 1)
            {
                <MudBadge Color="MudBlazor.Color.Primary" Content="@item.Quantity" Max="Int32.MaxValue" Overlap="true" Bordered="true" Class="mud-badge-overlap-extra">
                    <InventoryItemSummary Item="@item" />
                </MudBadge>
            }
            else
            {
                <InventoryItemSummary Item="@item" />
            }
        }
    </div>
}

@code {

    [Parameter]
    public string SteamId { get; set; }
    
    [Parameter]
    public string Filter { get; set; }

    private IList<ProfileInventoryItemDescriptionDTO> InventoryItems { get; set; }
    
    private Exception LoadingError { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadInventoryItems();
    }

    private async Task LoadInventoryItems()
    {
        try
        {
            Logger.LogInformation("Fetching inventory items...");
            InventoryItems = await Http.GetFromJsonWithDefaultsAsync<IList<ProfileInventoryItemDescriptionDTO>>(
                $"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/items"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory items for '{SteamId}'");
            InventoryItems = null;
            LoadingError = ex;
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }
}
