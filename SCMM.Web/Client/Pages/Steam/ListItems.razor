@page "/steam/items"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SCMM.Web.Shared.Domain.DTOs.Steam
@using SCMM.Web.Shared
@attribute [Authorize]
@inject HttpClient Http

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">

            @if (items == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <MatDataTable Items="@items" Paginator="true" StickyHeader="true" PageSize="25" >
                    <Columns>
                        <MatDataTableColumn TItem="SteamItemDTO" Header="Icon" Value="@(i => i.Description.IconUrl)" Sort="false">
                            <Template>
                                <img src="@context.Description.IconUrl" style="max-width:24px; max-height:24px" />
                            </Template>
                        </MatDataTableColumn>
                        <MatDataTableColumn TItem="SteamItemDTO" Header="Name" Value="@(i => i.Name)" Sort="true">
                            <Template>
                                @context.Name
                            </Template>
                        </MatDataTableColumn>
                        <MatDataTableColumn TItem="SteamItemDTO" Header="Supply" Value="@(i => i.Supply)" Sort="true">
                            <Template>
                                @context.Supply.ToSaturationString(@context.Demand)
                            </Template>
                        </MatDataTableColumn>
                        <MatDataTableColumn TItem="SteamItemDTO" Header="Demand" Value="@(i => i.Demand)" Sort="true">
                            <Template>
                                @context.Demand.ToSaturationString(@context.Supply)
                            </Template>
                        </MatDataTableColumn>
                        <MatDataTableColumn TItem="SteamItemDTO" Header="Lowest Price" Value="@(i => i.SellLowestPrice)" Sort="true">
                            <Template>
                                @context.Currency.ToPriceString(context.SellLowestPrice)
                            </Template>
                        </MatDataTableColumn>
                        <MatDataTableColumn TItem="SteamItemDTO" Header="Lowest Price Delta" Value="@(i => i.SellLowestDelta)" Sort="true">
                            <Template>
                                @context.Currency.ToPriceString(context.SellLowestDelta)
                            </Template>
                        </MatDataTableColumn>
                        <MatDataTableColumn TItem="SteamItemDTO" Header="Last Updated" Value="@(i => i.LastChecked)" Sort="true">
                            <Template>
                                @context.LastCheckedAgo.ToDurationString()
                            </Template>
                        </MatDataTableColumn>
                    </Columns>
                </MatDataTable>
            }

        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
            <p>Statistics...</p>
        </div>
    </div>
</div>

@code {

    private SteamItemDTO[] items;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            items = await Http.GetFromJsonAsync<SteamItemDTO[]>("SteamItems");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}
