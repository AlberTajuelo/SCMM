@namespace SCMM.Web.Client.Shared.Component
@using SCMM.Web.Shared.Domain.DTOs.Languages;
@using SCMM.Web.Shared.Domain.DTOs.Currencies;
@using SCMM.Web.Shared.Domain.DTOs.Profiles;
@using System.Timers
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@inject AppState State

@if (ComponentIsVisible)
{
<div class="Welcome-Root">
    <Grid Container Justify="@Justify.Center" Spacing="@Spacing.Two">
        <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Ten" Medium="@GridSize.Eight" Large="@GridSize.Six" ExtraLarge="@GridSize.Four">
            <div class="Welcome-Content">
                <Typography Variant="@TypographyVariant.H3" Align="@Align.Center" GutterBottom>
                    <span>SCMM</span>
                    <Typography Variant="@TypographyVariant.Subtitle1">
                        <span>Steam Community Market Manager</span>
                    </Typography>
                </Typography>
                <Paper Class="Welcome-Form">
                    <Typography class="Welcome-Description" Variant="@TypographyVariant.Body1" Align="@Align.Left" GutterBottom>
                        <span>Welcome! It looks like you are new around here. To provide you with the best experience and most relevent functionality, we need to know your public Steam ID. If you skip this step, some features will be unavailable to you. However, you can still provide this information later if you wish.</span>
                    </Typography>
                    <Grid Container Spacing="@Spacing.Two">
                        <Grid Item ExtraSmall="@GridSize.Twelve">
                            <TextField Label="Steam ID" Placeholder="your steam id" FullWidth Shrink
                                       Margin="@Margin.Dense" Variant="@TextFieldVariant.Outlined" OnChange="@OnSteamIdTextChanged">
                                <StartAdornment>
                                    <InputAdornment Position="@InputPosition.Start">
                                        <Typography Variant="@TypographyVariant.Body1" Color="@Color.TextSecondary">
                                            <span>https://steamcommunity.com/id/</span>
                                        </Typography>
                                    </InputAdornment>
                                </StartAdornment>
                                <EndAdornment>
                                    <InputAdornment Position="@InputPosition.End">
                                        @if (SteamIdIsResolving)
                                        {
                                        <CircularProgress Class="Input-End-Adornment" />
                                        }
                                    </InputAdornment>
                                </EndAdornment>
                            </TextField>
                        </Grid>
                        <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Six">
                            <TextField Label="Language" Placeholder="select your preferred language" FullWidth Shrink ReadOnly="true" Disabled="Languages == null"
                                       Margin="@Margin.Dense" Variant="@TextFieldVariant.Outlined" Value="@Language?.Name">
                                <EndAdornment>
                                    <InputAdornment Position="@InputPosition.End">
                                        @if (Languages != null)
                                        {
                                        <div class="Input-End-Adornment">
                                            <IconButton Context="_" OnClick="@HandleLanguageSelectionOpen" RootRef="@LanguageSelectionRef">
                                                <ArrowDropDownIcon />
                                            </IconButton>
                                            <Menu Open="@LanguageSelectionIsOpen"
                                                  AnchorRef="@LanguageSelectionRef"
                                                  OnClose="@HandleLanguageSelectionClose"
                                                  PaperStyle="width: 200px; max-height: 400px;"
                                                  AnchorHorizontalOrigin="@HorizontalOrigin.Right" TransformHorizontalOrigin="@HorizontalOrigin.Right">
                                                @foreach (var language in Languages)
                                                {
                                                <MenuItem @key="@language.Id"
                                                          Selected="@(language == Language)"
                                                          OnClick="@(() => HandleLanguageChange(language))">
                                                    <span>@language.Name</span>
                                                </MenuItem>
                                                }
                                            </Menu>
                                        </div>
                                        }
                                    </InputAdornment>
                                </EndAdornment>
                            </TextField>
                        </Grid>
                        <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Six">
                            <TextField Label="Currency" Placeholder="select your preferred currency" FullWidth Shrink ReadOnly="true" Disabled="Currencies == null"
                                       Margin="@Margin.Dense" Variant="@TextFieldVariant.Outlined" Value="@Currency?.Name">
                                <EndAdornment>
                                    <InputAdornment Position="@InputPosition.End">
                                        @if (Currencies != null)
                                        {
                                        <div class="Input-End-Adornment">
                                            <IconButton Context="_" OnClick="@HandleCurrencySelectionOpen" RootRef="@CurrencySelectionRef">
                                                <ArrowDropDownIcon />
                                            </IconButton>
                                            <Menu Open="@CurrencySelectionIsOpen"
                                                  AnchorRef="@CurrencySelectionRef"
                                                  OnClose="@HandleCurrencySelectionClose"
                                                  PaperStyle="width: 200px; max-height: 400px;" 
                                                  AnchorHorizontalOrigin="@HorizontalOrigin.Right" TransformHorizontalOrigin="@HorizontalOrigin.Right">
                                                @foreach (var currency in Currencies)
                                                {
                                                <MenuItem @key="@currency.Id"
                                                          Selected="@(currency == Currency)"
                                                          OnClick="@(() => HandleCurrencyChange(currency))">
                                                    <span style="min-width:30%">@currency.Symbol</span>
                                                    <span>@currency.Name</span>
                                                </MenuItem>
                                                }
                                            </Menu>
                                        </div>
                                        }
                                    </InputAdornment>
                                </EndAdornment>
                            </TextField>
                        </Grid>
                        @if (SteamProfile != null)
                        {
                        <Grid Item ExtraSmall="@GridSize.Twelve" AlignItems="@AlignItems.Center">
                            <div style="padding:8px; display:flex; align-items:center">
                                <Avatar style="width:64px; height:64px; display:flex">
                                    <img src="@SteamProfile.AvatarLargeUrl" style="width:64px; height:64px;" />
                                </Avatar>
                                <div style="display:inline-block; padding:0px 16px;">
                                    <Typography Variant="@TypographyVariant.H5">
                                        @SteamProfile.Name
                                    </Typography>
                                    <Typography Variant="@TypographyVariant.Body1" Color="@Color.TextSecondary">
                                        @(SteamProfile.ProfileId ?? SteamProfile.SteamId)
                                    </Typography>
                                </div>
                            </div>
                        </Grid>
                        }
                    </Grid>
                </Paper>
                <div style="padding:12px 0px; text-align:right">
                    @if (!LoginIsValid)
                    {
                    <Button OnClick="@(() => HandleLogin(null, Country, Language?.Name, Currency?.Name))" 
                            Variant="@ButtonVariant.Outlined" Color="@Color.TextSecondary" Disabled="@(!SkipIsValid)" style="margin:0px 4px">
                        <span>I don't have a Steam ID, skip</span>
                    </Button>
                    }
                    <Button OnClick="@(() => HandleLogin(SteamProfile, Country, Language?.Name, Currency?.Name))"
                            Variant="@ButtonVariant.Contained" Color="@Color.Primary" Disabled="@(!LoginIsValid)" style="margin: 0px 4px">
                        <span>Continue</span>
                    </Button>
                </div>
            </div>
        </Grid>
    </Grid>
</div>
}

@code { 

    public ProfileDTO SteamProfile { get; set; }

    public string SteamIdText { get; set; }

    private Timer SteamLookupTimer { get; set; }

    private bool SteamIdIsResolving { get; set; }

    public string Country { get; set; }

    public IList<LanguageListDTO> Languages { get; set; }

    public LanguageListDTO Language { get; set; }

    private IReference LanguageSelectionRef { set; get; } = new Reference();

    private bool LanguageSelectionIsOpen { set; get; }

    public IList<CurrencyListDTO> Currencies { get; set; }

    public CurrencyListDTO Currency { get; set; }

    private IReference CurrencySelectionRef { set; get; } = new Reference();

    private bool CurrencySelectionIsOpen { set; get; }

    private bool SkipIsValid => (Language != null && Currency != null);

    private bool LoginIsValid => (SteamProfile != null && Language != null && Currency != null);

    /// <summary>
    /// TODO: This is a hack to work around issues:
    /// https://github.com/dotnet/aspnetcore/issues/17926
    /// https://github.com/dotnet/aspnetcore/issues/21241
    /// </summary>
    private bool ComponentIsVisible { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SteamLookupTimer = new Timer(1000);
            SteamLookupTimer.AutoReset = false;
            SteamLookupTimer.Elapsed += async (source, e) => await HandleSteamIdLookup(SteamIdText);
            Languages = await Http.GetFromJsonAsync<LanguageListDTO[]>($"api/language");
            Currencies = await Http.GetFromJsonAsync<CurrencyListDTO[]>($"api/currency");

            await TryGuessLocality();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to initialise component: {ex.Message}");
        }
    }

    private void OnSteamIdTextChanged(ChangeEventArgs args)
    {
        SteamIdText = (string)args.Value;
        SteamLookupTimer.Stop();
        SteamLookupTimer.Start();
    }

    private async Task HandleSteamIdLookup(string steamId)
    {
        try
        {
            Console.WriteLine($"Looking up steam id: {steamId}...");
            SteamIdIsResolving = true;
            StateHasChanged();
            SteamProfile = await Http.GetFromJsonAsync<ProfileDTO>(
                $"api/profile/steam/{Uri.EscapeDataString(steamId)}/summary"
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to resolve steam id: {ex.Message}");
            SteamProfile = null;
        }
        finally
        {
            SteamIdIsResolving = false;
            StateHasChanged();
        }
    }

    private void HandleLanguageSelectionOpen()
    {
        LanguageSelectionIsOpen = true;
        StateHasChanged();
    }

    private void HandleLanguageSelectionClose(MenuCloseReason reason)
    {
        LanguageSelectionIsOpen = false;
        StateHasChanged();
    }

    private void HandleLanguageChange(LanguageListDTO language)
    {
        Language = language;
        HandleLanguageSelectionClose(MenuCloseReason.Escape);
    }

    private void HandleCurrencySelectionOpen()
    {
        CurrencySelectionIsOpen = true;
        StateHasChanged();
    }

    private void HandleCurrencySelectionClose(MenuCloseReason reason)
    {
        CurrencySelectionIsOpen = false;
        StateHasChanged();
    }

    private void HandleCurrencyChange(CurrencyListDTO currency)
    {
        Currency = currency;
        HandleCurrencySelectionClose(MenuCloseReason.Escape);
    }

    private async Task HandleLogin(ProfileDTO profile, string country, string language, string currency)
    {
        ComponentIsVisible = false;
        StateHasChanged();
        await State.LoginAsync(Http, LocalStorage, profile, country, language, currency);
    }

    public async Task TryGuessLocality()
    {
        try
        {
            var country = await Http.GetStringAsync("https://ipinfo.io/country");
            if (String.IsNullOrEmpty(country))
            {
                return;
            }

            var countryCurrencyTable = await Http.GetFromJsonAsync<IDictionary<string, string>>("/json/country-currency.json");
            if (countryCurrencyTable == null)
            {
                return;
            }

            var currencyName = countryCurrencyTable.FirstOrDefault(x => x.Key == country.Trim()).Value;
            if (String.IsNullOrEmpty(currencyName))
            {
                return;
            }

            Country = country;
            Language = Languages.FirstOrDefault();
            Currency = Currencies.FirstOrDefault(x => x.Name == currencyName);
            Console.WriteLine($"Auto-detected country: '{Country}'");
            Console.WriteLine($"Auto-detected language: '{Language?.Name}'");
            Console.WriteLine($"Auto-detected currency: '{Currency?.Name}'");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to auto-detect locality. Error: {ex.Message}");
        }
    }

}
