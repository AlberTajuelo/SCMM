@page "/skins"
@page "/items"
@using SCMM.Web.Data.Models.UI.Item
@inject ILogger<SkinsPage> Logger
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http

<PageContainer Title="Skins">

    @if (Items == null)
    {
        <Loading Message="Finding items..." />
    }
    else 
    {
        <MudGrid Spacing="2">
            @foreach (var item in Items.Items)
            {
                <MudItem xs="6" sm="4" md="3" lg="2" xl="1">
                    <MudPaper Outlined="true" Class="full-height">
                        <ItemDescriptionDetails Item="@item" />
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }

</PageContainer>

@code {

    private PaginatedResult<ItemDescriptionWithPriceDTO> Items { get; set; }

    private string Filter { get; set; }
    
    [Parameter]
    public Action<string> OnSearch { get; set; }

    private string SearchText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshItems(Filter);
    }

    private async Task RefreshItems(string filter = null)
    {
        try
        {
            if (!String.IsNullOrEmpty(filter))
            {
                Filter = filter;
            }

            Items = null;
            StateHasChanged();
            Items = await Http.GetFromJsonAsync<PaginatedResult<ItemDescriptionWithPriceDTO>>(
                $"api/item?filter={Uri.EscapeDataString(Filter ?? String.Empty)}&start=0&count=300"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing items");
        }
        finally
        {
            StateHasChanged();
        }
    }

}
