@using SCMM.Web.Data.Models.UI.Profile.Inventory
@using Syncfusion.Blazor.TreeMap
@inject ILogger<InventoryStatisticsPanel> Logger
@inject HttpClient Http
@inject AppState State

<MudGrid Spacing="0">
    
    <MudItem xs="12">
        @if (InventoryItems == null)
        {
            @if (LoadingError != null)
            {
                <Alert Exception="@LoadingError" />
            }
            else
            {
                <Loading Message="Loading item tree map..." />
            }
        }    
        @if (InventoryItems?.Any() == true)
        {
            <SfTreeMap TValue="InventoryItemTreeItem" DataSource="@DataSource" WeightValuePath="Value" ColorValuePath="Color"
                        Theme="Syncfusion.Blazor.Theme.MaterialDark" Background="transparent" Width="100%" Height="100%">
                @*
                <TreeMapTitleSettings Text="Inventory item breakdown">
                    <TreeMapTitleTextStyle Size="" Color="#eeeeee" />
                </TreeMapTitleSettings>
                *@
                <TreeMapLeafItemSettings LabelPath="Name" LabelPosition="LabelPosition.Center" Gap="10">
                </TreeMapLeafItemSettings>
                <TreeMapLegendSettings Visible="false">
                </TreeMapLegendSettings>
                <TreeMapTooltipSettings Visible="true">
                    <TooltipTemplate>
                        @{
                            var data = (context as InventoryItemTreeItem);
                        }
                        <MudPaper Outlined="true" Class="pa-2">
                            <span class="no-wrap">@(data.Name) : <strong>@State.Currency.ToPriceString(data.Value)</strong></span>
					    </MudPaper>
				    </TooltipTemplate>
                </TreeMapTooltipSettings>
            </SfTreeMap>
        }
	</MudItem>

</MudGrid>

@code {

    [Parameter]
    public string SteamId { get; set; }

    [Parameter]
    public string Filter { get; set; }
    
    [Parameter]
    public ProfileInventoryTotalsDTO InventoryTotals { get; set; }

    private IList<ProfileInventoryItemDescriptionDTO> InventoryItems { get; set; }

    private Exception LoadingError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadInventoryItems();
    }

    private async Task LoadInventoryItems()
    {
        try
        {
            Logger.LogInformation("Fetching inventory items...");
            InventoryItems = await Http.GetFromJsonWithDefaultsAsync<IList<ProfileInventoryItemDescriptionDTO>>(
                $"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/items"
            );
            DataSource = InventoryItems.Select(x => new InventoryItemTreeItem()
            {
                Name = $"{x.Name} {(x.Quantity > 1 ? $"({x.Quantity})" : String.Empty)}",
                Value = (x.BuyNowPrice ?? 0) * x.Quantity,
                Color = x.DominantColour ?? x.ForegroundColour
            }).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory items for '{SteamId}'");
            InventoryItems = null;
            LoadingError = ex;
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

    public class InventoryItemTreeItem
    {
        public string Name { get; set; }
        public long Value { get; set; }
        public string Color {  get; set; }
    }

    public List<InventoryItemTreeItem> DataSource = new List<InventoryItemTreeItem>();

}