@inject ILogger<App> Logger
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject UpdateManager UpdateManager
@inject AppState AppState
@inject HttpClient Http

<AppProviders />
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        @if (State != null)
        {
            <CascadingValue Value="@routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(AppLayout)" />
                <FocusOnNavigate RouteData="@routeData" Selector="h1" />
            </CascadingValue>
        }
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(AppLayout)">
            <Alert Title="Not Found (404)" SubTitle="Looks like that doesn't exist anymore, check that the URL is correct, then try again." />
        </LayoutView>
    </NotFound>
</Router>

@code {

    private AppState State { get; set; }

    private DotNetObjectReference<App> Instance { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            // Check if there are pending updates
            await UpdateManager.SetCallbackAsync(Instance = DotNetObjectReference.Create(this));
            if (await UpdateManager.IsUpdatePendingAsync())
            {
                ShowUpdateNotification();
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to check for app updates");
        }

        try
        {
            // Load the application state
            await AppState.ReadFromStorageAsync();
            await AppState.RefreshAsync(Http);

            State = AppState;
            State.Changed += (s, e) => StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialise app state");
            Snackbar.Add($"Unable to load application state. {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    [JSInvokable]
    public void ShowUpdateNotification()
    {
        Snackbar.Add("<strong>A new update for SCMM is now available.</strong><br/><a class='mud-link mud-link-underline-hover mud-dark-text' href='https://discord.gg/Du42Khqe55' target='_blank'>Click here</a> to see what has changed.", MudBlazor.Severity.Success, config =>
        {
            config.RequireInteraction = true;
            config.CloseAfterNavigation = false;
            config.ShowCloseIcon = false;
            config.Icon = "fas fa-arrow-circle-up update-notification-icon";
            config.Action = "Update";
            config.ActionColor = MudBlazor.Color.Dark;
            config.ActionVariant = MudBlazor.Variant.Outlined;
            config.Onclick = async snackbar =>
            {
                await UpdateManager.ApplyPendingUpdateAsync();
            };
        });
    }

}
