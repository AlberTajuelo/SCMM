@using SCMM.Web.Data.Models.UI.Profile.Inventory
@inject AppState State

@if(!State.Is(Profile?.SteamId))
{
    <MudItem xs="12" sm="6" lg="4" xl="2">
        <div class="d-flex flex-row justify-start align-center">
            @if (Profile == null)
            {
                <MudSkeleton SkeletonType="MudBlazor.SkeletonType.Circle" Width="48px" Height="48px" Class="mud-skeleton-light" />
            }
            else
            {
                <MudAvatar Image="@Profile.AvatarUrl" />
            }
            <div class="ml-2">
                @if (Profile == null)
                {
                    <MudSkeleton Width="12em" Class="mud-skeleton-light" />
                    <MudSkeleton Width="8em" Class="mud-skeleton-light" />
                }
                else
                {
                    <MudText Typo="MudBlazor.Typo.body2">
                        <span>@Profile.Name</span>
                    </MudText>
                    <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                        <span>@(String.IsNullOrEmpty(Profile.ProfileId) ? Profile.SteamId : Profile.ProfileId)</span>
                    </MudText>
                }
            </div>
        </div>
    </MudItem>
}

<MudItem xs="12" sm="6" lg="4" xl="2">
    <MudTooltip Text="The total number of items in this inventory">
        <div class="d-flex flex-row justify-start align-center">
            <MudAvatar Class="mud-info">
                <i class="fas fa-fw fa-th"></i>
            </MudAvatar>
            <div class="ml-2">
                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary">Inventory Items</MudText>
                <MudText Typo="MudBlazor.Typo.subtitle2">
                    @if (InventoryTotal == null)
                    {
                        <MudSkeleton Width="50%" Class="mud-skeleton-light" />
                    }
                    else 
                    {
                        @InventoryTotal.Items.ToQuantityString()
                    }
                </MudText>
            </div>
        </div>
    </MudTooltip>
</MudItem>

@if (InventoryTotal == null || InventoryTotal?.MarketValue > 0)
{
    <MudItem xs="12" sm="6" lg="4" xl="2">
        <MudTooltip Text="How much people have recently paid for the items in this inventory, based on the most recent median sales price of each item">
            <div class="d-flex flex-row justify-start align-center">
                <MudAvatar Class="mud-info">
                    <i class="fas fa-fw fa-balance-scale-left"></i>
                </MudAvatar>
                <div class="ml-2">
                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary">Market Value</MudText>
                    <MudText Typo="MudBlazor.Typo.subtitle2">
                        @if (InventoryTotal == null)
                        {
                            <MudSkeleton Class="mud-skeleton-light" />
                        }
                        else 
                        {
                            <span>@State.Currency.ToPriceString(InventoryTotal.MarketValue)</span>
                            <small class="@($"ml-1 {(InventoryTotal.MarketMovementValue > 0 ? "mud-success-text" : "mud-error-text")}")">
                                <i class="@($"fas fa-fw {(InventoryTotal.MarketMovementValue > 0 ? "fa-arrow-up" : "fa-arrow-down")}")"></i>
                                @switch(@State.Profile.InventoryValueMovementDisplay)
                                {
                                    case InventoryValueMovementDisplayType.Price:
                                        <span>@State.Currency.ToPriceString(InventoryTotal.MarketMovementValue, dense: true) @((DateTimeOffset.Now - InventoryTotal.MarketMovementTime).ToDurationString(prefix: "in the last", maxGranularity: 1))</span>
                                        break;
                                    case InventoryValueMovementDisplayType.Percentage:
                                        <span>@InventoryTotal.MarketMovementValue.ToPercentageString(InventoryTotal.MarketValue, decimals: 1) @((DateTimeOffset.Now - InventoryTotal.MarketMovementTime).ToDurationString(prefix: "in the last", maxGranularity: 1))</span>
                                        break;
                                }
                            </small>
                        }
                    </MudText>
                </div>
            </div>
        </MudTooltip>
    </MudItem>
}

@if (InventoryTotal == null || InventoryTotal?.Invested > 0)
{
    <MudItem xs="12" sm="6" lg="4" xl="2">
        <MudTooltip Text="The total amount of money spent to purchase this inventory">
            <div class="d-flex flex-row justify-start align-center">
                <MudAvatar Class="mud-error">
                    <i class="fas fa-fw fa-dollar-sign"></i>
                </MudAvatar>
                <div class="ml-2">
                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary">Investment Costs</MudText>
                    <MudText Typo="MudBlazor.Typo.subtitle2">
                        @if (InventoryTotal == null)
                        {
                            <MudSkeleton Class="mud-skeleton-light" />
                        }
                        else 
                        {
                            @State.Currency.ToPriceString(InventoryTotal.Invested.Value)
                        }
                    </MudText>
                </div>
            </div>
        </MudTooltip>
    </MudItem>
}

@if (InventoryTotal == null || (InventoryTotal?.InvestmentNetReturn != null && InventoryTotal?.InvestmentNetReturn != 0))
{
    <MudItem xs="12" sm="6" lg="4" xl="2">
        <MudTooltip Text="The total amount of investment gains and losses for this inventory. Calculated by subtracting the cost of purchasing all items (where purchase price is known) from the last median sales price">
            <div class="d-flex flex-row justify-start align-center">
                <MudAvatar Class="@(InventoryTotal?.InvestmentNetReturn >= 0 ? "mud-success" : "mud-error")">
                    @if (InventoryTotal == null)
                    {
                        <MudSkeleton SkeletonType="MudBlazor.SkeletonType.Circle" Class="mud-skeleton-light" />
                    }
                    else
                    {
                        <i class="fas fa-fw fa-hand-holding-usd"></i>
                    }
                </MudAvatar>
                <div class="ml-2">
                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary">
                        @if (InventoryTotal == null)
                        {
                            <MudSkeleton Width="8em" Class="mud-skeleton-light" />
                        }
                        else
                        {
                            <span>Investment Returns</span>
                        }
                    </MudText>
                    <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Default">
                        @if (InventoryTotal == null)
                        {
                            <MudSkeleton Width="12em" Class="mud-skeleton-light" />
                        }
                        else 
                        {
                            <span>@State.Currency.ToPriceString(InventoryTotal.InvestmentNetReturn.Value)</span>
                            @if (InventoryTotal.InvestmentGains > 0)
                            {
                                <small class="mud-success-text ml-1">
                                    <i class="fas fa-fw fa-arrow-up"></i> 
                                    <span>@State.Currency.ToPriceString(InventoryTotal.InvestmentGains.Value, dense: true) gains</span>
                                </small>
                            }
                            @if (InventoryTotal.InvestmentLosses > 0)
                            {
                                <small class="mud-error-text ml-1">
                                    <i class="fas fa-fw fa-arrow-down"></i> 
                                    <span>@State.Currency.ToPriceString(InventoryTotal.InvestmentLosses.Value, dense: true) losses</span>
                                </small>
                            }
                        }
                    </MudText>
                </div>
            </div>
        </MudTooltip>
    </MudItem>
}

@if (Profile != null && State.Is(Profile.SteamId))
{
    <MudItem xs="12" sm="6" lg="4" xl="2" Class="d-flex flex-row justify-start align-center">
        <MudTooltip Text="Fetch the latest inventory data from your Steam account">
            <MudButton Variant="MudBlazor.Variant.Outlined" Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Secondary" OnClick="@SynchroniseInventory">
                Refresh
            </MudButton>
        </MudTooltip>
        <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="ml-2 no-wrap">
            @if (@Math.Floor((DateTimeOffset.Now - (Profile.LastUpdatedInventoryOn ?? DateTimeOffset.Now)).TotalHours) > 0)
            {
                <span>Last refreshed @((DateTimeOffset.Now - (Profile.LastUpdatedInventoryOn ?? DateTimeOffset.Now)).ToDurationString(suffix: "ago", zero: "just now", maxGranularity: 1))</span>
            }
            else
            {
                <span>Last refreshed a few moments ago</span>
            }
        </MudText>
    </MudItem>
}

@code {

    [Parameter]
    public ProfileDetailedDTO Profile { get; set; }
    
    [Parameter]
    public ProfileInventoryTotalsDTO InventoryTotal { get; set; }

    [Parameter]
    public EventCallback SynchroniseInventory { get; set; }

}