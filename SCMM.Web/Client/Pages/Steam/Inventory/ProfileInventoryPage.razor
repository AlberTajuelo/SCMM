@page "/steam/inventory/{SteamId}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SCMM.Web.Shared.Domain.DTOs.InventoryItems
@using SCMM.Web.Shared
@namespace SCMM.Web.Client.Pages.Steam.Inventory
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AppState State

<style>
    
    .Search-Text {
        width: 100%;
        margin-bottom: 16px;
    }

    .Search-Text input {
        padding: 8px;
    }

    .Inventory-List-Container {
        max-height: calc(100vh - 235px);
        overflow: auto;
    }

</style>

@if (Profile == null)
{
    @if (ProfileNotFound)
    {
        <NotFound />
    }
    else
    {
        <Loading />
    }
}
else
{
    <DocumentTitle Title="@($"Inventory - {Profile.Name}")" />
    <Grid Container Spacing="@Spacing.Two">
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Assets">
                <Icon>
                    <SwapBagIcon />
                </Icon>
                <Total>
                    @InventoryTotal.TotalItems
                </Total>
            </InventoryTotalCard>
        </Grid>
        @if (InventoryTotal?.TotalInvested > 0)
        {
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Total Investment" IconClass="Background-Error">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @State.Currency.ToPriceString(InventoryTotal.TotalInvested)
                </Total>
            </InventoryTotalCard>
        </Grid>
        }
        @if (InventoryTotal?.TotalMarketValue > 0)
        {
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Total Market Value" IconClass="Background-Info">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @State.Currency.ToPriceString(InventoryTotal.TotalMarketValue)
                    <Typography Variant="@TypographyVariant.Body2">
                        @if (InventoryTotal.TotalMarket24hrMovement > 0)
                        {
                            <span class="Text-Success">
                                🡱 @State.Currency.ToPriceString(InventoryTotal.TotalMarket24hrMovement) today
                            </span>
                        }
                        @if (InventoryTotal.TotalMarket24hrMovement < 0)
                        {
                            <span class="Text-Error">
                                🡳 @State.Currency.ToPriceString(InventoryTotal.TotalMarket24hrMovement) today
                            </span>
                        }
                    </Typography>
                </Total>
            </InventoryTotalCard>
        </Grid>
        }
        @if (InventoryTotal?.TotalResellValue > 0)
        {
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Optimistic Resell Value" IconClass="Background-Success">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @State.Currency.ToPriceString(InventoryTotal.TotalResellValue)
                </Total>
            </InventoryTotalCard>
        </Grid>
        }
        @if (InventoryTotal?.TotalResellProfit > 0)
        {
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Optimistic Resell Profit" IconClass="Background-Success">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @State.Currency.ToPriceString(InventoryTotal.TotalResellProfit)
                </Total>
            </InventoryTotalCard>
        </Grid>
        }
        @if (Profile != null && (State.ProfileId == Profile?.SteamId || State.ProfileId == Profile?.ProfileId))
        {
        <Grid ExtraSmall="@GridSize.Two" Style="padding:8px">
            <Typography Variant="@TypographyVariant.Body2" Color="@Color.TextSecondary" GutterBottom>
                Last synchronised @Math.Floor((DateTimeOffset.Now - (Profile.LastUpdatedInventoryOn ?? DateTimeOffset.Now)).TotalHours) hour(s) ago
            </Typography>
            <Button OnClick="@(() => SyncInventory())"
                    Variant="@ButtonVariant.Outlined" Color="@Color.TextSecondary">
                Synchronise
            </Button>
        </Grid>
        }
        else if(Profile != null)
        {
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryProfileCard Profile="@Profile" />
        </Grid>
        }
        <Grid Item ExtraSmall="@GridSize.Twelve">
            <Tabs Value="@SelectedInventoryPanel"
                  OnChange="@OnSelectedInventoryPanelChanged"
                  IndicatorColor="@Color.Primary"
                  TextColor="@Color.Primary"
                  Variant="@TabsVariant.FullWidth">
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="0" Label="Summary" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="1" Label="Return on investment" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="2" Label="Market activity" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="3" Label="Market performance" Wrapped />
            </Tabs>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab" Value="@SelectedInventoryPanel" Index="0">
                @if ((int)SelectedInventoryPanel == 0 && InventoryItemsSummary != null)
                {
                    <InventoryItemsSummary Items="@InventoryItemsSummary" />
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab" Value="@SelectedInventoryPanel" Index="1">
                @if ((int)SelectedInventoryPanel == 1 && InventoryItemsDetailed != null)
                {
                    <Paper Class="Inventory-List-Container">
                        <InventoryItemsTable Items="@InventoryItemsDetailed" />
                    </Paper>
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab"  Value="@SelectedInventoryPanel" Index="2">
                @if ((int)SelectedInventoryPanel == 2)
                {
                    <InventoryItemsActivity />
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab"  Value="@SelectedInventoryPanel" Index="3">
                @if ((int)SelectedInventoryPanel == 3 && TotalHistoryChart != null)
                {
                    <ChartJsLineChart @ref="TotalHistoryChartJs" Config="@TotalHistoryChart" />
                }
            </TabPanel>
        </Grid>
    </Grid>
}

@code {

    [Parameter]
    public string SteamId { get; set; }

    [Parameter]
    public bool Sync { get; set; } = false;

    private ProfileInventoryDetailsDTO Profile { get; set; }

    private bool ProfileNotFound { get; set; }

    private object SelectedInventoryPanel { get; set; } = 0;

    private IDictionary<InventoryMarketItemDTO, int> InventoryItemsSummary { get; set; }

    private InventoryItemListDTO[] InventoryItemsDetailed { get; set; }

    private ProfileInventoryTotalsDTO InventoryTotal { get; set; }

    private ProfileInventoryPerformanceDTO InventoryPerformance { get; set; }

    private ChartJsLineChart TotalHistoryChartJs;
    private LineConfig TotalHistoryChart;

    protected override async Task OnInitializedAsync()
    {
        SelectedInventoryPanel = await LocalStorage.GetItemAsync<int>("Inventory.SelectedTab");
        await RefreshInventory();
    }

    private async Task RefreshInventory()
    {
        try
        {
            Profile = await Http.GetFromJsonAsync<ProfileInventoryDetailsDTO>($"api/inventory/{SteamId}?sync={Sync}");
            ProfileNotFound = (Profile == null);
            InventoryItemsSummary = null;
            InventoryItemsDetailed = null;
            InventoryTotal = await Http.GetFromJsonAsync<ProfileInventoryTotalsDTO>($"api/inventory/{SteamId}/total");
            InventoryPerformance = await Http.GetFromJsonAsync<ProfileInventoryPerformanceDTO>($"api/inventory/{SteamId}/performance");
            TotalHistoryChartJs = null;
            TotalHistoryChart = null;
            if (Profile != null)
            {
                OnSelectedInventoryPanelChanged(SelectedInventoryPanel);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            ProfileNotFound = true;
        }
    }

    private async Task SyncInventory()
    {
        Sync = true;
        Profile = null;
        StateHasChanged();
        await RefreshInventory();
        StateHasChanged();
    }

    private void ViewItem(InventoryItemListDTO item)
    {
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

    private async Task OnSelectedInventoryPanelChanged(object value)
    {
        SelectedInventoryPanel = value;
        await LocalStorage.SetItemAsync<int>("Inventory.SelectedTab", (int) value);
        switch (SelectedInventoryPanel)
        {
            case 0: RecalculateItemsSummary();  break;
            case 1: RecalculateItemsDetailed();  break;
            case 2: break;
            case 3: RedrawTotalHistoryChart(); break;
        }
        StateHasChanged();
    }

    private void RecalculateItemsSummary()
    {
        var inventoryItems = Profile?.InventoryItems;
        if (inventoryItems?.Any() == true)
        {
            InventoryItemsSummary = new Dictionary<InventoryMarketItemDTO, int>();
            var marketItems = inventoryItems
                .Select(x => x.MarketItem)
                .Where(x => x != null)
                .OrderByDescending(x => x.Last1hrValue);

            foreach (var marketItem in marketItems)
            {
                if (!InventoryItemsSummary.Any(x => x.Key.SteamId == marketItem.SteamId))
                {
                    InventoryItemsSummary[marketItem] = inventoryItems
                        .Where(x => x.MarketItem?.SteamId == marketItem.SteamId)
                        .Sum(x => x.Quantity);
                }
            }
        }
        else
        {
            InventoryItemsSummary = null;
        }
    }

    private void RecalculateItemsDetailed()
    {
        InventoryItemsDetailed = Profile?.InventoryItems?.OrderBy(x => x.Name)?.ToArray();
    }

    private void RedrawTotalHistoryChart()
    {
        TotalHistoryChart = new LineConfig
        {
            Options = new LineOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new Scales
                {

                    xAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        TotalHistoryChart.Data.Labels = InventoryPerformance.ValueHistoryGraph.Keys.ToList();

        if (InventoryPerformance.ProfitHistoryGraph != null && InventoryTotal.TotalResellProfit > 0)
        {
            var totalProfitDataSet = new LineDataset<DoubleWrapper>
            {
                Label = "Resell Profit",
                BackgroundColor = "#388e3c",
                BorderColor = "#1b5e20",
                BorderWidth = 1,
                PointBorderWidth = 2,
                PointRadius = 8,
                LineTension = 0.1,
                Fill = true
            };
            totalProfitDataSet.AddRange(
                InventoryPerformance.ProfitHistoryGraph.Values.Select(x => (DoubleWrapper)x).ToList()
            );
            TotalHistoryChart.Data.Datasets.Add(totalProfitDataSet);
        }

        if (InventoryPerformance.ValueHistoryGraph != null)
        {
            var totalValueDataSet = new LineDataset<DoubleWrapper>
            {
                Label = "Market Value",
                BackgroundColor = "#1976d2",
                BorderColor = "#0d47a1",
                BorderWidth = 1,
                PointBorderWidth = 2,
                PointRadius = 8,
                LineTension = 0.1,
                Fill = true
            };
            totalValueDataSet.AddRange(
                InventoryPerformance.ValueHistoryGraph.Values.Select(x => (DoubleWrapper)x).ToList()
            );
            TotalHistoryChart.Data.Datasets.Add(totalValueDataSet);
        }
    }
}
