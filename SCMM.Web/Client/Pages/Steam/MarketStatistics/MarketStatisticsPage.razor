@page "/steam/marketstatistics"
@using SCMM.Web.Shared.Domain.DTOs.MarketItems
@using SCMM.Web.Shared
@using SCMM.Steam.Shared
@using Web.Shared.Domain.DTOs.Dashboard
@using Web.Shared.Domain.DTOs.InventoryItems
@inject ILogger<MarketStatisticsPage> Logger
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AppState State

<style>

    .Dashboard-Card {
        height:100%;
    }

</style>

<Title Value="Market Statistics" />
<Grid Container Spacing="@Spacing.Two">

    <Grid Item ExtraSmall="@GridSize.Twelve">
        <Alert Severity="@Severity.Info" Variant="@AlertVariant.Outlined">
            <IconContent>
                <DiscordBotIcon />
            </IconContent>
            <ChildContent>
                <AlertTitle>SCMM Discord Bot</AlertTitle>
                <span>Beep Boop! Did you know I can join your Discord community to provide tools and alerts for the Steam community marketplace? Click the <a @onclick="InviteDiscordBot">invite button</a> to get started.</span>
            </ChildContent>
            <ActionContent>
                <Button Color="@Color.Inherit" Size="@Size.Large"
                        OnClick="@(() => InviteDiscordBot())">
                    INVITE
                </Button>
        </ActionContent>
        </Alert>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" ExtraLarge="@GridSize.Six">    
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Grid Container>
                        <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Three">
                            <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                                Market Sales
                            </Typography>
                            <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                                Total number of sales per day
                            </Typography>
                        </Grid>
                        <Grid Item Container ExtraSmall="@GridSize.Twelve" Small="@GridSize.Nine" Style="flex-direction: row-reverse">
                            <Button OnClick="@(() => RefreshSalesPerDay(null))" Color="@Color.TextSecondary">
                                All
                            </Button>
                            <Divider Orientation="@Orientation.Vertical" />
                            <Button OnClick="@(() => RefreshSalesPerDay(365))" Color="@Color.TextSecondary">
                                12m
                            </Button>
                            <Divider Orientation="@Orientation.Vertical" />
                            <Button OnClick="@(() => RefreshSalesPerDay(182))" Color="@Color.TextSecondary">
                                6m
                            </Button>
                            <Divider Orientation="@Orientation.Vertical" />
                            <Button OnClick="@(() => RefreshSalesPerDay(30))" Color="@Color.TextSecondary">
                                1m
                            </Button>
                            @if (SalesToday > 0)
                            {
                                <Divider Orientation="@Orientation.Vertical" />
                                <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary" Style="display: flex; align-items: center; align-content: center; padding: 8px 16px;">
                                    <strong>@SalesToday.ToQuantityString() sales today</strong>
                                </Typography>
                            }
                        </Grid>
                    </Grid>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (SalesPerDayChart == null)
                {
                    <Loading />
                }
                else
                {
                    <ChartJsLineChart @ref="SalesPerDayChartJs" Config="@SalesPerDayChart" />
                }
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        Hot Right Now
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Items with the highest number of sales in the past 24hrs.
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (HotRightNow == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableBody>
                            @if (!HotRightNow.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in HotRightNow)
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">@item.Last24hrSales.ToSalesActivityString()</span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        Most Recent
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Lowest market age.
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostRecent == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableBody>
                            @if (!MostRecent.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in MostRecent)
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">@item.MarketAge</span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        📈 Good Time to Sell
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Largest <strong>positive</strong> gap in buy-now vs recent market value. If you have alot of stock, consider selling for quick gains.
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (GoodTimeToSell == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableBody>
                            @if (!GoodTimeToSell.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in GoodTimeToSell)
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">@item.Currency.ToPriceString(item.BuyNowPrice) (@Math.Floor(((decimal)item.Last1hrValue / item.Last48hrValue) * 100)%)</span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        📉 Good Time to Buy
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Largest <strong>negative</strong> gap in buy-now vs recent market value. Prime opportunity to add to your collection.
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (GoodTimeToBuy == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableBody>
                            @if (!GoodTimeToBuy.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in GoodTimeToBuy)
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">@item.Currency.ToPriceString(item.BuyNowPrice) (@Math.Floor(((decimal)item.Last48hrValue / item.Last1hrValue) * 100)%)</span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        <img src="/images/stonks-guy.png" style="width:24px; margin-right: -10px;" />
                        📈 Stonking
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Currently at an all-time high value.
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (AllTimeHigh == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableBody>
                            @if (!AllTimeHigh.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in AllTimeHigh)
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">@item.Currency.ToPriceString(item.Last1hrValue)</span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        <img src="/images/stonks-guy.png" style="width:24px; margin-right: -10px;" />
                        📉 Crashing
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Currently at an all-time low value.
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (AllTimeLow == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableBody>
                            @if (!AllTimeLow.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in AllTimeLow)
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">@item.Currency.ToPriceString(item.Last1hrValue)</span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        Most Saturated
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Highest supply vs. demand ratio.
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostSaturated == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableHead>
                            <TableRow>
                                <TableCell></TableCell>
                                <TableCell>Supply</TableCell>
                                <TableCell>Demand</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            @if (!MostSaturated.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in MostSaturated)
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <strong class="Text-NoWrap">@item.Supply.ToQuantityString()</strong>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">@item.Demand.ToQuantityString()</span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        Most Starved
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Highest demand vs. supply ratio.
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostStarved == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableHead>
                            <TableRow>
                                <TableCell></TableCell>
                                <TableCell>Demand</TableCell>
                                <TableCell>Supply</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            @if (!MostStarved.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in MostStarved)
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <strong class="Text-NoWrap">@item.Demand.ToQuantityString()</strong>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">@item.Supply.ToQuantityString()</span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        Most Common
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Highest number of unique owners (subscribers).
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostCommon == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableBody>
                            @if (!MostCommon.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in MostCommon.Where(x => x.Subscriptions != null))
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">
                                                <i class="fas fa-fw fa-user"></i>
                                                @item.Subscriptions.ToQuantityString()
                                            </span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        Most Rare
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Lowest number of unique owners (subscribers).
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostRare == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableBody>
                            @if (!MostRare.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in MostRare.Where(x => x.Subscriptions != null))
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">
                                                <i class="fas fa-fw fa-user"></i>
                                                @item.Subscriptions.Value.ToQuantityString()
                                            </span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        Most Profitable
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Highest all-time profitability (against day-1 value).
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostProfitable == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableBody>
                            @if (!MostProfitable.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in MostProfitable)
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">@item.Currency.ToPriceString(item.Last1hrValue)</span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        Profitable Flips
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Largest gap in asking price vs buy now price for items with a upward trending average price. Profitable if you can buy low and sell high after the seven day cooldown.
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (ProfitableFlips == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableHead>
                            <TableRow>
                                <TableCell></TableCell>
                                <TableCell>Buy At</TableCell>
                                <TableCell>Profit</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            @if (!ProfitableFlips.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in ProfitableFlips)
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">@item.Currency.ToPriceString(item.BuyAskingPrice)</span>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap Text-Success">@item.Currency.ToPriceString(item.BuyNowPrice - item.BuyAskingPrice - ((long)Math.Floor(Math.Max(item.BuyNowPrice * SteamEconomyHelper.SteamFeeMultiplier, 1))))</span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card Class="Dashboard-Card">
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.TextPrimary">
                        Worst Crashes
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Highest <strong>negative</strong> value swing (all-time high vs current).
                    </Typography>
                </TitleContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (BiggestCrashes == null)
                {
                    <Loading />
                }
                else
                {
                    <Table Size="@Size.Small">
                        <TableHead>
                            <TableRow>
                                <TableCell></TableCell>
                                <TableCell>Value</TableCell>
                                <TableCell>Swing</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            @if (!BiggestCrashes.Any())
                            {
                                <Error Title="" SubTitle="There's nothing here." />
                            }
                            else 
                            {
                                @foreach (var item in BiggestCrashes)
                                {
                                    <TableRow Hover OnClick="@((_) => ViewItem(item))">
                                        <TableCell>
                                            <div style="display:flex; align-content:center; align-items:center">
                                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                                                <strong style="margin:8px"><span style="@GetItemStyles(item)">@item.Name</span></strong>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-NoWrap">@item.Currency.ToPriceString(item.Last1hrValue)</span>
                                        </TableCell>
                                        <TableCell>
                                            <span class="Text-Error Text-NoWrap">🡳 @item.Currency.ToPriceString(Math.Abs(item.Last1hrValue - item.AllTimeHighestValue))</span>
                                        </TableCell>
                                    </TableRow>
                                }
                            }
                        </TableBody>
                    </Table>
                }
            </CardContent>
        </Card>
    </Grid>

</Grid>

@code {

    private int SalesToday { get; set; }
    private IDictionary<string, DashboardSalesDataDTO> SalesPerDay { get; set; }
    private ChartJsLineChart SalesPerDayChartJs;
    private LineConfig SalesPerDayChart;


    private MarketItemListDTO[] GoodTimeToBuy { get; set; }
    private MarketItemListDTO[] GoodTimeToSell { get; set; }
    private MarketItemListDTO[] AllTimeLow { get; set; }
    private MarketItemListDTO[] AllTimeHigh { get; set; }
    private MarketItemListDTO[] MostProfitable { get; set; }
    private MarketItemListDTO[] ProfitableFlips { get; set; }
    private MarketItemListDTO[] HotRightNow { get; set; }
    private MarketItemListDTO[] MostSaturated { get; set; }
    private MarketItemListDTO[] MostStarved { get; set; }
    private MarketItemListDTO[] MostRecent { get; set; }
    private DashboardAssetDescriptionDTO[] MostCommon { get; set; }
    private MarketItemListDTO[] MostRare { get; set; }
    private MarketItemListDTO[] BiggestCrashes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshSalesPerDay(30);
        await RefreshGoodTimeToBuy();
        await RefreshGoodTimeToSell();
        await RefreshAllTimeLow();
        await RefreshAllTimeHigh();
        await RefreshMostProfitable();
        await RefreshProfitableFlips();
        await RefreshHotRightNow();
        await RefreshMostSaturated();
        await RefreshMostStarved();
        await RefreshMostRecent();
        await RefreshMostCommon();
        await RefreshMostRare();
        await RefreshBiggestCrashes();
    }

    private void InviteDiscordBot()
    {
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", "https://discord.com/api/oauth2/authorize?client_id=761034518424715264&permissions=2048&scope=bot");
    }

    private void ViewItem(ISteamMarketListing item)
    {
        //Navigation.NavigateTo($"steam/marketplace/{item.Id}");
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }
    
    private string GetItemStyles(ISteamAssetStyles item)
    {
        return $"color: {item.ForegroundColour}";
    }

    private async Task RefreshSalesPerDay(int? maxDays = null)
    {
        try
        {
            SalesToday = 0;
            SalesPerDay = null;
            SalesPerDayChart = null;
            StateHasChanged();
            SalesToday = await Http.GetFromJsonAsync<int>($"api/market/dashboard/salesToday");
            SalesPerDay = await Http.GetFromJsonAsync<IDictionary<string, DashboardSalesDataDTO>>($"api/market/dashboard/salesPerDay?maxDays={maxDays}");
            RedrawSalesPerDayChart();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'sales per day' market dashboard");
        }
    }

    private void RedrawSalesPerDayChart()
    {
        SalesPerDayChart = new LineConfig
        {
            Options = new LineOptions
            {
                Legend = new Legend
                {
                    Display = false,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new Scales
                {

                    xAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#999999"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#999999"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#999999"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#999999"
                            }
                        }
                    }
                }
            }
        };

        SalesPerDayChart.Data.Labels = SalesPerDay.Keys.ToList();

        var salesDataSet = new LineDataset<DoubleWrapper>
        {
            Label = "Market Sales",
            BackgroundColor = "#000000",
            BorderColor = "#000000",
            BorderWidth = 2,
            PointBorderWidth = 2,
            //LineTension = 0.1,
            Fill = false
        };
        if (SalesPerDay.Count >= 500)
        {
            salesDataSet.PointRadius = 1;
        }
        else if (SalesPerDay.Count >= 300)
        {
            salesDataSet.PointRadius = 2;
        }
        else if (SalesPerDay.Count >= 150)
        {
            salesDataSet.PointRadius = 3;
        }
        else
        {
            salesDataSet.PointRadius = 4;
        }
        salesDataSet.AddRange(
            SalesPerDay.Select(x => (DoubleWrapper)x.Value.Sales).ToList()
        );

        SalesPerDayChart.Data.Datasets.Add(salesDataSet);
    }

    private async Task RefreshProfitableFlips()
    {
        try
        {
            ProfitableFlips = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/profitableFlips");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'profitable flips' market dashboard");
        }
    }

    private async Task RefreshHotRightNow()
    {
        try
        {
            HotRightNow = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/hotRightNow");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'hot right now' market dashboard");
        }
    }

    private async Task RefreshAllTimeLow()
    {
        try
        {
            AllTimeLow = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/allTimeLow");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'all time low' market dashboard");
        }
    }

    private async Task RefreshAllTimeHigh()
    {
        try
        {
            AllTimeHigh = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/allTimeHigh");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'all time high' market dashboard");
        }
    }

    private async Task RefreshGoodTimeToBuy()
    {
        try
        {
            GoodTimeToBuy = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/goodTimeToBuy");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'good time to buy' market dashboard");
        }
    }

    private async Task RefreshGoodTimeToSell()
    {
        try
        {
            GoodTimeToSell = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/goodTimeToSell");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'good time to sell' market dashboard");
        }
    }

    private async Task RefreshMostProfitable()
    {
        try
        {
            MostProfitable = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/mostProfitable");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most profitable' market dashboard");
        }
    }

    private async Task RefreshMostSaturated()
    {
        try
        {
            MostSaturated = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/mostSaturated");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most saturated' market dashboard");
        }
    }

    private async Task RefreshMostStarved()
    {
        try
        {
            MostStarved = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/mostStarved");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most starved' market dashboard");
        }
    }

    private async Task RefreshMostRecent()
    {
        try
        {
            MostRecent = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/mostRecent");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most recent' market dashboard");
        }
    }

    private async Task RefreshMostCommon()
    {
        try
        {
            MostCommon = await Http.GetFromJsonAsync<DashboardAssetDescriptionDTO[]>($"api/market/dashboard/mostCommon");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most common' market dashboard");
        }
    }

    private async Task RefreshMostRare()
    {
        try
        {
            MostRare = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/mostRare");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most rare' market dashboard");
        }
    }

    private async Task RefreshBiggestCrashes()
    {
        try
        {
            BiggestCrashes = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/biggestCrashes");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'biggest crashes' market dashboard");
        }
    }

}
