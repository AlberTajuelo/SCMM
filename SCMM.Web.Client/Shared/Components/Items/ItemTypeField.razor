@using SCMM.Web.Client.Shared.Dialogs.Items
@inherits PersistentComponent
@inject IDialogService Dialogs
@inject HttpClient Http
@inject AppState State

<MudField Label="Item" Disabled="@(ItemTypes == null || !ItemTypes.Any() || State.IsPrerendering)" Margin="@Margin" Variant="@Variant" FullWidth="@FullWidth" Class="@Class">
    <div class="clickable" @onclick="@ShowItemTypePickerDialog">
        <div class="d-flex flex-row align-center">
            @if (!String.IsNullOrEmpty(Value))
            {
                <img src="/images/app/@(State.AppId)/items/@(Value.ToRustItemShortName()).png" class="my-n2 mr-2" style="height:2em" />
                <span class="mud-secondary-text">@Value</span>
                <MudSpacer />
                <MudIconButton Icon="fa fa-fw fa-times" Size="MudBlazor.Size.Small" OnClick="@(() => SetSelection(null))" Class="pa-0 ma-0" title="Clear"></MudIconButton>
            }
            else
            {
                <i class="fa fa-fw fa-tshirt mr-2"></i>
                <span class="mud-secondary-text">Select an item...</span>
            }
        </div>
    </div>
</MudField>

@code {

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public MudBlazor.Margin Margin { get; set; }

    [Parameter]
    public MudBlazor.Variant Variant { get; set; }

    [Parameter]
    public bool FullWidth { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }
    
    private string[] ItemTypes;
    
    protected override async Task OnLoadStateAsync()
    {
        ItemTypes = await RestoreFromStateOrLoad(nameof(ItemTypes), async () =>
        {
            return await Http.GetFromJsonWithDefaultsAsync<string[]>($"api/item/types");
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(ItemTypes), ItemTypes);
        return Task.CompletedTask;
    }

    private async Task SetSelection(string value)
    {
        Value = value;
        StateHasChanged();

        await ValueChanged.InvokeAsync(value);
    }

    private async Task ShowItemTypePickerDialog()
    {
        var dialog = Dialogs.Show<ItemTypeSelectionDialog>(null, parameters: new DialogParameters()
        {
            ["ItemTypes"] = ItemTypes
        });

        var value = await dialog.GetReturnValueAsync<string>();
        if (!String.IsNullOrEmpty(value))
        {
            await SetSelection(value);
        }
    }

}
