@page "/steam/inventory/{SteamId}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SCMM.Web.Shared.Domain.DTOs.MarketItems;
@using SCMM.Web.Shared.Domain.DTOs
@using SCMM.Web.Shared
@namespace SCMM.Web.Client.Pages.Steam.Inventory
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<style>
    
    .Search-Text {
        width: 100%;
        margin-bottom: 16px;
    }

    .Search-Text input {
        padding: 8px;
    }

</style>

@if (Profile == null)
{
    @if (ProfileNotFound)
    {
        <NotFound />
    }
    else
    {
        <Loading />
    }
}
else
{
    <DocumentTitle Title="@($"Inventory - {Profile.Name}")" />
    <Grid Container Spacing="@Spacing.Two">
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryProfileCard Profile="@Profile" />
        </Grid>
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Assets">
                <Icon>
                    <SwapBagIcon />
                </Icon>
                <Total>
                    @InventoryTotalItemCount
                </Total>
            </InventoryTotalCard>
        </Grid>
        @if (InventoryTotalInvestedValue > 0)
        {
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Total Investment" IconClass="Background-Error">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @State.ToLocalPriceText(InventoryTotalInvestedValue, State.Currency)
                </Total>
            </InventoryTotalCard>
        </Grid>
        }
        @if (InventoryTotalMarketValue > 0)
        {
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Total Market Value" IconClass="Background-Info">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @State.ToLocalPriceText(InventoryTotalMarketValue, State.Currency)
                    <Typography Variant="@TypographyVariant.Body2">
                        @if (InventoryTotalMarketValueMovement > 0)
                        {
                            <span class="Text-Success">
                                🡱 @State.ToLocalPriceText(InventoryTotalMarketValueMovement, State.Currency) today
                            </span>
                        }
                        @if (InventoryTotalMarketValueMovement < 0)
                        {
                            <span class="Text-Error">
                                🡳 @State.ToLocalPriceText(InventoryTotalMarketValueMovement, State.Currency) today
                            </span>
                        }
                    </Typography>
                </Total>
            </InventoryTotalCard>
        </Grid>
        }
        @if (InventoryTotalResellValue > 0)
        {
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Optimistic Resell Value" IconClass="Background-Success">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @State.ToLocalPriceText(InventoryTotalResellValue, State.Currency)
                </Total>
            </InventoryTotalCard>
        </Grid>
        }
        @if (InventoryTotalProfitValue > 0)
        {
        <Grid ExtraSmall="@GridSize.Two">
            <InventoryTotalCard Title="Optimistic Resell Profit" IconClass="Background-Success">
                <Icon>
                    <AttachMoneyIcon Style="width:48px;height:48px" />
                </Icon>
                <Total>
                    @State.ToLocalPriceText(InventoryTotalProfitValue, State.Currency)
                    <Typography Variant="@TypographyVariant.Body2">
                        @if (InventoryTotalProfitMovement > 0)
                        {
                            <span class="Text-Success">
                                🡱 @State.ToLocalPriceText(InventoryTotalProfitMovement, State.Currency) today
                            </span>
                        }
                        @if (InventoryTotalProfitMovement < 0)
                        {
                            <span class="Text-Error">
                                🡳 @State.ToLocalPriceText(InventoryTotalProfitMovement, State.Currency) today
                            </span>
                        }
                    </Typography>
                </Total>
            </InventoryTotalCard>
        </Grid>
        }
        <Grid Item ExtraSmall="@GridSize.Twelve">
            <Tabs Value="@SelectedInventoryPanel"
                  OnChange="@OnSelectedInventoryPanelChanged"
                  IndicatorColor="@Color.Primary"
                  TextColor="@Color.Primary"
                  Variant="@TabsVariant.FullWidth">
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="0" Label="Summary" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="1" Label="Return on investment" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="2" Label="Market activity" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="3" Label="Market performance" Wrapped />
            </Tabs>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab" Value="@SelectedInventoryPanel" Index="0">
                @if (InventoryItemsSummary != null)
                {
                    <InventoryItemsSummary Items="@InventoryItemsSummary" />
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab" Value="@SelectedInventoryPanel" Index="1">
                @if (InventoryItemsDetailed != null)
                {
                    <Paper>
                        <InventoryItemsTable Items="@InventoryItemsDetailed" />
                    </Paper>
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab"  Value="@SelectedInventoryPanel" Index="2">
                @if ((int)SelectedInventoryPanel == 2)
                {
                    <InventoryItemsActivity Items="@InventoryActivity" />
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab"  Value="@SelectedInventoryPanel" Index="3">
                @if (TotalHistoryChart != null)
                {
                    <ChartJsLineChart @ref="TotalHistoryChartJs" Config="@TotalHistoryChart" />
                }
            </TabPanel>
        </Grid>
    </Grid>
}

@code {

    [CascadingParameter]
    public AppState State { get; set; }

    [Parameter]
    public string SteamId { get; set; }

    private ProfileInventoryDetailsDTO Profile { get; set; }

    private bool ProfileNotFound { get; set; }

    private object SelectedInventoryPanel { get; set; } = 0;

    private InventoryItemListDTO[] InventoryItems { get; set; }

    private IDictionary<MarketItemListDTO, int> InventoryItemsSummary { get; set; }

    private InventoryItemListDTO[] InventoryItemsDetailed { get; set; }

    private int InventoryTotalItemCount { get; set; }

    private long InventoryTotalInvestedValue { get; set; }

    private long InventoryTotalMarketValue { get; set; }

    private long InventoryTotalResellValue { get; set; }

    private long InventoryTotalProfitValue { get; set; }

    private long InventoryTotalMarketValueMovement { get; set; }

    private long InventoryTotalProfitMovement { get; set; }

    private IDictionary<MarketItemActivityDTO, MarketItemListDTO> InventoryActivity { get; set; }

    private ChartJsLineChart TotalHistoryChartJs;
    private LineConfig TotalHistoryChart;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Profile = await Http.GetFromJsonAsync<ProfileInventoryDetailsDTO>($"InventoryItems/{SteamId}");
            ProfileNotFound = (Profile == null);
            if (Profile != null)
            {
                InventoryItems = Profile?.InventoryItems?.OrderBy(x => x.Name)?.ToArray();
                RecalculateTotals();
                RecalculateActivity();
                OnSelectedInventoryPanelChanged(SelectedInventoryPanel);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            ProfileNotFound = true;
        }
    }

    private async Task ViewItem(InventoryItemListDTO item)
    {
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private void OnSelectedInventoryPanelChanged(object value)
    {
        SelectedInventoryPanel = value;
        InventoryItemsSummary = null;
        InventoryItemsDetailed = null;
        TotalHistoryChart = null;
        switch (SelectedInventoryPanel)
        {
            case 0: RecalculateItemsSummary();  break;
            case 1: RecalculateItemsDetailed();  break;
            case 2: break;
            case 3: RedrawTotalHistoryChart(); break;
        }
        StateHasChanged();
    }

    private void RecalculateTotals()
    {
        if (InventoryItems?.Any() == true)
        {
            var items = InventoryItems;
            var itemsOnMarket = items.Where(x => x.MarketItem != null).ToList();
            InventoryTotalItemCount = items.Sum(x => x.Quantity);
            InventoryTotalInvestedValue = items.Sum(x => State.ToLocalPrice((x.BuyPrice ?? 0) * x.Quantity, x.Currency));
            InventoryTotalMarketValue = itemsOnMarket.Sum(x => State.ToLocalPrice(x.MarketItem.Last1hrValue, x.MarketItem.Currency));
            InventoryTotalResellValue = itemsOnMarket.Sum(x => State.ToLocalPrice(x.MarketItem.ResellPrice, x.MarketItem.Currency));
            InventoryTotalProfitValue = itemsOnMarket.Where(x => x.BuyPrice > 0).Sum(x =>
                State.ToLocalPrice(x.MarketItem.ResellPrice, x.MarketItem.Currency) - State.ToLocalPrice(x.MarketItem.ResellTax, x.MarketItem.Currency) - State.ToLocalPrice(x.BuyPrice ?? 0, x.Currency)
            );
            if (Profile.ValueHistoryGraph?.Any() == true)
            {
                InventoryTotalMarketValueMovement = ((long)Profile.ValueHistoryGraph.Reverse().First().Value - (long)Profile.ValueHistoryGraph.Reverse().Skip(1).First().Value);
            }
            else
            {
                InventoryTotalMarketValueMovement = 0;
            }
            if (Profile.ValueProfitGraph?.Any() == true)
            {
                InventoryTotalProfitMovement = ((long)Profile.ValueProfitGraph.Reverse().First().Value - (long)Profile.ValueProfitGraph.Reverse().Skip(1).First().Value);
            }
            else
            {
                InventoryTotalProfitMovement = 0;
            }
        }
        else
        {
            InventoryTotalItemCount = 0;
            InventoryTotalInvestedValue = 0;
            InventoryTotalMarketValue = 0;
            InventoryTotalResellValue = 0;
            InventoryTotalProfitValue = 0;
            InventoryTotalMarketValueMovement = 0;
            InventoryTotalProfitMovement = 0;
        }
    }

    private void RecalculateItemsSummary()
    {
        if (InventoryItems?.Any() == true)
        {
            InventoryItemsSummary = new Dictionary<MarketItemListDTO, int>();
            var marketItems = InventoryItems
                .Select(x => x.MarketItem)
                .Where(x => x != null)
                .OrderByDescending(x => x.Last1hrValue);

            foreach (var marketItem in marketItems)
            {
                if (!InventoryItemsSummary.Any(x => x.Key.SteamId == marketItem.SteamId))
                {
                    InventoryItemsSummary[marketItem] = InventoryItems
                        .Where(x => x.MarketItem?.SteamId == marketItem.SteamId)
                        .Sum(x => x.Quantity);
                }
            }
        }
        else
        {
            InventoryItemsSummary = null;
        }
    }

    private void RecalculateItemsDetailed()
    {
        InventoryItemsDetailed = InventoryItems;
    }

    private void RecalculateActivity()
    {
        if (InventoryItems?.Any() == true)
        {
            InventoryActivity = new Dictionary<MarketItemActivityDTO, MarketItemListDTO>();
            foreach (var item in InventoryItems.Where(x => x.MarketItem != null))
            {
                foreach (var activity in item.MarketItem.Activity.Where(x => x.Movement != 0))
                {
                    InventoryActivity[activity] = item.MarketItem;
                }
            }
            InventoryActivity = InventoryActivity.OrderByDescending(x => x.Key.Timestamp).ToDictionary(
                x => x.Key,
                x => x.Value
            );
        }
        else
        {
            InventoryActivity = null;
        }
    }

    private void RedrawTotalHistoryChart()
    {
        if (Profile.ValueHistoryGraph == null)
        {
            return;
        }

        TotalHistoryChart = new LineConfig
        {
            Options = new LineOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new Scales
                {

                    xAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        TotalHistoryChart.Data.Labels = Profile.ValueHistoryGraph.Keys.ToList();

        if (Profile.ValueProfitGraph != null && InventoryTotalProfitValue > 0)
        {
            var totalProfitDataSet = new LineDataset<DoubleWrapper>
            {
                Label = "Resell Profit",
                BackgroundColor = "#388e3c",
                BorderColor = "#1b5e20",
                BorderWidth = 1,
                PointBorderWidth = 2,
                PointRadius = 8,
                LineTension = 0.1,
                Fill = true
            };
            totalProfitDataSet.AddRange(
                Profile.ValueProfitGraph.Values.Select(x => (DoubleWrapper)x).ToList()
            );
            TotalHistoryChart.Data.Datasets.Add(totalProfitDataSet);
        }

        if (Profile.ValueHistoryGraph != null)
        {
            var totalValueDataSet = new LineDataset<DoubleWrapper>
            {
                Label = "Market Value",
                BackgroundColor = "#1976d2",
                BorderColor = "#0d47a1",
                BorderWidth = 1,
                PointBorderWidth = 2,
                PointRadius = 8,
                LineTension = 0.1,
                Fill = true
            };
            totalValueDataSet.AddRange(
                Profile.ValueHistoryGraph.Values.Select(x => (DoubleWrapper)x).ToList()
            );
            TotalHistoryChart.Data.Datasets.Add(totalValueDataSet);
        }
    }
}
