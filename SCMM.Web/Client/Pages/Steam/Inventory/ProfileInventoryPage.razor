@page "/steam/inventory/{SteamId}"
@using SCMM.Web.Shared.Domain.DTOs.InventoryItems
@using SCMM.Web.Shared
@namespace SCMM.Web.Client.Pages.Steam.Inventory
@inject ILogger<ProfileInventoryPage> Logger
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AppState State

<Title Value="Inventory" />

<Grid Container Spacing="@Spacing.Two">
    <Grid Item ExtraSmall="@GridSize.Twelve" Large="@GridSize.Six">
        <ResponsiveTextField Label="Steam ID" Placeholder="steam id" Value="@SteamId" OnChange="@(x => OnSteamIdChanged(x))">
            <StartAdornment>
                <Hidden SmallDown>
                    <Typography Variant="@TypographyVariant.Body1" Color="@Color.TextSecondary">
                        <span>https://steamcommunity.com/id/</span>
                    </Typography>
                </Hidden>
            </StartAdornment>
            <EndAdornment>
                <IconButton OnClick="@ViewProfileInventory" Style="padding:5px;" title="View Profile Inventory">
                    <SearchIcon />
                </IconButton>
            </EndAdornment>
        </ResponsiveTextField>
    </Grid>
    <Grid Item ExtraSmall="@GridSize.Twelve" Large="@GridSize.Six">
        <ResponsiveTextField Label="Filter" Placeholder="type an item name or tag..." OnChange="@(x => OnFilterChanged(x))">
            <StartAdornment>
                <Typography Variant="@TypographyVariant.Body1" Color="@Color.TextSecondary">
                    <i class="fas fa-fw fa-filter"></i>
                </Typography>
            </StartAdornment>
        </ResponsiveTextField>
    </Grid>
</Grid>
<Grid Container Spacing="@Spacing.Two">
    @if (Profile == null)
    {
        <Title Value="@($"Inventory - {SteamId}")" />
        <Grid ExtraSmall="@GridSize.Twelve">
            @if (ProfileLoadError != null)
            {
                <NotFound />
            }
            else
            {
                <Loading />
            }
        </Grid>
    }
    else
    {
        <Title Value="@($"Inventory - {Profile.Name}")" />
        <InventoryHeader Profile="@Profile" InventoryTotal="@InventoryTotal" SynchroniseInventory="@SynchroniseInventory" />
        <Grid Item ExtraSmall="@GridSize.Twelve">
            <Tabs Value="@SelectedInventoryPanel"
                    OnChange="@(x => OnSelectedInventoryPanelChanged(x))"
                    IndicatorColor="@Color.Primary"
                    TextColor="@Color.Primary"
                    Variant="@TabsVariant.FullWidth">
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="0" Label="Inventory" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="1" Label="Wishlist" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="2" Label="Investment" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="3" Label="Performance" Wrapped />
            </Tabs>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab" Value="@SelectedInventoryPanel" Index="0">
                @if ((int)SelectedInventoryPanel == 0)
                {
                    @if (InventoryItemsSummary == null)
                    {
                        <Loading />
                    }
                    else
                    {
                        <InventoryItemsSummary Items="@FilterItems(InventoryItemsSummary)" ProfileName="@Profile.Name" ProfileIsMe="@ProfileIsMe"
                                               ReadOnly="@(Profile == null || !State.IsAuthenticated || State.Profile?.SteamId != Profile?.SteamId)" />
                    }
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab"  Value="@SelectedInventoryPanel" Index="1">
                @if ((int)SelectedInventoryPanel == 1)
                {
                    @if (InventoryItemsWishlist == null)
                    {
                        <Loading />
                    }
                    else
                    {
                        <InventoryItemsWishlist Items="@FilterItems(InventoryItemsWishlist)"
                                                ReadOnly="@(Profile == null || !State.IsAuthenticated || State.Profile?.SteamId != Profile?.SteamId)" />
                    }
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab" Value="@SelectedInventoryPanel" Index="2">
                @if ((int)SelectedInventoryPanel == 2)
                {
                    <Paper>
                        <InventoryItemsInvestment SteamId="@SteamId" Filter="@Filter"
                                                  ReadOnly="@(Profile == null || !State.IsAuthenticated || State.Profile?.SteamId != Profile?.SteamId)" />
                    </Paper>
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab"  Value="@SelectedInventoryPanel" Index="3">
                @if ((int)SelectedInventoryPanel == 3)
                {
                    @if (InventoryPerformance == null || InventoryTotal == null)
                    {
                        <Loading />
                    }
                    else
                    {
                        <InventoryItemsPerformance InventoryPerformance="@InventoryPerformance" InventoryTotal="@InventoryTotal" />
                    }
                }
            </TabPanel>
        </Grid>
    }
</Grid>

@code {

    [Parameter]
    public string SteamId { get; set; }

    private string Filter { get; set; }

    private ProfileInventoryDetailsDTO Profile { get; set; }

    private Exception ProfileLoadError { get; set; }
    
    private bool ProfileIsMe => (Profile != null && State.IsAuthenticated && State.Profile?.SteamId == Profile?.SteamId);

    private object SelectedInventoryPanel { get; set; } = 0;

    private ProfileInventoryTotalsDTO InventoryTotal { get; set; }

    private IList<ProfileInventoryItemSummaryDTO> InventoryItemsSummary { get; set; }

    private IList<ProfileInventoryItemWishDTO> InventoryItemsWishlist { get; set; }

    private ProfileInventoryPerformanceDTO InventoryPerformance { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        SelectedInventoryPanel = await LocalStorage.GetItemAsync<int>("Inventory.SelectedTab");
        await RefreshInventory();
    }

    private async Task RefreshInventory(bool forceReload = false)
    {
        try
        {
            Logger.LogInformation($"Refreshing inventory for '{SteamId}'...");
            Profile = null;
            ProfileLoadError = null;
            InventoryItemsSummary = null;
            InventoryItemsWishlist = null;
            InventoryTotal = null;
            InventoryPerformance = null;
            await LoadProfile(forceReload);
            await LoadInventoryTotals(forceReload);
            await OnSelectedInventoryPanelChanged(SelectedInventoryPanel, forceReload);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error refreshing inventory for '{SteamId}'");
            ProfileLoadError = ex;
        }
    }

    private async Task OnSelectedInventoryPanelChanged(object value, bool forceReload = false)
    {
        SelectedInventoryPanel = value;
        await LocalStorage.SetItemAsync<int>("Inventory.SelectedTab", (int) value);
        switch (SelectedInventoryPanel)
        {
            case 0: await LoadInventorySummary(forceReload); break;
            case 1: await LoadInventoryWishlist(forceReload); break;
            case 2: break;
            case 3: await LoadInventoryPerformance(forceReload); break;
        }
        StateHasChanged();
    }
    
    private void OnSteamIdChanged(string steamId)
    {
        SteamId = steamId;
        StateHasChanged();
    }
    
    private void OnFilterChanged(string filter)
    {
        Filter = (string) filter;
        StateHasChanged();
    }
    
    private async Task SynchroniseInventory()
    {
        Profile = null;
        StateHasChanged();
        await RefreshInventory(forceReload: true);
        StateHasChanged();
    }
    
    private async Task LoadProfile(bool forceReload = false)
    {
        try
        {
            if (Profile == null || forceReload)
            {
                Logger.LogInformation("Fetching inventory profile...");
                ProfileLoadError = null;
                Profile = await Http.GetFromJsonAsync<ProfileInventoryDetailsDTO>(
                    $"api/inventory/{SteamId}?sync={forceReload}"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory profile for '{SteamId}'");
            Profile = null;
            ProfileLoadError = ex;
        }
    }

    private async Task LoadInventoryTotals(bool forceReload = false)
    {
        try
        {
            if (InventoryTotal == null || forceReload)
            {
                Logger.LogInformation("Fetching inventory totals...");
                InventoryTotal = await Http.GetFromJsonAsync<ProfileInventoryTotalsDTO>(
                    $"api/inventory/{SteamId}/total"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory totals for '{SteamId}'");
            InventoryTotal = null;
        }
    }

    private async Task LoadInventorySummary(bool forceReload = false)
    {
        try
        {
            if (InventoryItemsSummary == null || forceReload)
            {
                Logger.LogInformation("Fetching inventory summary...");
                InventoryItemsSummary = await Http.GetFromJsonAsync<IList<ProfileInventoryItemSummaryDTO>>(
                    $"api/inventory/{SteamId}/summary"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory summary for '{SteamId}'");
            InventoryItemsSummary = null;
        }
    }
    
    private async Task LoadInventoryWishlist(bool forceReload = false)
    {
        try
        {
            if (InventoryItemsWishlist == null || forceReload)
            {
                Logger.LogInformation("Fetching inventory wishlist...");
                InventoryItemsWishlist = await Http.GetFromJsonAsync<IList<ProfileInventoryItemWishDTO>>(
                    $"api/inventory/{SteamId}/wishlist"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory wishlist for '{SteamId}'");
            InventoryItemsWishlist = null;
        }
    }
    
    private async Task LoadInventoryPerformance(bool forceReload = false)
    {
        try
        {
            if (InventoryPerformance == null || forceReload)
            {
                Logger.LogInformation("Fetching inventory performance...");
                InventoryPerformance = await Http.GetFromJsonAsync<ProfileInventoryPerformanceDTO>(
                    $"api/inventory/{SteamId}/performance"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory performance for '{SteamId}'");
            InventoryPerformance = null;
        }
    }

    private IEnumerable<T> FilterItems<T>(IEnumerable<T> items)
        where T : IFilterableItem
    {
        if (String.IsNullOrEmpty(Filter))
        {
            return items;
        }

        return items.Where(x => 
            x.Name.Contains(Filter, StringComparison.CurrentCultureIgnoreCase)
        );
    }
    
    private void ViewProfileInventory()
    {
        Navigation.NavigateTo($"steam/inventory/{SteamId}", forceLoad: true);
    }

    private void ViewItem(InventoryItemListDTO item)
    {
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }
}
