@page "/inventory/{SteamId}"
@page "/steam/inventory/{SteamId}"
@using SCMM.Web.Data.Models.UI.Profile.Inventory
@inject ILogger<InventoryPage> Logger
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<PageContainer Title="@(Profile != null ? $"Inventory - {Profile.Name}" : "Inventory")">
    <MudGrid Spacing="2">
        <InventoryHeaderPanel Profile="@Profile" InventoryTotal="@InventoryTotals" SynchroniseInventory="@OnSynchroniseInventory" />
        <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
            <MudItem xs="12" sm="6" lg="4" xl="2" Class="d-flex flex-row justify-start align-center">
                <MudTextField T="string" Value="@Filter" ValueChanged="@OnSearch" DebounceInterval="500" Placeholder="Filter items..." FullWidth="true" Class="ma-0"
                              Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-filter mr-2" IconSize="MudBlazor.Size.Small" Variant="MudBlazor.Variant.Outlined" />
            </MudItem>
		</MudHidden>
        <MudItem xs="12">
            @if (Profile == null || InventoryTotals == null)
            {
                @if (LoadingError != null)
                {
                    if (LoadingErrorStatusCode == HttpStatusCode.NotFound && Profile == null)
                    {
                        <Alert Title="Steam profile not found" SubTitle="Profile does not exist. Check your SteamID is correct, then try again." />
                    }
                    else if (LoadingErrorStatusCode == HttpStatusCode.NotFound && InventoryTotals == null)
                    {
                        <Alert Title="Steam inventory is private" SubTitle="Inventory is private. Check your profile privacy to ensure that your inventory is public, then try again." />
                    }
                    else
                    {
                        <Alert Exception="@LoadingError" />
                    }
                }
                else
                {
                    <Loading Message="@LoadingMessage" />
                }
            }
            else
            {
                <MudTabs Elevation="0" ActivePanelIndex="PanelIndex" ActivePanelIndexChanged="OnSelectedPanelChanged" Class="mud-tabs-transparent">
                    <ChildContent>
                        <MudTabPanel Icon="fas fa-fw fa-th mr-2" Text="Inventory">
                            <MudPaper Outlined="true">
                                <InventoryItemsPanel SteamId="@SteamId" Filter="@Filter" />
                            </MudPaper>
                        </MudTabPanel>
                        <MudTabPanel Icon="fas fa-fw fa-tshirt mr-2" Text="Collections">
                            <MudPaper Outlined="true">
                                <InventoryCollectionsPanel SteamId="@SteamId" Filter="@Filter" />
                            </MudPaper>
                        </MudTabPanel>
                        <MudTabPanel Icon="fas fa-fw fa-balance-scale-left mr-4" Text="Market Movement">
                            <MudPaper Outlined="true">
                                <InventoryMarketPanel SteamId="@SteamId" Filter="@Filter" InventoryTotals="@InventoryTotals" />
                            </MudPaper>
                        </MudTabPanel>
                        <MudTabPanel Icon="fas fa-fw fa-hand-holding-usd mr-3" Text="Investment Returns" Disabled="@(!State.Is(Profile?.SteamId) && !State.IsInRole(Roles.Administrator))">
                            <MudPaper Outlined="true">
                                <InventoryInvestmentPanel SteamId="@SteamId" Filter="@Filter" ReadOnly="@(!State.Is(Profile?.SteamId))"/>
                            </MudPaper>
                        </MudTabPanel>
                        <MudTabPanel Icon="fas fa-fw fa-chart-pie mr-2" Text="Statistics" Disabled="true">
                            <MudPaper Outlined="true">
                                <InventoryStatisticsPanel SteamId="@SteamId" Filter="@Filter" InventoryTotals="@InventoryTotals" />
                            </MudPaper>
                        </MudTabPanel>
					</ChildContent>
	                <Header>
                        <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
                            <MudTextField T="string" Value="@Filter" ValueChanged="@OnSearch" DebounceInterval="500" Placeholder="Filter items..." FullWidth="true" Class="mt-0 mr-1"
                                          Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-filter mr-2" IconSize="MudBlazor.Size.Small" />
					    </MudHidden>
	                </Header>
                </MudTabs>
            }
        </MudItem>
    </MudGrid>
</PageContainer>

@code {

    [Parameter]
    public string SteamId { get; set; }

    private ProfileDetailedDTO Profile { get; set; }
    
    private ProfileInventoryTotalsDTO InventoryTotals { get; set; }

    private string LoadingMessage { get; set; }

    private Exception LoadingError { get; set; }
    
    private HttpStatusCode? LoadingErrorStatusCode => (LoadingError as HttpRequestException)?.StatusCode;
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string Panel { get; set; }

    private int PanelIndex { get; set; }

    protected override async Task OnInitializedAsync()
    {
        switch (Panel)
        {
            case "items": PanelIndex = 0; break;
            case "collections": PanelIndex = 1; break;
            case "market": PanelIndex = 2; break;
            case "investment": PanelIndex = 3; break;
            case "statistics": PanelIndex = 4; break;
        }
        
        await LoadProfileAndInventory();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // If we have navigated to a different profile, reload the new profile
        if ((Profile != null) &&
            !String.Equals(SteamId, Profile?.SteamId, StringComparison.InvariantCultureIgnoreCase) &&
            !String.Equals(SteamId, Profile?.ProfileId, StringComparison.InvariantCultureIgnoreCase))
        {
            await LoadProfileAndInventory();
        }
    }
    
    private void OnSearch(string text)
    {
        Filter = text;
        StateHasChanged();
    }

    private void OnSelectedPanelChanged(int index)
    {
        var filter = !String.IsNullOrEmpty(Filter) ? $"&filter={Uri.EscapeDataString(Filter)}" : String.Empty;

        PanelIndex = index;
        switch (index)
        {
            case 0: NavigationManager.NavigateTo($"/inventory/{Uri.EscapeDataString(SteamId)}?panel=items{filter}"); break;
            case 1: NavigationManager.NavigateTo($"/inventory/{Uri.EscapeDataString(SteamId)}?panel=collections{filter}"); break;
            case 2: NavigationManager.NavigateTo($"/inventory/{Uri.EscapeDataString(SteamId)}?panel=market{filter}"); break;
            case 3: NavigationManager.NavigateTo($"/inventory/{Uri.EscapeDataString(SteamId)}?panel=investment{filter}"); break;
            case 4: NavigationManager.NavigateTo($"/inventory/{Uri.EscapeDataString(SteamId)}?panel=statistics{filter}"); break;
        }
    }
    
    private async Task OnSynchroniseInventory()
    {
        Profile = null;
        StateHasChanged();
        await LoadProfileAndInventory(force: true);
        StateHasChanged();
    }
    
    private async Task LoadProfileAndInventory(bool force = false)
    {
        try
        {
            Logger.LogInformation($"Loading inventory for '{SteamId}'...");
            Profile = null;
            InventoryTotals = null;

            LoadingError = null;
            LoadingMessage = "Finding Steam profile...";
            StateHasChanged();
            await LoadProfile();

            LoadingMessage = "Synchronising inventory with Steam...";
            StateHasChanged();
            await SynchroniseInventory(force);

            LoadingMessage = "Calculating inventory value...";
            StateHasChanged();
            await LoadInventoryTotals();
            
            LoadingMessage = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading profile inventory '{SteamId}'");
            LoadingMessage = null;
            LoadingError = ex;
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task LoadProfile()
    {
        try
        {
            Logger.LogInformation("Fetching inventory profile...");
            Profile = await Http.GetFromJsonWithDefaultsAsync<ProfileDetailedDTO>(
                $"api/profile/{Uri.EscapeDataString(SteamId)}/summary"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory profile for '{SteamId}'");
            Profile = null;
            throw;
        }
    }
    
    private async Task SynchroniseInventory(bool force = false)
    {
        try
        {
            Logger.LogInformation("Synchronising inventory items...");
            var response = await Http.PostAsync(
                $"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/sync?force={force}", null
            );

            response?.EnsureSuccessStatusCode();
        }
        catch (Exception ex)
        {
            var httpErrorCode = (ex as HttpRequestException)?.StatusCode;
            if (httpErrorCode == HttpStatusCode.Unauthorized)
            {
                var snackBarMessage = (Profile?.LastUpdatedInventoryOn != null
                    ? $"<strong>This inventory is currently private.</strong><br/>You are viewing an old snapshot from {Profile.LastUpdatedInventoryOn.Value.ToString("g")} as we are unable to show you the latest information at this time. "
                    : $"<strong>This inventory is currently private.</strong><br/>We are unable to show you the contents of this inventory. "
                );

                var thisIsMyInventory = State.Is(Profile?.SteamId);
                if (thisIsMyInventory)
                {
                    snackBarMessage += (
                        $"To resolve this, click the action button to update your Steam inventory privacy settings to 'Public', then refresh this page after a few minutes. "
                    );
                }

                Logger.LogWarning(ex, $"Inventory is currently private for '{SteamId}', unable to synchronise at this time");
                Snackbar.Add(
				    snackBarMessage,
                    Severity.Warning,
                    options =>
                    {
                        options.Icon = "fas fa-fw fa-eye-slash ma-2";
                        if (thisIsMyInventory)
                        {
                            options.Action = "Privacy Settings";
                            options.Onclick = async (x) =>
                            {
                                ExternalNavigationManager.NavigateToNewTab(
                                    $"https://steamcommunity.com/profiles/{Profile?.SteamId}/edit/settings"
                                );
                            };
                        }
                    }
                );
            }
            else
            {
                Logger.LogError(ex, $"Error synchronising inventory items for '{SteamId}'");
                throw;
            }
        }
    }

    private async Task LoadInventoryTotals()
    {
        try
        {
            Logger.LogInformation("Fetching inventory totals...");
            InventoryTotals = await Http.GetFromJsonWithDefaultsAsync<ProfileInventoryTotalsDTO>(
                $"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/total"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory totals for '{SteamId}'");
            InventoryTotals = null;
            throw;
        }
    }

}
