@using SCMM.Shared.Data.Models.Extensions
@using SCMM.Steam.Data.Store
@inject SteamDbContext DB
@{
    var assetsNewest = DB.SteamAssetDescriptions.Max(x => x.TimeRefreshed) ?? DateTimeOffset.UtcNow;
    var assetsOldest = DB.SteamAssetDescriptions.Min(x => x.TimeRefreshed) ?? DateTimeOffset.UtcNow;
    var salesNewest = DB.SteamMarketItems.Max(x => x.LastCheckedSalesOn) ?? DateTimeOffset.UtcNow;
    var salesOldest = DB.SteamMarketItems.Min(x => x.LastCheckedSalesOn) ?? DateTimeOffset.UtcNow;
    var ordersNewest = DB.SteamMarketItems.Max(x => x.LastCheckedOrdersOn) ?? DateTimeOffset.UtcNow;
    var ordersOldest = DB.SteamMarketItems.Min(x => x.LastCheckedOrdersOn) ?? DateTimeOffset.UtcNow;

}
<dl class="dl-horizontal">
    <dt><i class="fas fa-paint-roller fa-fw"></i> Asset Descriptions</dt>
    <dd>
        <span>@Math.Round((DateTime.UtcNow - assetsNewest).TotalMinutes) - @Math.Round((DateTime.UtcNow - assetsOldest).TotalMinutes) minutes old</span><br />
    </dd>
    <dt><i class="fas fa-tag fa-fw"></i> Price History</dt>
    <dd>
        <span>@Math.Round((DateTime.UtcNow - salesNewest).TotalMinutes) - @Math.Round((DateTime.UtcNow - salesOldest).TotalMinutes) minutes old</span><br />
    </dd>
    <dt><i class="fas fa-list fa-fw"></i> Order History</dt>
    <dd>
        <span>@Math.Round((DateTime.UtcNow - ordersNewest).TotalMinutes) - @Math.Round((DateTime.UtcNow - ordersOldest).TotalMinutes) minutes old</span><br />
    </dd>
</dl>
