@page "/"
@page "/store"
@page "/store/{StoreId}"
@page "/steam/store"
@using SCMM.Web.Data.Models.UI.Store
@using SCMM.Web.Data.Models
@inject ILogger<StorePage> Logger
@inject IDialogService Dialogs
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

@if (StoreList == null)
{
    @if (StoreException == null)
    {
        <Loading Message="Loading store list..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
    }
    else
    {
        <Alert Exception="@StoreException" />
    }
}
else if (StoreList.Any())
{
    <MudTabs Elevation="0" Position="MudBlazor.Position.Bottom" ActivePanelIndex="StoreIndex" ActivePanelIndexChanged="OnSelectedStoreChanged" Class="mud-transparent-tabs">
        @foreach (var store in StoreList)
        {
            <MudTabPanel ID="@store.Id.ToString()" Text="@store.Name" />
        }
    </MudTabs>
    <PageContainer Title="Store" Class="mb-6 ml-6 mr-6">

        <MudGrid Spacing="2">
            @if (Store == null)
            {
                <MudItem xs="12">
                    @if (StoreException == null)
                    {
                        <Loading Message="Loading store..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
                    }
                    else
                    {
                        <Alert Exception="@StoreException" />
                    }
                </MudItem>
            }
            else
            {
                @foreach (var item in Store.Items.OrderByDescending(x => x.SalesMinimum * x.StorePrice))
                {
                    <MudItem xs="12" sm="6" md="4" xl="3">
                        <div class="Store-Item">
                            <MudCard Outlined="true">
                                <MudCardHeader>
                                    <CardHeaderAvatar>
                                        <MudTooltip Text="@item.AuthorName">
                                            <MudAvatar Image="@item.AuthorAvatarUrl" Size="MudBlazor.Size.Medium" />
                                        </MudTooltip>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                        <div class="Item-Name">
                                            <MudText Typo="MudBlazor.Typo.h6" Style="@($"color: {item.ForegroundColour}")">@item.Name</MudText>
                                        </div>
                                        @if (!String.IsNullOrEmpty(item.ItemType))
                                        {
                                            <div class="Item-Type">
                                                <MudText Typo="MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Secondary">@item.ItemType</MudText>
                                            </div>
                                        }
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudGrid Spacing="1">

                                        <MudItem xs="5">
                                            <div class="Image-Root">
                                                <MudTooltip Text="@(item.HasWorkshopFile ? "Click to view workshop page" : null)" Placement="MudBlazor.Placement.Top">
                                                    <img src="@item.IconUrl" @onclick="@(() => ViewItemWorkshopPage(item))" />
                                                </MudTooltip>
                                            </div>
                                        </MudItem>
                                        <MudItem xs="7">
                                            @if (!item.HasWorkshopFile)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                                                    <span>This item is not from the Rust workshop, some statistics may be unavailable.</span>
                                                </MudText>
                                            }
                                            @if (item.MarketPriceRankTotal > 0)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="NoWrap" GutterBottom>
                                                    <i class="fas fa-fw fa-balance-scale-left"></i>
                                                    <span><MudLink @onclick="@(() => ShowItemTypeDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.MarketPriceRankPosition cheaper @item.ItemType.Pluralise(item.MarketPriceRankPosition)</MudLink> in the marketplace (@item.MarketPriceRankTotal total).</span>
                                                </MudText>
                                            }
                                            @if (item.SalesMinimum > 0)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="NoWrap" GutterBottom>
                                                    <i class="fas fa-fw fa-shopping-cart"></i>
                                                    <span>
                                                        @if (item.SalesMaximum == null)
                                                        {
                                                            <span>More than <MudLink @onclick="@(() => ShowItemSalesDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.SalesMinimum.ToQuantityString() sold</MudLink></span>
                                                        }
                                                        else if (item.SalesMinimum == item.SalesMaximum)
                                                        {
                                                            <span><MudLink @onclick="@(() => ShowItemSalesDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.SalesMinimum.ToQuantityString() sold</MudLink></span>
                                                        }
                                                        else
                                                        {
                                                            <span>Between <MudLink @onclick="@(() => ShowItemSalesDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.SalesMinimum.ToQuantityString() - @item.SalesMaximum.Value.ToQuantityString() sold</MudLink></span>
                                                        }
                                                    </span>
                                                </MudText>
                                            }
                                            else if (item.Subscriptions > 0)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="NoWrap" GutterBottom>
                                                    <i class="fas fa-fw fa-user"></i>
                                                    <span>
                                                        <MudLink @onclick="@(() => ShowItemSalesDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.Subscriptions.Value.ToQuantityString() subscribers</MudLink>
                                                    </span>
                                                </MudText>
                                            }
                                            @if (item.BreaksIntoComponents != null)
                                            {
                                                @foreach (var component in item.BreaksIntoComponents)
                                                {
                                                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="NoWrap" GutterBottom>
                                                        <i class="fas fa-fw fa-cubes"></i>
                                                        <span>Breaks down into <MudLink @onclick="@(() => ShowItemBreakdownDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@(component.Value)x @component.Key</MudLink></span>
                                                    </MudText>
                                                }
                                            }
                                            @if (!String.IsNullOrEmpty(item.ItemCollection))
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="NoWrap" GutterBottom>
                                                    <i class="fas fa-fw fa-paint-roller"></i>
                                                    <span>Part of the <MudLink @onclick="@(() => ShowItemCollectionDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.ItemCollection</MudLink> set</span>
                                                </MudText>
                                            }
                                            <div class="my-3">
                                                <MudTooltip>
                                                    <ChildContent>
                                                        <MudChip Size="MudBlazor.Size.Medium" Text="Tradable" Disabled="@(!item.IsTradable)"
                                                                 Icon="@(item.IsTradable ? "fas fa-fw fa-exchange-alt mr-2" : "fas fa-fw fa-times")" 
                                                                 Variant="@(item.IsTradable ? MudBlazor.Variant.Filled : MudBlazor.Variant.Outlined)" 
                                                                 Color="@(item.IsTradable ? MudBlazor.Color.Default : MudBlazor.Color.Default)" />
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        @if (item.IsTradable)
                                                        {
                                                            @if (item.TradableRestrictionDays > 0)
                                                            {
                                                                <span>This item <strong>can</strong> be traded <strong>@(item.TradableRestrictionDays)</strong> day(s) after purchase</span>
                                                            }
                                                            else
                                                            {
                                                                <span>This item <strong>can</strong> be traded immediately after purchase</span>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span>This item <strong>cannot</strong> be traded once purchased</span>
                                                        }
                                                    </TooltipContent>
                                                </MudTooltip>
                                                <MudTooltip>
                                                    <ChildContent>
                                                        <MudChip Size="MudBlazor.Size.Medium" Text="Marketable" Disabled="@(!item.IsMarketable)"
                                                                 Icon="@(item.IsMarketable ? "fas fa-fw fa-balance-scale-left mr-3" : "fas fa-fw fa-times")" 
                                                                 Variant="@(item.IsMarketable ? MudBlazor.Variant.Filled : MudBlazor.Variant.Outlined)" 
                                                                 Color="@(item.IsMarketable ? MudBlazor.Color.Default : MudBlazor.Color.Default)" />
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        @if (item.IsMarketable)
                                                        {
                                                            @if (item.MarketableRestrictionDays > 0)
                                                            {
                                                                <span>This item <strong>can</strong> be listed on the Steam Community Market after <strong>@(item.MarketableRestrictionDays)</strong> day(s) after purchase</span>
                                                            }
                                                            else
                                                            {
                                                                <span>This item <strong>can</strong> be listed on the Steam Community Market immediately after purchase</span>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span>This item <strong>cannot</strong> be listed on the Steam Community Market once purchased</span>
                                                        }
                                                    </TooltipContent>
                                                </MudTooltip>
                                            </div>
                                            @if (item.IsStillAvailableInStore && item.HasMarketListing)
                                            {
                                                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                                                    <span>This item is also available in the marketplace.</span>
                                                </MudText>
                                            }
                                            else if (!item.IsStillAvailableInStore && item.HasMarketListing)
                                            {
                                                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                                                    <span>This item is no longer available on the store, grab it from the marketplace instead.</span>
                                                </MudText>
                                            }
                                            else if (!item.IsStillAvailableInStore)
                                            {
                                                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                                                    <span>This item is no longer available.</span>
                                                </MudText>
                                            }
                                        </MudItem>
                                    
                                        <MudItem xs="5" Class="Centered">
                                            <div class="@(item.IsStillAvailableInStore ? "Price mud-elevation-4" : null)">
                                                <MudText Typo="MudBlazor.Typo.h6" Color="@(item.IsStillAvailableInStore ? MudBlazor.Color.Default : MudBlazor.Color.Secondary)" Style="@(item.IsStillAvailableInStore ? null : "text-decoration: line-through")">
                                                    <span>@item.Currency.ToPriceString(item.StorePrice)</span>
                                                </MudText>
                                            </div>
                                        </MudItem>
                                        <MudItem xs="7">
                                            <MudButton OnClick="@(() => BuyItemFromStore(item))" Variant="@(item.IsStillAvailableInStore ? MudBlazor.Variant.Filled : MudBlazor.Variant.Outlined)" 
                                                       Color="MudBlazor.Color.Tertiary" Disabled="@(!item.IsStillAvailableInStore)" FullWidth>
                                                <RustIcon />        
                                                <strong class="ml-1">@item.AppName store</strong>
                                            </MudButton>
                                        </MudItem>

                                        @if (item.HasMarketListing)
                                        {
                                            <MudItem xs="5" Class="Centered">
                                                <div class="Price mud-elevation-4">
                                                    <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default">
                                                        <span>@item.Currency.ToPriceString(item.MarketPrice ?? 0)</span>
                                                        @if (item.MarketPrice != null && item.MarketPrice > item.StorePrice)
                                                        {
                                                            <MudChip Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-arrow-up mr-1" Text="@item.MarketPrice.Value.ToMovementString(item.StorePrice)" 
                                                                     Color="MudBlazor.Color.Success" Variant="MudBlazor.Variant.Outlined" Class="ml-2" />
                                                        }
                                                        else
                                                        {
                                                            <MudChip Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-arrow-down mr-1" Text="@item.MarketPrice.Value.ToMovementString(item.StorePrice)" 
                                                                     Color="MudBlazor.Color.Error" Variant="MudBlazor.Variant.Outlined" Class="ml-2" />
                                                        }
                                                    </MudText>
                                                </div>
                                            </MudItem>
                                            <MudItem xs="7">
                                                <MudButton OnClick="@(() => BuyItemFromMarket(item))" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Dark" StartIcon="fab fa-fw fa-steam" FullWidth>
                                                    <strong>Steam Marketplace</strong>
                                                </MudButton>
                                            </MudItem>
                                        }

                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </div>
                    </MudItem>   
                }
                
                @foreach (var media in Store.Media)
                {
                    <MudItem xs="12" sm="6" md="4" xl="3">
                        <YouTubeVideo VideoId="@media" />
                    </MudItem>
                }

                <MudItem xs="12">
                    <MudPaper Outlined="true">
                        <MudTabs KeepPanelsAlive="true" Rounded="true" Centered="true" >
                            <MudTabPanel Text="Revenue">
                                @if (ItemSalesChart != null)
                                {
                                    <ChartJsBarChart @ref="ItemSalesChartJs" Config="@ItemSalesChart" />
                                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="ma-4">
                                        <span><strong>NOTE:</strong> Steam doesn't disclose exact sales figures. This is a conservative <strong>estimate</strong> of revenue earned per-item. Because an individual can purchase multiple copies of the same item, actual revenue will likely be higher.</span>
                                    </MudText>
                                }
                                else
                                {
                                    <Alert Title="Unavailable" SubTitle="No data yet" />
                                }
                            </MudTabPanel>
                            <MudTabPanel Text="Sales">
                                @if (ItemSubscribersChart != null)
                                {
                                    <ChartJsBarChart @ref="ItemSubscribersChartJs" Config="@ItemSubscribersChart" />
                                }
                                else
                                {
                                    <Alert Title="Unavailable" SubTitle="No data yet" />
                                }
                            </MudTabPanel>
                            @if (Store.Items.Any(x => x.HasMarketListing))
                            {
                                <MudTabPanel Text="Marketplace Performance">
                                    @if (ItemMarketplacePerformanceChart != null)
                                    {
                                        <div class="ma-4">
                                            <ChartJsRadarChart @ref="ItemMarketplacePerformanceChartJs" Config="@ItemMarketplacePerformanceChart" />
                                        </div>
                                    }
                                    else
                                    {
                                        <Alert Title="Unavailable" SubTitle="No data yet" />
                                    }
                                </MudTabPanel>
                            }
                        </MudTabs>
                    </MudPaper >
                </MudItem>

            }
        </MudGrid>

    </PageContainer>
}

@code {

    private StoreIdentiferDTO[] StoreList { get; set; }
    
    private StoreDetailsDTO Store { get; set; }
    
    [Parameter]
    public string StoreId { get; set; }
    
    private int StoreIndex { get; set; }

    private Exception StoreException { get; set; }
    
    private ChartJsBarChart ItemSalesChartJs { get; set; }

    private ChartJsBarChart ItemSubscribersChartJs { get; set; }

    private ChartJsRadarChart ItemMarketplacePerformanceChartJs { get; set; }

    private BarConfig ItemSalesChart { get; set; }

    private BarConfig ItemSubscribersChart { get; set; }

    private RadarConfig ItemMarketplacePerformanceChart { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        // Load store list
        await LoadStoreList();
    }

    protected override async Task OnParametersSetAsync()
    {
        // If there is no store selected yet, navigate to the current one
        if (String.IsNullOrEmpty(StoreId))
        {
            NavigationManager.NavigateTo($"/store/current");
        }

        // Otherwise, load the selected store details
        else if (!String.Equals(StoreId, Store?.Id.ToString(), StringComparison.InvariantCultureIgnoreCase))
        {
            await LoadStore();
        }
    }
    
    private void OnSelectedStoreChanged(int index)
    {
        var oldStore = StoreList.ElementAtOrDefault(StoreIndex);
        StoreIndex = index;

        // Navigate to the selected store page
        var store = StoreList.ElementAtOrDefault(index);
        if (store != null && store != oldStore)
        {
            NavigationManager.NavigateTo($"/store/{store.Id}");  
        }
    }

    private async Task LoadStoreList()
    {
        try
        {
            Store = null;
            StoreList = null;
            StoreException = null;
            StateHasChanged();

            // Load the store list
            StoreList = await Http.GetFromJsonAsync<StoreIdentiferDTO[]>($"api/store");
   
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading the store list");
            Snackbar.Add($"Unable to load store list. {ex.Message}", MudBlazor.Severity.Error);
            StateHasChanged();
        }
    }

    private async Task LoadStore()
    {
        try
        {
            Store = null;
            StoreException = null;
            StateHasChanged();

            if (!String.IsNullOrEmpty(StoreId))
            {
                // Load the new store (if any)
                Store = await Http.GetFromJsonAsync<StoreDetailsDTO>($"api/store/{StoreId}");
                StoreId = Store.Id;
                
                // The selected store should show as the active tab in the store tab list
                StoreIndex = Array.IndexOf(StoreList, StoreList.FirstOrDefault(x => x.Id == StoreId));
                
                RedrawItemSalesChart();
                RedrawItemSubscribersChart();
                RedrawItemMarketplacePerformanceChart();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading store {StoreId}");
            Snackbar.Add($"Unable to load store details. {ex.Message}", MudBlazor.Severity.Error);
            StateHasChanged();
        }
    }

    private void BuyItemFromStore(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://store.steampowered.com/itemstore/{item.AppId}/detail/{item.Id}/"
        );
    }
    
    private void BuyItemFromMarket(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/market/listings/{item.AppId}/{Uri.EscapeDataString(item.Name)}"
        );
    }

    private void ViewItemWorkshopPage(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/sharedfiles/filedetails/?id={item.WorkshopFileId}"
        );
    }
    
    private void ShowItemTypeDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemListDialog>(item.ItemType, parameters: new DialogParameters()
        {
            ["ListName"] = item.ItemType,
            ["ListUrl"] = $"api/item/marketPriceRank/{item.ItemType}?compareWithItemId={item.AssetDescriptionId}",
            ["HighlightedItemId"] = item.AssetDescriptionId,
        });
    }

    private void ShowItemSalesDialog(StoreItemDetailsDTO item)
    {
    }

    private void ShowItemBreakdownDialog(StoreItemDetailsDTO item)
    {
    }
    
    private void ShowItemCollectionDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemCollectionDialog>(item.ItemCollection, parameters: new DialogParameters()
        {
            ["CollectionName"] = item.ItemCollection,
            ["CollectionUrl"] = $"api/item/collection/{item.ItemCollection}"
        });
    }
    
    private void RedrawItemSalesChart()
    {
        var storeItems = Store.Items
            .Where(x => x.HasWorkshopFile)
            .OrderBy(x => x.StoreIndex)
            .ToList();

        if (!storeItems.Any())
        {
            return;
        }

        ItemSalesChart = new BarConfig
        {
            Options = new BarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true,
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"

                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemSalesChart.Data.Labels.AddRange(
            storeItems.Select(x => x.Name).ToArray()
        );

        var localScaleString = String.Empty.PadRight(State.Currency.Scale, '0');
        var localScaleDivisor = Int64.Parse($"1{localScaleString}");

        var authorRevenue = new BarDataset<DoubleWrapper>
        {
            Label = "Skin Author Royalties",
            BackgroundColor = "#6BC16F",
            BorderColor = "#335E33",
            BorderWidth = 1
        };
        authorRevenue.AddRange(
            storeItems.Select(x => (DoubleWrapper)Math.Round((double)((x.SalesMinimum * x.StorePrice) * 0.25) / localScaleDivisor, State.Currency.Scale))
        );

        var totalRevenue = new BarDataset<DoubleWrapper>
        {
            Label = "Skin Sales Revenue",
            BackgroundColor = "#388e3c",
            BorderColor = "#1b5e20",
            BorderWidth = 1
        };
        totalRevenue.AddRange(
            storeItems.Select(x => (DoubleWrapper)Math.Round((double)(x.SalesMinimum * x.StorePrice) / localScaleDivisor, State.Currency.Scale))
        );

        ItemSalesChart.Data.Datasets.AddRange(new[] {
            authorRevenue, totalRevenue
        });
    }

    private void RedrawItemSubscribersChart()
    {
        var storeItems = Store.Items
            .Where(x => x.HasWorkshopFile)
            .OrderBy(x => x.StoreIndex)
            .ToList();

        if (!storeItems.Any())
        {
            return;
        }

        ItemSubscribersChart = new BarConfig
        {
            Options = new BarOptions
            {
                Legend = new Legend
                {
                    Display = false,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true,
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemSubscribersChart.Data.Labels.AddRange(
            storeItems.Select(x => x.Name).ToArray()
        );

        var itemSubscriptions = new BarDataset<DoubleWrapper>
        {
            Label = "Subscribers",
            BackgroundColor = "#388e3c",
            BorderColor = "#1b5e20",
            BorderWidth = 1
        };
        itemSubscriptions.AddRange(
            storeItems.Select(x => (DoubleWrapper)x.Subscriptions)
        );

        ItemSubscribersChart.Data.Datasets.AddRange(new[] {
            itemSubscriptions
        });
    }

    private void RedrawItemMarketplacePerformanceChart()
    {
        var storeItems = Store.Items
            .Where(x => x.HasMarketListing)
            .OrderBy(x => x.StoreIndex)
            .ToList();

        if (!storeItems.Any())
        {
            return;
        }

        ItemMarketplacePerformanceChart = new RadarConfig
        {
            Options = new RadarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scale = new Scale()
                {
                    Ticks = new LinearCartesianTicks()
                    {
                        Display = false,
                        BeginAtZero = true
                    }
                }
            }
        };

        ItemMarketplacePerformanceChart.Data.Labels.AddRange(
            storeItems.Select(x => x.Name).ToArray()
        );

        var itemMarketPrices = new RadarDataset
        {
            Label = "Market Price",
            BackgroundColor = "#bbdefb",
            BorderColor = "#0d47a1",
            BorderWidth = 1,
            Data = storeItems
                .Select(x => (double)x.Currency.ToPrice(x.MarketPrice ?? 0))
                .ToList()
        };

        var itemStorePrices = new RadarDataset
        {
            Label = "Store Price",
            BackgroundColor = "#c8e6c9",
            BorderColor = "#1b5e20",
            BorderWidth = 1,
            Data = storeItems
            .Select(x => (double)x.Currency.ToPrice(x.StorePrice))
            .ToList()
        };

        ItemMarketplacePerformanceChart.Data.Datasets.AddRange(new[] {
            itemMarketPrices, itemStorePrices
        });
    }

}
