@namespace SCMM.Web.Client.Shared.Dialog
@using SCMM.Steam.Data.Models.Enums
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Store
@inject ILogger<ViewItemListDialog> Logger
@inject ISnackbar Snackbar
@inject ExternalNavigationManager ExternalNavigation
@inject HttpClient Http

<MudDialog>
    <TitleContent>
        <MudText Typo="MudBlazor.Typo.h6">@ItemType</MudText>
    </TitleContent>
    <DialogContent>
        @if (Items == null)
        {
            <Loading Message="Loading item list..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
        } 
        else
        {
            <MudGrid Style="max-height:90vh; overflow-x:hidden; overflow-y:scroll">
                @foreach (var item in Items.OrderBy(x => x.BuyNowPrice))
                {
                    <MudItem xs="6" sm="3" md="2">
                        <div class="@((item is IPurchasable) ? "Item Purchasable mud-paper" : "Item mud-paper")" @onclick="@(() => BuyItem(item as IPurchasable))">
                            <div class="Item-Icon Hover-Zoom">
                                <img src="@item.IconUrl" />
                            </div>
                            <div class="ma-2 d-flex flex-column justify-center align-center Centered">
                                <MudText Typo="MudBlazor.Typo.body1" Style="@($"color: {item.ForegroundColour}")">@item.Name</MudText>
                                @if ((item is IPurchasable) && (item as IPurchasable).BuyNowPrice != null)
                                {
                                    <MudText Typo="MudBlazor.Typo.body2" Class="NoWrap">
                                        @switch((item as IPurchasable).BuyNowFrom)
                                        {
                                            case PriceType.SteamStore:
                                            {
                                                @:<i class="fas fa-fw fa-shopping-cart"></i>
                                                break;
                                            }
                                            case PriceType.SteamCommunityMarket:
                                            {
                                                @:<i class="fab fa-fw fa-steam"></i>
                                                break;
                                            }
                                        }
                                        <span>@((item as IPurchasable).BuyNowCurrency.ToPriceString((item as IPurchasable).BuyNowPrice.Value))</span>
                                    </MudText>
                                }
                            </div>
                        </div>
                    </MudItem>
                }
            </MudGrid>
        }
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter] 
    public MudDialogInstance Dialog { get; set; }
    
    [Parameter]
    public string ItemType { get; set; }

    [Parameter]
    public string ItemId { get; set; }

    private ItemDetailsDTO[] Items { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Items = await Http.GetFromJsonAsync<ItemDetailsDTO[]>($"api/item/marketPriceRank/{ItemType}?storeItemId={ItemId}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading the item list");
            Snackbar.Add($"Unable to load item list. {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Dialog.Options.CloseButton = true;
        Dialog.Options.MaxWidth = MudBlazor.MaxWidth.Medium;
        Dialog.Options.FullWidth = true;
        Dialog.SetOptions(Dialog.Options);
    }
    
    private void BuyItem(IPurchasable item)
    {
        if (!String.IsNullOrEmpty(item.BuyNowUrl))
        {
            ExternalNavigation.NavigateToNewTab(item.BuyNowUrl);
        }
    }
}
