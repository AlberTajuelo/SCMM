@namespace SCMM.Web.Client.Shared.Component
@using SCMM.Steam.Data.Models.Enums
@inject ExternalNavigationManager ExternalNavigationManager

<div class="@($"Item {GetDynamicClassNames()} mud-paper")" @onclick="@(() => BuyItem())">
    <div class="Item-Icon Hover-Zoom">
        <img src="@Item.IconUrl" />
    </div>
    <div class="ma-2 d-flex flex-column justify-center align-center Centered">
        <MudText Typo="MudBlazor.Typo.body1" Style="@($"color: {Item.ForegroundColour}")">
            <span>@Item.Name</span>
        </MudText>
        @if (PurchasableItem?.BuyNowPrice != null)
        {
            <MudText Typo="MudBlazor.Typo.body2" Class="NoWrap d-flex flex-row justify-center align-center">
                @switch(PurchasableItem.BuyNowFrom)
                {
                    case PriceType.SteamStore:
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 160 160" class="mx-2" style="height: 1em; width: 1em; border-radius: 50%; transform: scale(1.3);">
                            <g transform="translate(-25.56391,-410.25692)" style="touch-action: none;">
                                <path d="m 25.56391,410.25692 162.40601,0 0,166.16541 -162.40601,0 z"
                                        style="fill:#c5412b;fill-opacity:1;stroke:none" />
                                <path d="m 47.416161,512.46353 -0.16697,-33.88776 c 0,0 18.084074,6.44193 30.439259,6.65494 l 0.199996,21.71863 c 0,0 -14.541832,-0.005 -30.079681,5.77141"
                                        style="fill:#000000;fill-opacity:1;stroke:none" />
                                <path d="m 84.063745,485.03151 9.960159,-0.19921 0.199204,22.11704 -9.760957,0 z"
                                        style="color:#000000;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate" />
                                <path d="m 110.15976,489.31408 -6.43127,6.86197 6.84553,6.94142 6.33719,-7.18233 z"
                                        style="color:#000000;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate" />
                                <path d="m 100.39801,468.78009 21.39303,-0.0995 0.19901,10.34826 -21.29353,0 z"
                                        style="color:#000000;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate" />
                                <path d="m 128.25871,499.12835 -15.22388,15.12438 7.46268,7.26368 14.32836,-14.56707 z"
                                        style="color:#000000;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate" />
                                <path d="m 94.211261,431.42448 33.887759,-0.16697 c 0,0 -6.74044,18.97959 -6.95345,31.33477 l -20.6241,0.11049 c 0,0 -0.791019,-15.33784 -6.567429,-30.87569"
                                        style="fill:#000000;fill-opacity:1;stroke:none" />
                                <path d="m 166.84554,528.50948 -23.77932,24.14441 c 0,0 -8.70329,-18.16345 -17.31298,-27.02737 l 14.47289,-14.6935 c 0,0 11.43247,10.25543 26.52245,17.11723"
                                        style="fill:#000000;fill-opacity:1;stroke:none" />
                            </g>
                        </svg>
                        break;
                    }
                    case PriceType.SteamCommunityMarket:
                    {
                        <i class="fab fa-fw fa-steam mx-1" style="transform: scale(1.2)"></i>
                        break;
                    }
                }
                <span>@PurchasableItem.BuyNowCurrency.ToPriceString(PurchasableItem.BuyNowPrice.Value)</span>
            </MudText>
        }
        @if (SubscribableItem?.Subscriptions > 0)
        {
            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="NoWrap">
                <i class="fas fa-fw fa-user"></i>
                <span>@SubscribableItem.Subscriptions.Value.ToQuantityString()</span>
            </MudText>
        }
    </div>
</div>

@code {

    [Parameter]
    public bool Highlighted { get; set; }

    [Parameter]
    public IItemDescription Item { get; set; }

    private IPurchasable PurchasableItem => (Item as IPurchasable);
    
    private ISubscribable SubscribableItem => (Item as ISubscribable);

    private string GetDynamicClassNames()
    {
        var classNames = new List<string>();
        if (PurchasableItem != null)
        {
            classNames.Add("Purchasable");
        }
        if (Highlighted)
        {
            classNames.Add("Highlighted");
        }
        return String.Join(' ', classNames);
    }
    private void BuyItem()
    {
        if (!String.IsNullOrEmpty(PurchasableItem?.BuyNowUrl))
        {
            ExternalNavigationManager.NavigateToNewTab(PurchasableItem.BuyNowUrl);
        }
    }

}
