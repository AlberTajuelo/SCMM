@namespace SCMM.Web.Client.Pages.Steam.Inventory
@using SCMM.Web.Shared.Domain.DTOs.InventoryItems
@using SCMM.Web.Shared
@inherits ComponentBase
@inject HttpClient Http
@inject AppState State

<TableRow @key="@Item.Id" Hover>
    <TableCell Component="th" Scope="row" Class="@GetItemClass()">
        <div style="display:flex; align-content:center; align-items:center">
            <img src="@Item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
            <strong style="margin:8px">@Item.Name</strong>
            @if (Item.Quantity > 1)
            { 
            <div class="Chip-Root">
                <span class="Chip-Label">
                    @Item.Quantity.ToQuantityString()
                </span>
            </div>
            }
        </div>
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @if (ReadOnly)
        {
            @if (!String.IsNullOrEmpty(Value))
            {
                @Value
            }
            else
            {
                <span>—</span>
            }
        }
        else
        {
        <InputBase Margin="@Margin.None" Style="width:70px" PlaceHolder="Price" Value="@Value"
                   OnChange="@((e) => UpdateItemPrice(e.Value.ToString()))">
            <StartAdornment>
                @if (Item.Currency != null)
                {
                    <span style="padding-right:5px;">@Item.Currency.PrefixText</span>
                }
                else
                {
                    <span style="padding-right:5px;">@State.Currency.PrefixText</span>
                }
            </StartAdornment>
        </InputBase>
        }
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @if (Item.MarketItem != null)
        {
            @Item.MarketItem.Currency.ToPriceString(Item.MarketItem.Last1hrValue)
        }
        else
        {
            <span>—</span>
        }
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @if (Item.MarketItem != null)
        {
            @Item.MarketItem.Currency.ToPriceString(Item.MarketItem.ResellPrice) 
        }
        else
        {
            <span>—</span>
        }
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @if (Item.MarketItem != null)
        {
            @Item.MarketItem.Currency.ToPriceString(Item.MarketItem.ResellTax) 
        }
        else
        {
            <span>—</span>
        }
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @if (Item.MarketItem != null && Item.BuyPrice > 0)
        {
            @Item.MarketItem.Currency.ToPriceString(Item.MarketItem.ResellPrice - Item.MarketItem.ResellTax - Item.BuyPrice.Value) 
        }
        else
        {
            <span>—</span>
        }
    </TableCell>
    <TableCell Class="@GetItemClass()">
        @if (Item.MarketItem != null && Item.BuyPrice > 0)
        {@(((int)Math.Round(((decimal)(Item.MarketItem.ResellPrice - Item.MarketItem.ResellTax) / Item.BuyPrice.Value) * 100, 0) - 100).ToRoIString()) 
        }
        else
        {
            <span>∞</span>
        }
    </TableCell>
</TableRow>

@code { 

    [Parameter]
    public InventoryItemListDTO Item { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    public string Value { get; set; }

    protected override void OnInitialized()
    {
        Value = Item.BuyPrice != null 
            ? Item.Currency?.ToPriceString(Item.BuyPrice.Value, dense: true) 
            : null;
    }

    private string GetItemClass()
    {
        if (Item.BuyPrice == 0 || Item.BuyPrice == null || Item.MarketItem == null)
        {
            return null;
        }
        var roi = ((int)Math.Round(((decimal)(Item.MarketItem.ResellPrice - Item.MarketItem.ResellTax) / Item.BuyPrice.Value) * 100, 0));
        if (roi >= 100)
        {
            return "Background-Success";
        }
        if (roi < 100)
        {
            return "Background-Error";
        }
        return null;
    }

    private async Task UpdateItemPrice(string value)
    {
        var buyPrice = SCMM.Steam.Shared.SteamEconomyHelper.GetPriceValueAsInt(value, useDecimalShortCircuit: false);
        if (buyPrice != Item.BuyPrice)
        {
            Item.Currency = State.Currency;
            Item.BuyPrice = SCMM.Steam.Shared.SteamEconomyHelper.GetPriceValueAsInt(value, useDecimalShortCircuit: false);
            await Http.PutAsJsonAsync($"api/inventory/item/{Item.Id}", new UpdateInventoryItemPriceCommand()
            {
                CurrencyId = State.Currency.Id,
                Price = value
            });
        }
    }

}
