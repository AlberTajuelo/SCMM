@inherits ResponsiveDialog
@inject AppState State

<MudDialog>
    <TitleContent>
        <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default">Select an item</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid Spacing="2" Class="mb-4">
            @if (ItemTypes != null)
            {
                @foreach (var itemGroup in ItemTypes.GroupBy(x => x.ToRustItemGroup()).OrderBy(x => x.Key))
                {
                    @if (!String.IsNullOrEmpty(itemGroup.Key))
                    {
                        <MudItem xs="12" Class="ma-2">
                            <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Secondary">@itemGroup.Key</MudText>
                        </MudItem>
                    }
                    @foreach (var itemType in itemGroup.OrderBy(x => x))
                    {
                        <MudItem xs="6" sm="4" md="2" Class="d-flex clickable hover-zoom hover-darken pa-1" @onclick="@(() => this.Dialog.Close(itemType))">
                            <div class="d-flex flex-row align-center">
                                <img src="/images/app/@(State.AppId)/items/@(itemType.ToRustItemShortName()).png" class="mr-2" style="height:3em" />
                                <span>@itemType</span>
                            </div>
                        </MudItem>
                    }
                }
            }
        </MudGrid>
    </DialogContent>
</MudDialog>

@code {

    [Parameter]
    public string ItemType { get; set; }

    [Parameter]
    public string[] ItemTypes { get; set; }

    protected override void OnConfigure(ResponsiveDialogOptions options)
    {
        options.FullscreenBreakpoint = MudBlazor.Breakpoint.Md;
        options.MaxWidth = MudBlazor.MaxWidth.Medium;
        options.CloseButton = true;
    }
    
    protected override bool ShouldRender() => false;

}
