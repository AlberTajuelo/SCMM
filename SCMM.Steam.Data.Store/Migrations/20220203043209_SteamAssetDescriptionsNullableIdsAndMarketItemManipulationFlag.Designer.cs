// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCMM.Steam.Data.Store;

#nullable disable

namespace SCMM.Steam.Data.Store.Migrations
{
    [DbContext(typeof(SteamDbContext))]
    [Migration("20220203043209_SteamAssetDescriptionsNullableIdsAndMarketItemManipulationFlag")]
    partial class SteamAssetDescriptionsNullableIdsAndMarketItemManipulationFlag
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SCMM.Shared.Data.Store.FileData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTimeOffset?>("ExpiresOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileData");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.DiscordConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiscordGuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiscordGuildId");

                    b.ToTable("DiscordConfiguration");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.DiscordGuild", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiscordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("Flags")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.ToTable("DiscordGuilds");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamApp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconLargeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ItemDefinitionsDigest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("StoreTypes")
                        .HasColumnType("tinyint");

                    b.Property<string>("Subdomain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurfaceColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TertiaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TimeUpdated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("SteamId")
                        .IsUnique();

                    b.ToTable("SteamApps");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamAssetDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("AssetType")
                        .HasColumnType("tinyint");

                    b.Property<string>("BackgroundColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BanReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ClassId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("CreatorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<Guid?>("CreatorProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CurrentFavourited")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentSubscriptions")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("CutoutRatio")
                        .HasPrecision(20, 20)
                        .HasColumnType("decimal(20,20)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionWorkshop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DominantColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForegroundColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("GlowRatio")
                        .HasPrecision(20, 20)
                        .HasColumnType("decimal(20,20)");

                    b.Property<bool?>("HasCutout")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasGlow")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasGlowSights")
                        .HasColumnType("bit");

                    b.Property<Guid?>("IconId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IconLargeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconLargeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBreakable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCommodity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCraftable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCraftingComponent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMarketable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecialDrop")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTradable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwitchDrop")
                        .HasColumnType("bit");

                    b.Property<string>("ItemCollection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ItemDefinitionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("ItemShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LifetimeFavourited")
                        .HasColumnType("bigint");

                    b.Property<long?>("LifetimeSubscriptions")
                        .HasColumnType("bigint");

                    b.Property<int?>("MarketableRestrictionDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NameId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("NameWorkshop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PreviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PreviewUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TimeAccepted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TimeCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TimeRefreshed")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TimeUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TradableRestrictionDays")
                        .HasColumnType("int");

                    b.Property<long?>("Views")
                        .HasColumnType("bigint");

                    b.Property<long?>("VotesDown")
                        .HasColumnType("bigint");

                    b.Property<long?>("VotesUp")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("WorkshopFileId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("WorkshopFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("ClassId")
                        .IsUnique()
                        .HasFilter("[ClassId] IS NOT NULL");

                    b.HasIndex("CreatorProfileId");

                    b.HasIndex("IconId");

                    b.HasIndex("IconLargeId");

                    b.HasIndex("ItemDefinitionId")
                        .IsUnique()
                        .HasFilter("[ItemDefinitionId] IS NOT NULL");

                    b.HasIndex("PreviewId");

                    b.HasIndex("WorkshopFileId")
                        .IsUnique()
                        .HasFilter("[WorkshopFileId] IS NOT NULL");

                    b.ToTable("SteamAssetDescriptions");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamAssetFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SteamAppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SteamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SteamAppId");

                    b.ToTable("SteamAssetFilter");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CultureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExchangeRateMultiplier")
                        .HasColumnType("decimal(29,21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefixText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Scale")
                        .HasColumnType("int");

                    b.Property<string>("SteamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SuffixText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SteamId")
                        .IsUnique();

                    b.ToTable("SteamCurrencies");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamCurrencyExchangeRate", b =>
                {
                    b.Property<string>("CurrencyId")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("ExchangeRateMultiplier")
                        .HasColumnType("decimal(29,21)");

                    b.HasKey("CurrencyId", "Timestamp");

                    b.ToTable("SteamCurrencyExchangeRates");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamItemStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("End")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ItemsThumbnailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("Start")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ItemsThumbnailId");

                    b.HasIndex("AppId", "Start", "End", "Name")
                        .IsUnique()
                        .HasFilter("[Start] IS NOT NULL AND [End] IS NOT NULL AND [Name] IS NOT NULL");

                    b.ToTable("SteamItemStores");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CultureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SteamId")
                        .IsUnique();

                    b.ToTable("SteamLanguages");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AllTimeAverageValue")
                        .HasColumnType("bigint");

                    b.Property<long>("AllTimeHighestValue")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("AllTimeHighestValueOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("AllTimeLowestValue")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("AllTimeLowestValueOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BuyLaterFee")
                        .HasColumnType("bigint");

                    b.Property<byte>("BuyLaterFrom")
                        .HasColumnType("tinyint");

                    b.Property<long>("BuyLaterPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("BuyNowFee")
                        .HasColumnType("bigint");

                    b.Property<byte>("BuyNowFrom")
                        .HasColumnType("tinyint");

                    b.Property<long>("BuyNowPrice")
                        .HasColumnType("bigint");

                    b.Property<int>("BuyOrderCount")
                        .HasColumnType("int");

                    b.Property<long>("BuyOrderCumulativePrice")
                        .HasColumnType("bigint");

                    b.Property<long>("BuyOrderHighestPrice")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("First24hrSales")
                        .HasColumnType("bigint");

                    b.Property<long>("First24hrValue")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("FirstSaleOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsBeingManipulated")
                        .HasColumnType("bit");

                    b.Property<long>("Last120hrSales")
                        .HasColumnType("bigint");

                    b.Property<long>("Last120hrValue")
                        .HasColumnType("bigint");

                    b.Property<long>("Last144hrSales")
                        .HasColumnType("bigint");

                    b.Property<long>("Last144hrValue")
                        .HasColumnType("bigint");

                    b.Property<long>("Last168hrSales")
                        .HasColumnType("bigint");

                    b.Property<long>("Last168hrValue")
                        .HasColumnType("bigint");

                    b.Property<long>("Last1hrSales")
                        .HasColumnType("bigint");

                    b.Property<long>("Last1hrValue")
                        .HasColumnType("bigint");

                    b.Property<long>("Last24hrSales")
                        .HasColumnType("bigint");

                    b.Property<long>("Last24hrValue")
                        .HasColumnType("bigint");

                    b.Property<long>("Last48hrSales")
                        .HasColumnType("bigint");

                    b.Property<long>("Last48hrValue")
                        .HasColumnType("bigint");

                    b.Property<long>("Last72hrSales")
                        .HasColumnType("bigint");

                    b.Property<long>("Last72hrValue")
                        .HasColumnType("bigint");

                    b.Property<long>("Last96hrSales")
                        .HasColumnType("bigint");

                    b.Property<long>("Last96hrValue")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("LastCheckedOrdersOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastCheckedSalesOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastSaleOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("LastSaleValue")
                        .HasColumnType("bigint");

                    b.Property<long>("SellLaterFee")
                        .HasColumnType("bigint");

                    b.Property<long>("SellLaterPrice")
                        .HasColumnType("bigint");

                    b.Property<byte>("SellLaterTo")
                        .HasColumnType("tinyint");

                    b.Property<long>("SellNowFee")
                        .HasColumnType("bigint");

                    b.Property<long>("SellNowPrice")
                        .HasColumnType("bigint");

                    b.Property<byte>("SellNowTo")
                        .HasColumnType("tinyint");

                    b.Property<int>("SellOrderCount")
                        .HasColumnType("int");

                    b.Property<long>("SellOrderCumulativePrice")
                        .HasColumnType("bigint");

                    b.Property<long>("SellOrderLowestPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("Stable24hrBuyOrderHighestPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("Stable24hrSellOrderLowestPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("Stable24hrValue")
                        .HasColumnType("bigint");

                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DescriptionId")
                        .IsUnique()
                        .HasFilter("[DescriptionId] IS NOT NULL");

                    b.HasIndex("SteamId", "DescriptionId")
                        .IsUnique()
                        .HasFilter("[SteamId] IS NOT NULL AND [DescriptionId] IS NOT NULL");

                    b.ToTable("SteamMarketItems");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItemActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuyerAvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("SellerAvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("ItemId");

                    b.HasIndex("Timestamp", "DescriptionId", "Type", "Price", "Quantity", "BuyerName", "SellerName")
                        .IsUnique()
                        .HasFilter("[DescriptionId] IS NOT NULL AND [BuyerName] IS NOT NULL AND [SellerName] IS NOT NULL");

                    b.ToTable("SteamMarketItemActivity");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItemBuyOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("SteamMarketItemBuyOrder");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItemOrderSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuyCount")
                        .HasColumnType("int");

                    b.Property<long>("BuyCumulativePrice")
                        .HasColumnType("bigint");

                    b.Property<long>("BuyHighestPrice")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SellCount")
                        .HasColumnType("int");

                    b.Property<long>("SellCumulativePrice")
                        .HasColumnType("bigint");

                    b.Property<long>("SellLowestPrice")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("SteamMarketItemOrderSummaries");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItemSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MedianPrice")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("SteamMarketItemSale");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItemSellOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("SteamMarketItemSellOrder");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarLargeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiscordId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DonatorLevel")
                        .HasColumnType("int");

                    b.Property<long>("GamblingOffset")
                        .HasColumnType("bigint");

                    b.Property<int>("ItemAnalyticsParticipation")
                        .HasColumnType("int");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastSignedInOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdatedInventoryOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastViewedInventoryOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Privacy")
                        .HasColumnType("tinyint");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TradeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DiscordId")
                        .IsUnique()
                        .HasFilter("[DiscordId] IS NOT NULL");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SteamId")
                        .IsUnique()
                        .HasFilter("[SteamId] IS NOT NULL");

                    b.ToTable("SteamProfiles");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamProfileConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SteamProfileConfiguration");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamProfileInventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("AcquiredBy")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("BuyPrice")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Flags")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SteamId", "DescriptionId", "ProfileId")
                        .IsUnique()
                        .HasFilter("[SteamId] IS NOT NULL AND [DescriptionId] IS NOT NULL");

                    b.ToTable("SteamProfileInventoryItems");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamProfileMarketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Flags")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SteamId", "DescriptionId", "ProfileId")
                        .IsUnique()
                        .HasFilter("[SteamId] IS NOT NULL AND [DescriptionId] IS NOT NULL");

                    b.ToTable("SteamProfileMarketItems");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamStoreItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasReturnedToStore")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<long?>("Price")
                        .HasColumnType("bigint");

                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("TotalSalesMax")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalSalesMin")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DescriptionId")
                        .IsUnique()
                        .HasFilter("[DescriptionId] IS NOT NULL");

                    b.HasIndex("SteamId", "DescriptionId")
                        .IsUnique()
                        .HasFilter("[SteamId] IS NOT NULL AND [DescriptionId] IS NOT NULL");

                    b.ToTable("SteamStoreItems");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamStoreItemItemStore", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPriceVerified")
                        .HasColumnType("bit");

                    b.Property<long?>("Price")
                        .HasColumnType("bigint");

                    b.Property<int?>("TopSellerIndex")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "StoreId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("StoreId");

                    b.ToTable("SteamStoreItemItemStore");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.DiscordConfiguration", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.DiscordGuild", null)
                        .WithMany("Configurations")
                        .HasForeignKey("DiscordGuildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SCMM.Shared.Data.Store.Types.PersistableStringCollection", "List", b1 =>
                        {
                            b1.Property<Guid>("DiscordConfigurationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DiscordConfigurationId");

                            b1.ToTable("DiscordConfiguration");

                            b1.WithOwner()
                                .HasForeignKey("DiscordConfigurationId");
                        });

                    b.Navigation("List")
                        .IsRequired();
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamAssetDescription", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamApp", "App")
                        .WithMany("AssetDescriptions")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCMM.Steam.Data.Store.SteamProfile", "CreatorProfile")
                        .WithMany("AssetDescriptions")
                        .HasForeignKey("CreatorProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SCMM.Shared.Data.Store.FileData", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.HasOne("SCMM.Shared.Data.Store.FileData", "IconLarge")
                        .WithMany()
                        .HasForeignKey("IconLargeId");

                    b.HasOne("SCMM.Shared.Data.Store.FileData", "Preview")
                        .WithMany()
                        .HasForeignKey("PreviewId");

                    b.OwnsOne("SCMM.Steam.Data.Store.Types.PersistableAssetQuantityDictionary", "BreaksIntoComponents", b1 =>
                        {
                            b1.Property<Guid>("SteamAssetDescriptionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamAssetDescriptionId");

                            b1.ToTable("SteamAssetDescriptions");

                            b1.WithOwner()
                                .HasForeignKey("SteamAssetDescriptionId");
                        });

                    b.OwnsOne("SCMM.Steam.Data.Store.Types.PersistableAssetQuantityDictionary", "CraftingComponents", b1 =>
                        {
                            b1.Property<Guid>("SteamAssetDescriptionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamAssetDescriptionId");

                            b1.ToTable("SteamAssetDescriptions");

                            b1.WithOwner()
                                .HasForeignKey("SteamAssetDescriptionId");
                        });

                    b.OwnsOne("SCMM.Shared.Data.Store.Types.PersistableStringCollection", "Notes", b1 =>
                        {
                            b1.Property<Guid>("SteamAssetDescriptionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamAssetDescriptionId");

                            b1.ToTable("SteamAssetDescriptions");

                            b1.WithOwner()
                                .HasForeignKey("SteamAssetDescriptionId");
                        });

                    b.OwnsOne("SCMM.Shared.Data.Store.Types.PersistableStringDictionary", "Tags", b1 =>
                        {
                            b1.Property<Guid>("SteamAssetDescriptionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamAssetDescriptionId");

                            b1.ToTable("SteamAssetDescriptions");

                            b1.WithOwner()
                                .HasForeignKey("SteamAssetDescriptionId");
                        });

                    b.OwnsOne("SCMM.Steam.Data.Store.Types.PersistableChangeNotesDictionary", "Changes", b1 =>
                        {
                            b1.Property<Guid>("SteamAssetDescriptionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamAssetDescriptionId");

                            b1.ToTable("SteamAssetDescriptions");

                            b1.WithOwner()
                                .HasForeignKey("SteamAssetDescriptionId");
                        });

                    b.OwnsOne("SCMM.Steam.Data.Store.Types.PersistableMediaDictionary", "Previews", b1 =>
                        {
                            b1.Property<Guid>("SteamAssetDescriptionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamAssetDescriptionId");

                            b1.ToTable("SteamAssetDescriptions");

                            b1.WithOwner()
                                .HasForeignKey("SteamAssetDescriptionId");
                        });

                    b.Navigation("App");

                    b.Navigation("BreaksIntoComponents")
                        .IsRequired();

                    b.Navigation("Changes")
                        .IsRequired();

                    b.Navigation("CraftingComponents")
                        .IsRequired();

                    b.Navigation("CreatorProfile");

                    b.Navigation("Icon");

                    b.Navigation("IconLarge");

                    b.Navigation("Notes")
                        .IsRequired();

                    b.Navigation("Preview");

                    b.Navigation("Previews")
                        .IsRequired();

                    b.Navigation("Tags")
                        .IsRequired();
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamAssetFilter", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamApp", null)
                        .WithMany("Filters")
                        .HasForeignKey("SteamAppId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("SCMM.Shared.Data.Store.Types.PersistableStringDictionary", "Options", b1 =>
                        {
                            b1.Property<Guid>("SteamAssetFilterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamAssetFilterId");

                            b1.ToTable("SteamAssetFilter");

                            b1.WithOwner()
                                .HasForeignKey("SteamAssetFilterId");
                        });

                    b.Navigation("Options")
                        .IsRequired();
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamItemStore", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamApp", "App")
                        .WithMany("ItemStores")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCMM.Shared.Data.Store.FileData", "ItemsThumbnail")
                        .WithMany()
                        .HasForeignKey("ItemsThumbnailId");

                    b.OwnsOne("SCMM.Shared.Data.Store.Types.PersistableStringCollection", "Media", b1 =>
                        {
                            b1.Property<Guid>("SteamItemStoreId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamItemStoreId");

                            b1.ToTable("SteamItemStores");

                            b1.WithOwner()
                                .HasForeignKey("SteamItemStoreId");
                        });

                    b.OwnsOne("SCMM.Shared.Data.Store.Types.PersistableStringCollection", "Notes", b1 =>
                        {
                            b1.Property<Guid>("SteamItemStoreId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamItemStoreId");

                            b1.ToTable("SteamItemStores");

                            b1.WithOwner()
                                .HasForeignKey("SteamItemStoreId");
                        });

                    b.Navigation("App");

                    b.Navigation("ItemsThumbnail");

                    b.Navigation("Media")
                        .IsRequired();

                    b.Navigation("Notes")
                        .IsRequired();
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItem", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamApp", "App")
                        .WithMany("MarketItems")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCMM.Steam.Data.Store.SteamCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SCMM.Steam.Data.Store.SteamAssetDescription", "Description")
                        .WithOne("MarketItem")
                        .HasForeignKey("SCMM.Steam.Data.Store.SteamMarketItem", "DescriptionId");

                    b.OwnsOne("SCMM.Steam.Data.Store.Types.PersistablePriceCollection", "BuyOrderHighestPriceRolling24hrs", b1 =>
                        {
                            b1.Property<Guid>("SteamMarketItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamMarketItemId");

                            b1.ToTable("SteamMarketItems");

                            b1.WithOwner()
                                .HasForeignKey("SteamMarketItemId");
                        });

                    b.OwnsOne("SCMM.Steam.Data.Store.Types.PersistableMarketPriceDictionary", "BuyPrices", b1 =>
                        {
                            b1.Property<Guid>("SteamMarketItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamMarketItemId");

                            b1.ToTable("SteamMarketItems");

                            b1.WithOwner()
                                .HasForeignKey("SteamMarketItemId");
                        });

                    b.OwnsOne("SCMM.Steam.Data.Store.Types.PersistablePriceCollection", "SalesPriceRolling24hrs", b1 =>
                        {
                            b1.Property<Guid>("SteamMarketItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamMarketItemId");

                            b1.ToTable("SteamMarketItems");

                            b1.WithOwner()
                                .HasForeignKey("SteamMarketItemId");
                        });

                    b.OwnsOne("SCMM.Steam.Data.Store.Types.PersistablePriceCollection", "SellOrderLowestPriceRolling24hrs", b1 =>
                        {
                            b1.Property<Guid>("SteamMarketItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamMarketItemId");

                            b1.ToTable("SteamMarketItems");

                            b1.WithOwner()
                                .HasForeignKey("SteamMarketItemId");
                        });

                    b.OwnsOne("SCMM.Steam.Data.Store.Types.PersistableMarketPriceDictionary", "SellPrices", b1 =>
                        {
                            b1.Property<Guid>("SteamMarketItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamMarketItemId");

                            b1.ToTable("SteamMarketItems");

                            b1.WithOwner()
                                .HasForeignKey("SteamMarketItemId");
                        });

                    b.Navigation("App");

                    b.Navigation("BuyOrderHighestPriceRolling24hrs")
                        .IsRequired();

                    b.Navigation("BuyPrices")
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Description");

                    b.Navigation("SalesPriceRolling24hrs")
                        .IsRequired();

                    b.Navigation("SellOrderLowestPriceRolling24hrs")
                        .IsRequired();

                    b.Navigation("SellPrices")
                        .IsRequired();
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItemActivity", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SCMM.Steam.Data.Store.SteamAssetDescription", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("SCMM.Steam.Data.Store.SteamMarketItem", "Item")
                        .WithMany("Activity")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Description");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItemBuyOrder", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamMarketItem", "Item")
                        .WithMany("BuyOrders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItemOrderSummary", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamMarketItem", "Item")
                        .WithMany("OrdersHistory")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItemSale", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamMarketItem", "Item")
                        .WithMany("SalesHistory")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItemSellOrder", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamMarketItem", "Item")
                        .WithMany("SellOrders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamProfile", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SCMM.Steam.Data.Store.SteamLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.OwnsOne("SCMM.Shared.Data.Store.Types.PersistableStringDictionary", "Preferences", b1 =>
                        {
                            b1.Property<Guid>("SteamProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamProfileId");

                            b1.ToTable("SteamProfiles");

                            b1.WithOwner()
                                .HasForeignKey("SteamProfileId");
                        });

                    b.OwnsOne("SCMM.Shared.Data.Store.Types.PersistableStringCollection", "Roles", b1 =>
                        {
                            b1.Property<Guid>("SteamProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamProfileId");

                            b1.ToTable("SteamProfiles");

                            b1.WithOwner()
                                .HasForeignKey("SteamProfileId");
                        });

                    b.Navigation("Currency");

                    b.Navigation("Language");

                    b.Navigation("Preferences")
                        .IsRequired();

                    b.Navigation("Roles")
                        .IsRequired();
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamProfileConfiguration", b =>
                {
                    b.OwnsOne("SCMM.Shared.Data.Store.Types.PersistableStringCollection", "List", b1 =>
                        {
                            b1.Property<Guid>("SteamProfileConfigurationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamProfileConfigurationId");

                            b1.ToTable("SteamProfileConfiguration");

                            b1.WithOwner()
                                .HasForeignKey("SteamProfileConfigurationId");
                        });

                    b.Navigation("List")
                        .IsRequired();
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamProfileInventoryItem", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamApp", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCMM.Steam.Data.Store.SteamCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SCMM.Steam.Data.Store.SteamAssetDescription", "Description")
                        .WithMany("InventoryItems")
                        .HasForeignKey("DescriptionId");

                    b.HasOne("SCMM.Steam.Data.Store.SteamProfile", "Profile")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("Currency");

                    b.Navigation("Description");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamProfileMarketItem", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamApp", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCMM.Steam.Data.Store.SteamAssetDescription", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("SCMM.Steam.Data.Store.SteamProfile", "Profile")
                        .WithMany("MarketItems")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("Description");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamStoreItem", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamApp", "App")
                        .WithMany("StoreItems")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCMM.Steam.Data.Store.SteamCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SCMM.Steam.Data.Store.SteamAssetDescription", "Description")
                        .WithOne("StoreItem")
                        .HasForeignKey("SCMM.Steam.Data.Store.SteamStoreItem", "DescriptionId");

                    b.OwnsOne("SCMM.Steam.Data.Store.Types.PersistablePriceDictionary", "Prices", b1 =>
                        {
                            b1.Property<Guid>("SteamStoreItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamStoreItemId");

                            b1.ToTable("SteamStoreItems");

                            b1.WithOwner()
                                .HasForeignKey("SteamStoreItemId");
                        });

                    b.Navigation("App");

                    b.Navigation("Currency");

                    b.Navigation("Description");

                    b.Navigation("Prices")
                        .IsRequired();
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamStoreItemItemStore", b =>
                {
                    b.HasOne("SCMM.Steam.Data.Store.SteamCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SCMM.Steam.Data.Store.SteamStoreItem", "Item")
                        .WithMany("Stores")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SCMM.Steam.Data.Store.SteamItemStore", "Store")
                        .WithMany("Items")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("SCMM.Steam.Data.Store.Types.PersistablePriceDictionary", "Prices", b1 =>
                        {
                            b1.Property<Guid>("SteamStoreItemItemStoreItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("SteamStoreItemItemStoreStoreId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Serialised")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SteamStoreItemItemStoreItemId", "SteamStoreItemItemStoreStoreId");

                            b1.ToTable("SteamStoreItemItemStore");

                            b1.WithOwner()
                                .HasForeignKey("SteamStoreItemItemStoreItemId", "SteamStoreItemItemStoreStoreId");
                        });

                    b.Navigation("Currency");

                    b.Navigation("Item");

                    b.Navigation("Prices")
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.DiscordGuild", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamApp", b =>
                {
                    b.Navigation("AssetDescriptions");

                    b.Navigation("Filters");

                    b.Navigation("ItemStores");

                    b.Navigation("MarketItems");

                    b.Navigation("StoreItems");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamAssetDescription", b =>
                {
                    b.Navigation("InventoryItems");

                    b.Navigation("MarketItem");

                    b.Navigation("StoreItem");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamItemStore", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamMarketItem", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("BuyOrders");

                    b.Navigation("OrdersHistory");

                    b.Navigation("SalesHistory");

                    b.Navigation("SellOrders");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamProfile", b =>
                {
                    b.Navigation("AssetDescriptions");

                    b.Navigation("InventoryItems");

                    b.Navigation("MarketItems");
                });

            modelBuilder.Entity("SCMM.Steam.Data.Store.SteamStoreItem", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
