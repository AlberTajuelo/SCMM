@using MudBlazor.Utilities
@inject ILogger<ViewItemModelDialog> Logger
@inject IJSRuntime JS

<div @attributes="AdditionalAttributes">
    <div @ref=Container class="scene-container full-width full-height">
        
        <div class="scene-controls position-top position-left d-flex flex-row align-center justify-center ma-2">
            <MudTooltip Text="Reset camera">
                <MudIconButton OnClick="@OnResetCameraClicked" Icon="fas fa-video" Color="Color.Default" Disabled="@(Scene == null)" />
            </MudTooltip>
            <MudTooltip Text="Toggle rotate animation">
                <MudToggleIconButton Toggled="@IsRotating" ToggledChanged="@OnToggleAutoRotateChanged" Icon="fas fa-fw fa-play" ToggledIcon="fas fa-fw fa-pause" Color="@Color.Default" ToggledColor="@Color.Default" Disabled="@(Scene == null)" Class="ml-2" />
            </MudTooltip>
            <MudText Typo="@Typo.caption" Color="@Color.Default" Class="no-wrap full-width">Auto-rotate</MudText>
            @if (!DisableCutoutControls)
            {
                <MudTooltip Text="Show/hide cutout">
                    <MudToggleIconButton Toggled="@IsCutoutVisible" ToggledChanged="@OnToggleAlphaCutoffChanged" Icon="fas fa-fw fa-eye" ToggledIcon="fas fa-fw fa-eye-slash" Color="@Color.Default" ToggledColor="@Color.Default" Disabled="@(Scene == null)" Class="ml-2" />
                </MudTooltip>
                <MudText Typo="@Typo.caption" Color="@Color.Default" Class="no-wrap full-width">Cutout</MudText>
            }
            @if (!DisableGlowControls)
            {
                <MudTooltip Text="Slide to set the glow effect intensity">
                    <MudIcon Icon="fas fa-fw fa-moon ml-2" Size="@Size.Medium" />
                </MudTooltip>
                <MudSlider T="double" ValueChanged="@OnEmissionIntensityChanged" Min="0" Max="1" Step="0.1" Disabled="@(Scene == null)" Class="ml-4 ma-2" />
            }
        </div>
        
        <div class="scene-controls position-top position-right d-flex flex-row align-center justify-center ma-2">
            <MudTooltip Text="Toggle the lights on/off">
                <MudToggleIconButton Toggled="@IsLightOn" ToggledChanged="@OnToggleLightChanged" Icon="@Icons.Filled.LightMode" ToggledIcon="@Icons.Filled.LightMode" Color="@Color.Default" ToggledColor="@Color.Warning" Disabled="@(Scene == null)" Class="" />
            </MudTooltip>
            <MudSlider T="double" ValueChanged="@OnLightIntensityChanged" Min="0" Max="1" Step="0.1" Disabled="@(Scene == null || !IsLightOn)" Class="ma-2 mr-4" />
        </div>
        
        @*
        <div class="scene-controls position-bottom position-left d-flex flex-row align-center justify-center ma-2">
            <MudColorPicker ValueChanged="@OnLightColorChanged" Adornment="@Adornment.Start" AdornmentIcon="fa fa-fw fa-sun" 
                            Variant="@Variant.Outlined" PickerVariant="PickerVariant.Inline" ColorPickerView="ColorPickerView.Palette" DisableToolbar="false" DisableAlpha="true" />
        </div>
        *@
        
        @if(Scene != null) 
        {
            <div class="scene-controls position-bottom d-flex flex-row align-center justify-center full-width ma-2">
                <Alert Variant="MudBlazor.Variant.Text" Severity="MudBlazor.Severity.Normal" Icon="fas fa-fw fa-info-circle" Title="Use left mouse to look around. Right mouse to pan. Middle mouse to zoom in/out." />
            </div>
        }
        
        @if (IsLoading) 
        {
            <div class="scene-controls position-top d-flex flex-row align-center justify-center full-width full-height">
                <Loading Message="Loading model..." Progress="@ProgressLoaded" Total="@ProgressTotal" Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
            </div>
        }
        else if (!String.IsNullOrEmpty(Error))
        {
            <div class="scene-controls position-top d-flex flex-row align-center justify-center full-width full-height">
                <Alert Variant="MudBlazor.Variant.Text" Severity="MudBlazor.Severity.Error" Icon="fas fa-fw fa-exclamation-triangle" Title="Unable to load model" SubTitle="@Error" />
            </div>
        }

    </div>
</div>

@code {

    [Parameter]
    public string ItemType { get; set; }
    
    [Parameter]
    public string WorkshopFileUrl { get; set; }
    
    [Parameter]
    public bool DisableCutoutControls { get; set; }
    
    [Parameter]
    public bool DisableGlowControls { get; set; }
    
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    private ElementReference Container { get; set; }

    private ThreeJsScene Scene { get; set; }
    
    private bool IsRotating { get; set; } = false;
    
    private bool IsCutoutVisible { get; set; } = false;
    
    private bool IsLightOn { get; set; } = true;

    private bool IsLoading { get; set; }

    private long? ProgressLoaded { get; set; }
    
    private long? ProgressTotal { get; set; }

    private string Error { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Scene = await CreateSceneFromWorkshopFileAsync(
                    Container, 
                    new
                    {
                        ModelUrl = $"https://scmm.blob.core.windows.net/models/{ItemType.Replace(" ", "-").ToLower()}.obj",
                        WorkshopFileUrl = WorkshopFileUrl,
                        AutoRotate = IsRotating,                        Light = IsLightOn
                    }
                );
            }
            catch(Exception ex)
            {
                Logger.LogError(ex, "Failed to initialise the model viewer");
                Error = "Unable to initialise the model viewer. {ex.Message}";
                StateHasChanged();
            }
        }
    }
    
    private async Task<ThreeJsScene> CreateSceneFromWorkshopFileAsync(ElementReference sceneContainer, object sceneOptions)
    {
        var modelViewComponent = DotNetObjectReference.Create(this);
        var threejsWrapper = await JS.InvokeAsync<IJSInProcessObjectReference>("import", "./js/threejs-wrapper.js");
        var threejsScene = await threejsWrapper.InvokeAsync<IJSObjectReference>("createSceneFromWorkshopFile", sceneContainer, sceneOptions, modelViewComponent);
        return new ThreeJsScene(threejsWrapper, threejsScene, modelViewComponent);
    }

    private async Task OnResetCameraClicked()
    {
        await Scene.ToggleResetCameraAsync();
    }
    private async Task OnToggleAutoRotateChanged(bool toggled)
    {
        IsRotating = toggled;
        await Scene.ToggleAutoRotateAsync(toggled);
    }
        private async Task OnToggleAlphaCutoffChanged(bool toggled)
    {
        IsCutoutVisible = toggled;
        await Scene.ToggleAlphaCutoffAsync(toggled);
    }
        private async Task OnToggleLightChanged(bool toggled)
    {
        IsLightOn = toggled;
        await Scene.ToggleLightAsync(toggled);
    }

    private async Task OnLightColorChanged(MudColor color)
    {
        await Scene.SetLightColorAsync(color);
    }
    
    private async Task OnLightIntensityChanged(double intensity)
    {
        await Scene.SetLightIntensityAsync(intensity);
    }
    
    private async Task OnEmissionIntensityChanged(double intensity)
    {
        await Scene.SetEmissionIntensityAsync(intensity);
    }
    
    [JSInvokable]
    public void OnLoadProgress(long loaded, long total)
    {
        Error = null;
        IsLoading = true;
        ProgressLoaded = loaded;
        ProgressTotal = total;
        Logger.LogInformation($"Load Progress: {loaded}/{total}");
        StateHasChanged();
    }
    
    [JSInvokable]
    public void OnLoadComplete()
    {
        Error = null;
        IsLoading = false;
        ProgressLoaded = null;
        ProgressTotal = null;
        Logger.LogInformation($"Load Complete!");
        StateHasChanged();
    }

    [JSInvokable]
    public void OnLoadError(string error)
    {
        Error = error;
        IsLoading = false;
        Logger.LogError($"Load Error: {error}");
        StateHasChanged();
    }

    public class ThreeJsScene : IDisposable
    {
        private readonly IJSInProcessObjectReference _threejsWrapper;
        private readonly IJSObjectReference _threejsScene;
        private readonly DotNetObjectReference<ItemModelView> _modelViewComponent;
        
        public ThreeJsScene(IJSInProcessObjectReference threejsWrapper, IJSObjectReference threejsScene, DotNetObjectReference<ItemModelView> modelViewComponent)
        {
            _threejsWrapper = threejsWrapper;
            _threejsScene = threejsScene;
            _modelViewComponent = modelViewComponent;
        }

        public async Task ToggleResetCameraAsync() => await _threejsWrapper.InvokeVoidAsync("resetCamera", _threejsScene);

        public async Task ToggleAutoRotateAsync(bool toggled) => await _threejsWrapper.InvokeVoidAsync("toggleAutoRotate", _threejsScene, toggled);
        
        public async Task ToggleAlphaCutoffAsync(bool toggled) => await _threejsWrapper.InvokeVoidAsync("toggleAlphaCutoff", _threejsScene, toggled);

        public async Task ToggleLightAsync(bool toggled) => await _threejsWrapper.InvokeVoidAsync("toggleLight", _threejsScene, toggled);

        public async Task SetLightIntensityAsync(double intensity) => await _threejsWrapper.InvokeVoidAsync("setLightIntensity", _threejsScene, intensity);

        public async Task SetLightColorAsync(MudColor color) => await _threejsWrapper.InvokeVoidAsync("setLightColor", _threejsScene, $"rgb({color.R}, {color.G}, {color.B})");
        
        public async Task SetEmissionIntensityAsync(double intensity) => await _threejsWrapper.InvokeVoidAsync("setEmissionIntensity", _threejsScene, intensity);

        public void Dispose()
        {
            _modelViewComponent?.Dispose();
        }
    }

}
