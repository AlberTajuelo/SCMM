@page
@namespace SCMM.Web.Server.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Components.Web
@using SCMM.Web.Client;
@using SCMM.Web.Data.Models
@inject AppState State
@{
    await State.LoadFromCookiesAsync();
    var runtime = State.Runtime;
    var renderMode = (runtime == RuntimeType.Server ? RenderMode.Server : RenderMode.WebAssemblyPrerendered);
    var prerenderMode = (runtime == RuntimeType.Server ? RenderMode.ServerPrerendered : RenderMode.WebAssemblyPrerendered);

}
<!DOCTYPE html>
<html>
<head>
    <title>Rust - Steam Community Market Manager</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="minimum-scale=1, initial-scale=1, width=device-width" />
    <meta name="title" property="og:title" content="Rust - Steam Community Market Manager">
    <meta name="image" property="og:image" content="https://scmm.app/images/og.image.png">
    <meta name="description" property="og:description" content="Find Rust skin prices, deals, analytics, and much more with SCMM">
    <meta name="determiner" property="og:determiner" content="the">
    <meta name="type" property="og:type" content="website">
    <meta name="url" property="og:url" content="https://scmm.app">
    <meta name="site_name" property="og:site_name" content="SCMM">
    <meta name="keywords" content="Steam, Community, Market, SCM, SCMM, Rust, CSGO, Store, Shop, Skin, Skins, Inventory, Value, Cheap, Cheapest, Price, Prices, Deal, Deals, Sale Sales, History, Statistics, Analytics, Invest, Investment">
    <base href="/" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
    <link href="https://use.fontawesome.com/releases/v5.12.0/css/all.css" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="_content/Syncfusion.Blazor.Themes/material-dark.css" rel="stylesheet" />
    <link href="/css/scmm-mudblazor-theme.css" rel="stylesheet" />
    <link href="/css/scmm-preloader.css" rel="stylesheet" />
    <link href="/css/scmm.css" rel="stylesheet" />
    <link href="scmm.web.client.styles.css" rel="stylesheet" />
    <link href="icon-512.png" rel="icon" type="image/png" />
    <link href="icon-512.png" rel="apple-touch-icon" type="image/png" sizes="512x512" />
    <component type="typeof(HeadOutlet)" render-mode="@prerenderMode" />
</head>
<body>
 
    <div id="app">
        <component type="typeof(App)" render-mode="@renderMode" />
@if (runtime == RuntimeType.Server)
{
        <div id="blazor-error-ui" class="component-error-banner hidden pa-2">
            <div class="d-flex flex-row align-center">
                <i class="fa fa-fw fa-bug mr-2"></i>
                <span>An error has occurred. The application may no longer respond until reloaded.</span>
                <a href="" class="reload mud-button-root mud-button mud-button-outlined mud-button-outlined-size-small ml-auto" title="Reload the application">Reload</a>
            </div>
        </div>
        <div id="components-reconnect-modal" class="components-reconnect-modal components-reconnect-hide pa-4">
            <div class="show">
                <h5>Server connection was interrupted,<br/>attempting to reconnect...</h5>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" style="height: 4em; width: 4em;">
                    <circle cx="50" cy="50" fill="none" stroke="#fff" stroke-width="5" r="35" stroke-dasharray="150 50">
                        <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="1s" values="0 50 50; 360 50 50" keyTimes="0;1"></animateTransform>
                    </circle>
                </svg>
            </div>
            <div class="failed">
                <h5>Server connection failed after several attempts.<br/>Reconnect to try again.</h5>
                <a href="" onclick="window.Blazor.reconnect()" class="mud-button-root mud-button mud-button-outlined mud-button-outlined-size-medium mt-2" title="Attempt to reconnect with the server">Reconnect</a>
            </div>
            <div class="rejected">
                <h5>Server connection was lost.<br/>Reload to restore functionality.</h5>
                <a href="" onclick="location.reload()" class="mud-button-root mud-button mud-button-outlined mud-button-outlined-size-medium mt-2" title="Reload the application">Reload</a>
            </div>
        </div>
}
else
{
        <div id="blazor-preloader-ui" class="preloader">
            <div id="wasm-unsupported" class="wasm-unsupported-root hidden">
                <img src="images/webassembly.png" />
                <p>
                    <strong>Your browser does not support WebAssembly (Wasm).</strong><br />
                    <span><a href="https://caniuse.com/wasm">https://caniuse.com/wasm</a></span>
                </p>
            </div>
            <div id="blazor-loading" class="blazor-loading-root hidden">
                <p class="preloader-animation">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" style="height: 8em; width: 8em;">
                        <circle cx="50" cy="50" fill="none" stroke="#fff" stroke-width="5" r="35" stroke-dasharray="150 50">
                            <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="1s" values="0 50 50; 360 50 50" keyTimes="0;1"></animateTransform>
                        </circle>
                    </svg>
                </p>
                <div id="preloader-progress" class="preloader-progress-bar-root hidden">
                    <div style="width:0%"></div>
                </div>
                <p>
                    <span>Initialising Blazor...</span>
                </p>
            </div>
            <div id="blazor-load-error" class="blazor-load-error-root hidden">
                <img src="images/blazor.png" style="filter: hue-rotate(90deg)" />
                <p>
                    <strong>Blazor initialisation error.</strong><br />
                    <span>Try clearing your browse cache.</span>
                    <pre id="blazor-load-error-details"></pre>
                </p>
            </div>
            <script type="text/javascript">

                function wasmIsSupported() {
                    try {
                        if (typeof WebAssembly === "object" &&
                            typeof WebAssembly.instantiate === "function") {
                            const module = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));
                            if (module instanceof WebAssembly.Module) {
                                return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;
                            }
                        }
                    } catch (e) {
                    }
                    return false;
                }

                if (wasmIsSupported()) {
                    document.getElementById("blazor-loading").style.display = "flex";
                }
                else {
                    document.getElementById("wasm-unsupported").style.display = "flex";
                }

            </script>
            <script type="text/javascript">

                /* Start Blazor and report loading progress back to the UI */

                let resourceIndex = 0;
                let resourcesLoaded = [];
                let progressBarElement = document.getElementById('preloader-progress');
                let progressElement = progressBarElement.children[0];
                document.addEventListener("DOMContentLoaded", function() {
                    if (wasmIsSupported()) {
                        Blazor.start({

                            loadBootResource: (type, name, defaultUri, integrity) => {
                                if (type == "dotnetjs") {
                                    return defaultUri;
                                }
                                
                                console.log(`Loading: '${type}', '${name}', '${defaultUri}', '${integrity}'`);
                                var fetchResource = fetch(defaultUri, {
                                    cache: 'no-cache',
                                    integrity: integrity
                                });

                                resourcesLoaded.push(fetchResource);
                                fetchResource.then((r) => {
                                    resourceIndex++;
                                    var resourcesTotal = resourcesLoaded.length;
                                    var progressValue = parseInt((resourceIndex * 100.0) / resourcesTotal);
                                    var progressText = progressValue + '%';
                                    if (progressValue > 0 && progressValue <= 100) {
                                        progressBarElement.style.display = 'block';
                                        progressElement.style.width = progressText;
                                        //progressElement.innerText = progressText;
                                    }
                                });

                                return fetchResource;
                            }

                        }).then(function () {
                            document.getElementById("blazor-preloader-ui").style.display = "none";
                        }).catch(function (err) {
                            console.log(`Blazor startup has failed`, err);
                            document.getElementById("blazor-loading").style.display = "none";
                            document.getElementById("blazor-load-error").style.display = "flex";
                            if (err) {
                                document.getElementById("blazor-load-error-details").innerHTML = err;
                            }
                        });
                    }
                });

            </script>
        </div>
}
    </div>

    <persist-component-state />

@if (runtime == RuntimeType.Server)
{
    <script src="_framework/blazor.server.js"></script>
}
else
{
    <script src="_framework/blazor.webassembly.js" autostart="false"></script>
}

    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js" integrity="sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==" crossorigin="anonymous"></script>
    <script src="https://cdn.syncfusion.com/blazor/syncfusion-blazor-base.min.js"></script>
    <script src="/js/azure-storage.blob.min.js"></script>
    <script src="/js/interops.js"></script>
    
@if (runtime == RuntimeType.WebAssembly)
{
    <script type="text/javascript">

        /* Unregister old PWA service worker (if present) */

        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.getRegistrations().then(function (registrations) {
                if (!registrations.length) {
                    console.log('No serviceWorker registrations found.');
                    return;
                }
                for(let registration of registrations) {
                    registration.unregister().then(function (boolean) {
                        console.log(
                            (boolean ? 'Successfully unregistered' : 'Failed to unregister'), 'ServiceWorkerRegistration\n' +
                            (registration.installing ? '  .installing.scriptURL = ' + registration.installing.scriptURL + '\n' : '') +
                            (registration.waiting ? '  .waiting.scriptURL = ' + registration.waiting.scriptURL + '\n' : '') +
                            (registration.active ? '  .active.scriptURL = ' + registration.active.scriptURL + '\n' : '') +
                            '  .scope: ' + registration.scope + '\n'
                        );
                    });
                }
            });
        }

    </script>
}

</body>
</html>
