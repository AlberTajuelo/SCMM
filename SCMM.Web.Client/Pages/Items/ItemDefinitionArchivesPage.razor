@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Web.Data.Models.UI.Diff
@using SCMM.Web.Data.Models.UI.Item
@page "/item/definitionArchives"
@page "/item/definitionArchive/{Digest}"
@inherits PersistentComponent
@inject ILogger<ItemDefinitionArchivesPage> Logger
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<PageContainer Title="@($"{State?.App?.Name} Item Definition Archives")">
    <MudGrid Spacing="2">
        <MudItem xs="12">
            <MudText Typo="Typo.body1">
                <span>Item definition archives are the game data files that contain the raw definitions for each @(State?.App?.Name ?? "game") item that can be acquired through Steam. Typically each item definition archives adds/removes/changes one or many in-game items.</span>
            </MudText>
        </MudItem>
        <MudItem xs="12">
            @if (ItemDefinitionArchivesList == null)
            {
                @if (LoadException == null)
                {
                    <Loading Message="Loading item definition archives list..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
                }
                else
                {
                    <Alert Exception="@LoadException" />
                }
            }
            else if (ItemDefinitionArchivesList.Any())
            {
                <MudExpansionPanels MultiExpansion="true" Dense="true" DisableGutters="true">
                    @foreach (var itemDefinitionArchive in ItemDefinitionArchivesList)
                    {
                        <MudExpansionPanel IsExpandedChanged="@((x) => OnExpandedChanged(itemDefinitionArchive, x))">
                            <TitleContent>
                                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                                    <MudStack Spacing="1">
                                        <MudText Typo="MudBlazor.Typo.body1">
                                            <i class="fas fa-fw fa-archive mr-1"></i>
                                            <span>@itemDefinitionArchive.Digest</span>
                                            <span class="mud-secondary-text"> (@itemDefinitionArchive.Info.Size.ToFileSizeString()) </span>
                                        </MudText>
                                        <MudStack Spacing="2" Row="true" AlignItems="AlignItems.Center">
                                            <MudChip Color="Color.Secondary" Size="Size.Small">@itemDefinitionArchive.Info.ItemCount item(s)</MudChip>
                                            <MudText Color="Color.Secondary" Typo="Typo.body2">
                                                <span>This archive </span>
                                                @if (itemDefinitionArchive.DiffItemCount != 0)
                                                {
                                                    <span class="@(itemDefinitionArchive.DiffItemCount > 0 ? "mud-success-text" : "mud-error-text")">
                                                        @(itemDefinitionArchive.DiffItemCount > 0 ? "added" : "removed") @(Math.Abs(itemDefinitionArchive.DiffItemCount).ToQuantityString()) item(s)
                                                    </span>
                                                    <span> and </span>
                                                }
                                                @if (itemDefinitionArchive.DiffSize != 0)
                                                {
                                                    <span class="@(itemDefinitionArchive.DiffSize > 0 ? "mud-success-text" : "mud-error-text")">
                                                        @(itemDefinitionArchive.DiffSize > 0 ? "added" : "removed") @(Math.Abs(itemDefinitionArchive.DiffSize).ToQuantityString()) character(s)
                                                    </span>
                                                    <span> to the game item definitions. </span>
                                                }
                                                else
                                                {
                                                    <span> didn't change anything noteworthy.</span>
                                                }
                                            </MudText>
                                        </MudStack>
                                    </MudStack>
                                    @if (itemDefinitionArchive.Info.Timestamp != null)
                                    {
                                        <MudText Typo="MudBlazor.Typo.body2" Color="Color.Secondary" Class="mx-4">@((DateTimeOffset.Now - itemDefinitionArchive.Info.Timestamp.Value).ToDurationString(maxGranularity: 2, suffix: "ago"))</MudText>
                                    }
                                </MudStack>
                            </TitleContent>
                            <ChildContent>
                                @*
                                @if (!ItemDefinitionArchives.ContainsKey(itemDefinitionArchive.Digest))
                                {
                                    <Loading Message="Loading item definition archive..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
                                }
                                else
                                {
                                    <div style="width:100%; height:75vh;">
                                        <JsonEditor Json="@ItemDefinitionArchives[itemDefinitionArchive.Digest]" SelectionPath="@($@"[{itemDefinitionArchive.Archive.ItemCount - 1}, ""itemdefid""]")" ReadOnly="true" />
                                    </div>
                                }
                                *@
                                @if (!ItemDefinitionArchiveDiffs.ContainsKey(itemDefinitionArchive.Digest))
                                {
                                    <Loading Message="Loading changes from previous item definition archive..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
                                }
                                else
                                {
                                    <div class="diffPane">
                                        <table cellpadding="0" cellspacing="0" class="diffTable">
                                            @{
                                                var diffLines = ItemDefinitionArchiveDiffs[itemDefinitionArchive.Digest]?.Lines;
                                            }
                                            @if (diffLines != null)
                                            {
                                                @foreach (var diffLine in diffLines)
                                                {

                                                    <tr>
                                                        <td class="lineNumber">
                                                            @if (diffLine.Position.HasValue)
                                                            {
                                                                <span>@diffLine.Position.ToString()</span>
                                                            }
                                                            else
                                                            {
                                                                <span>&nbsp;</span>
                                                            }
                                                        </td>
                                                        <td class="line @diffLine.Type.ToString()Line">
                                                            <span class="lineText">
                                                                @if (!string.IsNullOrEmpty(diffLine.Text))
                                                                {
                                                                    string spaceValue = "\u00B7";
                                                                    string tabValue = "\u00B7\u00B7";
                                                                    @if (diffLine.Type == TextDiffChangeType.Deleted.ToString() || diffLine.Type == TextDiffChangeType.Inserted.ToString() || diffLine.Type == TextDiffChangeType.Unchanged.ToString())
                                                                    {
                                                                        @diffLine.Text.Replace(" ", spaceValue).Replace("\t", tabValue)
                                                                    }
                                                                    else if (diffLine.Type == TextDiffChangeType.Modified.ToString())
                                                                    {
                                                                        @foreach (var character in diffLine.SubPieces)
                                                                        {
                                                                            @if (character.Type == TextDiffChangeType.Imaginary.ToString()) { continue; }
                                                                            <span class="@character.Type.ToString()Character piece">@character.Text.Replace(" ", spaceValue.ToString())</span>
                                                                        }
                                                                    }
                                                                }
                                                            </span>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </table>
                                    </div>
                                }
                            </ChildContent>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            }
            else
            {
                <div class="d-flex flex-column justify-center align-center full-height pa-4">
                    <TumbleWeed Light="true" />
                    <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">empty, check back later</MudText>
                </div>
            }
        </MudItem>
    </MudGrid>
</PageContainer>

@code {

    [Parameter]
    public string Digest { get; set; }

    private ItemDefinitionArchiveIdentifierWithDiff[] ItemDefinitionArchivesList;

    private IDictionary<string, string> ItemDefinitionArchives;
    private IDictionary<string, TextDiffDTO> ItemDefinitionArchiveDiffs;

    private Exception LoadException;

    protected override async Task OnLoadStateAsync()
    {
        ItemDefinitionArchives = RestoreFromStateOrDefault(nameof(ItemDefinitionArchives), new Dictionary<string, string>());
        ItemDefinitionArchiveDiffs = RestoreFromStateOrDefault(nameof(ItemDefinitionArchiveDiffs), new Dictionary<string, TextDiffDTO>());
        ItemDefinitionArchivesList = await RestoreFromStateOrLoad(nameof(ItemDefinitionArchivesList), async () =>
        {
            try
            {
                var results = new List<ItemDefinitionArchiveIdentifierWithDiff>();
                var archives = await Http.GetFromJsonWithDefaultsAsync<ItemDefinitionArchiveIdentifierDTO[]>($"api/item/definitionArchives");
                if (archives != null)
                {
                    foreach (var archive in archives)
                    {
                        var lastArchive = archives.ElementAtOrDefault(archives.IndexOf(archive) + 1);
                        results.Add(new ItemDefinitionArchiveIdentifierWithDiff()
                        {
                            Info = archive,
                            Digest = archive.Digest,
                            PreviousDigest = lastArchive?.Digest,
                            DiffSize = lastArchive != null ? (archive.Size - (lastArchive?.Size ?? 0)) : 0,
                            DiffItemCount = lastArchive != null ? (archive.ItemCount - (lastArchive?.ItemCount ?? 0)) : 0
                        });
                    }
                }

                return results.ToArray();
            }
            catch (Exception ex)
            {
                LoadException = ex;
                Logger.LogError(ex, $"Error loading the item definition archives list");
                Snackbar.Add($"Unable to load item definition archives list. {ex.Message}", MudBlazor.Severity.Error);
                throw;
            }
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(ItemDefinitionArchives), ItemDefinitionArchives);
        PersistToState(nameof(ItemDefinitionArchiveDiffs), ItemDefinitionArchiveDiffs);
        PersistToState(nameof(ItemDefinitionArchivesList), ItemDefinitionArchivesList);
        return Task.CompletedTask;
    }

    private void OnExpandedChanged(ItemDefinitionArchiveIdentifierWithDiff archive, bool isExpanded)
    {
        if (isExpanded)
        {
            Task.Run(async () =>
                {
                    try
                    {
                        /*
                        if (!ItemDefinitionArchives.ContainsKey(archive.Digest))
                        {
                            var digest = await Http.GetStringAsync($"api/item/definitionArchive/{archive.Digest}?raw=true");
                            ItemDefinitionArchives[archive.Digest] = digest;
                        }
                        */
                        if (!ItemDefinitionArchiveDiffs.ContainsKey(archive.Digest) && !String.IsNullOrEmpty(archive.PreviousDigest))
                        {
                            var archiveDiff = await Http.GetFromJsonAsync<TextDiffDTO>($"api/item/definitionArchive/{archive.PreviousDigest}/compareTo/{archive.Digest}");
                            ItemDefinitionArchiveDiffs[archive.Digest] = archiveDiff;
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, $"Error loading the item definition archive");
                        Snackbar.Add($"Unable to load item definition archive. {ex.Message}", MudBlazor.Severity.Error);
                    }
                })
                .ContinueWith(t => StateHasChanged())
                .AndForget();

        }
        else
        {
            // Reset after a while to prevent sudden collapse
            Task.Delay(350)
                .ContinueWith(t => ItemDefinitionArchiveDiffs[archive.Digest] = null)
                .AndForget();
        }
    }

    public class ItemDefinitionArchiveIdentifierWithDiff
    {
        public ItemDefinitionArchiveIdentifierDTO Info { get; set; }

        public string Digest { get; set; }

        public string PreviousDigest { get; set; }

        public int DiffSize { get; set; }

        public int DiffItemCount { get; set; }
    }
}
