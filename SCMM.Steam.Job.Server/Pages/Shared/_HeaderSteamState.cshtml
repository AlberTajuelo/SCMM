@using SCMM.Shared.Data.Models.Extensions
@using SCMM.Steam.Data.Store
@inject SteamDbContext DB
@{
    var cutOff = DateTimeOffset.Now.Subtract(TimeSpan.FromHours(1));
    var salesOldest = DB.SteamMarketItems.Min(x => x.LastCheckedSalesOn) ?? DateTimeOffset.UtcNow;
    var salesOutdated = DB.SteamMarketItems.Count(x => x.LastCheckedSalesOn <= cutOff);
    var ordersOldest = DB.SteamMarketItems.Min(x => x.LastCheckedOrdersOn) ?? DateTimeOffset.UtcNow;
    var ordersOutdated = DB.SteamMarketItems.Count(x => x.LastCheckedOrdersOn <= cutOff);
    var assetsOldest = DB.SteamAssetDescriptions.Min(x => x.TimeRefreshed) ?? DateTimeOffset.UtcNow;
    var assetsOutdated = DB.SteamAssetDescriptions.Count(x => x.TimeRefreshed <= cutOff);

}
<dl class="dl-horizontal">
    <dt><i class="fas fa-tag fa-fw"></i> Price History</dt>
    <dd>
        <span>@((DateTimeOffset.UtcNow - salesOldest).ToDurationString(showYears: false, showMonths: false, showWeeks: false, showDays: false, showHours: true, showMinutes: true, showSeconds: false, suffix: "old", maxGranularity: 1))</span><br />
        <span><i>(@salesOutdated)</i></span>
    </dd>
    <dt><i class="fas fa-list fa-fw"></i> Order History</dt>
    <dd>
        <span>@((DateTime.UtcNow - ordersOldest).ToDurationString(showYears: false, showMonths: false, showWeeks: false, showDays: false, showHours: true, showMinutes: true, showSeconds: false, suffix: "old", maxGranularity: 1))</span><br />
        <span><i>(@ordersOutdated)</i></span>
    </dd>
    <dt><i class="fas fa-paint-roller fa-fw"></i> Asset Descriptions</dt>
    <dd>
        <span>@((DateTime.UtcNow - assetsOldest).ToDurationString(showYears: false, showMonths: false, showWeeks: false, showDays: false, showHours: true, showMinutes: true, showSeconds: false, suffix: "old", maxGranularity: 1))</span><br />
        <span><i>(@assetsOutdated)</i></span>
    </dd>
</dl>
