@page "/skins"
@page "/items"
@using SCMM.Web.Client.Shared.Components.Items
@using SCMM.Web.Data.Models.UI.Item
@inject ILogger<SkinsPage> Logger
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http

<PageContainer Title="Skins">

    <MudGrid Spacing="2">
        <MudItem xs="12">
            <MudTextField T="string" ValueChanged="@OnSearch" DebounceInterval="500" Placeholder="Type here to find an item..." Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Class="ma-0" />
        </MudItem>
        @if (Items == null)
        {
            <MudItem xs="12">
                <Loading Message="Finding items..." />
            </MudItem>
        }
        else 
        {
            @foreach (var item in Items.Items)
            {
                <MudItem xs="6" sm="4" md="3" lg="2" xl="1">
                    <MudPaper Outlined="true" Class="full-height">
                        <ItemDescriptionDetails Item="@item" />
                    </MudPaper>
                </MudItem>
            }
        }
    </MudGrid>

</PageContainer>

@code {

    private PaginatedResult<ItemDescriptionWithPriceDTO> Items { get; set; }

    private string Filter { get; set; }

    private int Count { get; set; } = 300;

    protected override async Task OnInitializedAsync()
    {
        await RefreshItems();
    }
    
    private void OnSearch(string text)
    {
        Filter = text;
        RefreshItems();
    }

    private async Task RefreshItems()
    {
        try
        {
            Items = null;
            StateHasChanged();
            Items = await Http.GetFromJsonAsync<PaginatedResult<ItemDescriptionWithPriceDTO>>(
                $"api/item?filter={Uri.EscapeDataString(Filter ?? String.Empty)}&start=0&count={Count}"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing items");
        }
        finally
        {
            StateHasChanged();
        }
    }

}
