
<MudAlert Severity="@Severity" Variant="@Variant" Elevation="@Elevation" Icon="@Icon" UserAttributes="@AdditionalAttributes">
    @if (Exception == null)
    {
        @if (!String.IsNullOrEmpty(Title))
        {
            <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default">@Title</MudText>
        }
        @if(!String.IsNullOrEmpty(SubTitle))
        {
            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary">@SubTitle</MudText>
        }
    }
    else
    {
        <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default">
            @if (!String.IsNullOrEmpty(Title))
            {
                <span>@Title</span>
            }
            else
            {
                <span>Unexpected Error!</span>
            }
        </MudText>
        <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary">
            @if (!String.IsNullOrEmpty(SubTitle))
            {
                <span>@SubTitle</span>
            }
            else
            {
                <span>There was an unexpected error processing your request. Depending on the error, you may be able to try again later.</span>
            }
        </MudText>
        <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary">
            <strong>@Exception.GetType().Name: </strong>
            <span>@Exception.Message</span>
        </MudText>
    }
    @ChildContent
</MudAlert>

@code {

    [Parameter]
    public MudBlazor.Severity Severity { get; set; } = MudBlazor.Severity.Error;
    
    [Parameter]
    public MudBlazor.Variant Variant { get; set; } = MudBlazor.Variant.Text;
    
    [Parameter]
    public int Elevation { get; set; } = 0;
    
    [Parameter]
    public string Icon { set; get; } = "fas fa-fw fa-exclamation-circle";

    [Parameter]
    public string Title { set; get; }

    [Parameter]
    public string SubTitle { set; get; }
    
    [Parameter]
    public Exception Exception { set; get; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }
    
    protected override bool ShouldRender() => false;

}