@using SCMM.Web.Client.Shared.Components.Items
@using SCMM.Web.Data.Models.UI.Item
@inject ILogger<ViewItemListDialog> Logger
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject DocumentManager Document

<MudDialog>
    <TitleContent>
        <MudText Typo="MudBlazor.Typo.h6">@ListName</MudText>
    </TitleContent>
    <DialogContent>
        @if (List?.Items == null)
        {
            <Loading Message="Loading item list..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
        } 
        else
        {
            <MudGrid>
                @foreach (var item in SortedItems(List.Items))
                {
                    <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                        <ItemDescriptionSummary Item="@item" Highlighted="@(item.Id == HighlightedItemId)" />
                    </MudItem>
                }
            </MudGrid>
        }
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter] 
    public MudDialogInstance Dialog { get; set; }
    
    [Parameter]
    public string ListName { get; set; }
    
    [Parameter]
    public string ListUrl { get; set; }

    [Parameter]
    public ulong HighlightedItemId { get; set; }
    
    [Parameter]
    public bool SortByValue { get; set; }

    private PaginatedResult<ItemDescriptionWithPriceDTO> List { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Dialog.Options.CloseButton = true;
        Dialog.Options.MaxWidth = MudBlazor.MaxWidth.Large;
        Dialog.Options.FullWidth = true; // force item images to scale equally
        Dialog.SetOptions(Dialog.Options);

        try
        {
            List = await Http.GetFromJsonAsync<PaginatedResult<ItemDescriptionWithPriceDTO>>(ListUrl);
            Dialog.ForceRender();
            StateHasChanged();

            if (HighlightedItemId > 0)
            {
                Document.ScrollElementIntoView("Highlighted", TimeSpan.FromSeconds(0.5));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading the item list");
            Snackbar.Add($"Unable to load item list. {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    private IEnumerable<ItemDescriptionWithPriceDTO> SortedItems(IEnumerable<ItemDescriptionWithPriceDTO> items)
    {
        if (SortByValue)
        {
            items = items.OrderBy(x => x.BuyNowPrice);
        }
        return items;
    }
}
