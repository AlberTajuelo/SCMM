@page "/steam/marketplace/{ItemId}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SCMM.Web.Shared.Domain.DTOs.Steam
@using SCMM.Web.Shared
@inject NavigationManager Navigation
@inject HttpClient Http

@if (item == null)
{
    <Loading />
}
else
{
<Grid Container Spacing="@Spacing.Four">
    <Grid Item ExtraSmall="@GridSize.One">
        <img src="@item.Description.IconUrl" style="width:100%" />
    </Grid>
    <Grid Item ExtraSmall="@GridSize.Eleven">
        <Typography Variant="@TypographyVariant.H3" GutterBottom="true">
            @item.Description.Name
        </Typography>
        <Typography Variant="@TypographyVariant.Body2" GutterBottom="true">
            @foreach (var tag in item.Description.Tags)
            {
                <div class="Chip-Root">
                    <span class="Chip-Label">
                        @tag.Value
                    </span>
                </div>
            }
        </Typography>
    </Grid>
    <Grid Item ExtraSmall="@GridSize.One">
        <Typography Variant="@TypographyVariant.Body1" NoWrap>
            <i class="fa fa-fw fa-user"></i>
            @item.Description.WorkshopFile.Subscriptions.ToQuantityString()
        </Typography>
        <Typography Variant="@TypographyVariant.Body1" NoWrap>
            <i class="fa fa-fw fa-eye"></i>
            @item.Description.WorkshopFile.Views.ToQuantityString()
        </Typography>
        <Typography Variant="@TypographyVariant.Body1" NoWrap>
            <i class="fa fa-fw fa-heart"></i>
            @item.Description.WorkshopFile.Favourited.ToQuantityString()
        </Typography>
    </Grid>
    <Grid Item ExtraSmall="@GridSize.Three">
        <Paper>
            <Table Narrow="true">
                <TableHead>
                    <TableRow>
                        <TableCell>Buy Now Price</TableCell>
                        <TableCell>Quantity</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    @foreach (var order in item.SellOrders.OrderBy(x => x.Price).Take(5))
                    {
                        <TableRow>
                            <TableCell>
                                <strong>@item.Currency.ToPriceString(order.Price)</strong>
                            </TableCell>
                            <TableCell>@order.Quantity</TableCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        </Paper>
    </Grid>
    <Grid Item ExtraSmall="@GridSize.Three">
        <Paper>
            <Table Narrow="true">
                <TableHead>
                    <TableRow>
                        <TableCell>Buy Asking Price</TableCell>
                        <TableCell>Quantity</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    @foreach (var order in item.BuyOrders.OrderByDescending(x => x.Price).Take(5))
                    {
                        <TableRow>
                            <TableCell>
                                <strong>@item.Currency.ToPriceString(order.Price)</strong>
                            </TableCell>
                            <TableCell>@order.Quantity</TableCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        </Paper>
    </Grid>
    <Grid Item ExtraSmall="@GridSize.Six">
        <Paper Class="Chart-Container">
            Buy/Sell chart
        </Paper>
    </Grid>
</Grid>
}

@code {

    [Parameter]
    public string ItemId { get; set; }

    private SteamMarketItemDTO item;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            item = await Http.GetFromJsonAsync<SteamMarketItemDTO>($"SteamMarketItems/{ItemId}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}
