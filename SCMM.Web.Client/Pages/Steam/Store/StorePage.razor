@page "/"
@page "/store"
@page "/steam/store"
@using SCMM.Web.Data.Models.Domain.StoreItems
@using SCMM.Web.Data.Models
@inject ILogger<StorePage> Logger
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AppState State

<style>

    .Store-List {
        margin: -16px;
        padding-bottom: 0px
    }

    .Store .TabIndicator-Root {
        top: 0px;
    }

    .Store-Item .Card-Root {
        display: flex;
        flex-direction: column;
    }

    .Store-Item .CardContent-Root {
        flex-grow: 1;
    }

    .Store-Item .CardContent-Root:last-child {
        padding-bottom: 16px;
    }

    .Store-Item .CardContent-Root > .Grid-Root {
        height: 100%;
    }

    .Store-Item .Paper-Root {
        width: 100%;
        height: 100%;
    }
    
    .Store-Item .Image-Root {
        text-align: center;
    }

    .Store-Item .Image-Root img {
        width: 100%;
        max-width: 144px;
    }

    .Store-Item .Button-Root {
        width: 100%;
    }
    
    .Store-Item .Button-Root i {
        margin-right: 6px;
    }
    
    .Store-Item .Price-Root {
        width: 100%;
        text-align: center;
        padding: 8px;
    }
    
    .Store-Item .Price-Root {
        width: 100%;
        text-align: center;
        padding: 8px;
    }

    .Store-Item .Action-Root {
        display: flex;
        align-items: flex-end;
    }

    .Store-Item .Action-Root .Typography-Root {
        width: 100%;
    }

    .Tabs-Container {
        /*margin: 0px -40px;*/
    }
    
    .Tabs-Container .TabScrollButton-Root {
        display: none;
        position: sticky;
        z-index: 100000;
    }
    
    .Tabs-Container .TabScrollButton-Root:first {
        left: 0px;
    }
    
    .Tabs-Container .TabScrollButton-Root:last {
        right: 0px;
    }
    
    .Chart-Radar {
        padding-bottom: 16px;
    }

    .Chart-Footnote {
        padding: 0px 16px 16px;
    }

</style>

<Title Value="Item Store" />

@if (Stores == null)
{
    @if(StoreException == null)
    {
        <Loading Message="Loading item stores..." />
    }
    else
    {
        <Error Exception="@StoreException" />
    }
}
else
{
    <Grid Container Spacing="@Spacing.Two">
        @if(Stores.Any())
        {
            <Grid Item ExtraSmall="@GridSize.Twelve">
                <Tabs Class="Store-List"
                      Value="@SelectedStore"
                      OnChange="@OnSelectedStoreChanged"
                      IndicatorColor="@Skclusive.Core.Component.Color.Primary"
                      TextColor="@Skclusive.Core.Component.Color.Primary"
                      Variant="@TabsVariant.Scrollable"
                      ScrollButton="@ScrollButton.On"
                      Style="margin:-16px; padding-bottom:0px">
                    <IndicatorContent>
                        <div />
                    </IndicatorContent>
                    <ChildContent>
                        <TabScrollButton Side="Side.Left" />
                        @foreach (var store in Stores.OrderByDescending(x => x.Start))
                        {
                            <Tab Class="Store" Id="@store.Id.ToString()" Value="@store" Label="@store.Name" />
                        }
                        <TabScrollButton Side="Side.Right" />
                        <Button OnClick="@HandleStoreSelectorDialogOpen" Variant="@ButtonVariant.Outlined" Color="@Skclusive.Core.Component.Color.TextSecondary" Style="position:sticky; right:16px; margin:8px; background-color:var(--theme-palette-background-paper)">
                            <i class="fas fa-history"></i>
                        </Button>
                    </ChildContent>
                </Tabs>
            </Grid>
            <Dialog OnClose="@HandleStoreSelectorDialogClose" Open="@StoreSelectorDialogOpen">
                <DialogTitle>
                    Select an item store
                </DialogTitle>
                <List Dense="true">
                    @foreach (var store in Stores.OrderByDescending(x => x.Start))
                    {
                        <ListItem Button OnClick="@((arg) => OnSelectedStoreChanged(store))" Selected="@(store == SelectedStore)">
                            <ListItemText Primary="@($"{store.Start.Year} {store.Name}")" />
                        </ListItem>
                    }
                </List>
            </Dialog>
        }
        @if (Store == null)
        {
            <Grid Item ExtraSmall="@GridSize.Twelve">
                @if(StoreException == null)
                {
                    <Loading Message="Loading item store..." />
                }
                else
                {
                    <Error Exception="@StoreException" />
                }
            </Grid>
        }
        else
        {
            @foreach (var item in Store.Items.OrderBy(x => x.StoreIndex))
            {
                <Grid Item Class="Store-Item" ExtraSmall="@GridSize.Twelve" Small="@GridSize.Six" Medium="@GridSize.Four" ExtraLarge="@GridSize.Three">
                    <Card style="@GetCardStyles(item)">
                        <CardHeader DisableTypography="true">
                            <AvatarContent>
                                <div title="@item.AuthorName">
                                    <Avatar Src="@item.AuthorAvatarUrl" Alt="@item.AuthorName">
                                    </Avatar>
                                </div>
                            </AvatarContent>
                            <TitleContent>
                                <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.H6" Style="@GetNameStyles(item)">
                                    <span>@item.Name</span>
                                </Skclusive.Material.Typography.Typography>
                            </TitleContent>
                            <SubHeaderContent>
                                @if (!String.IsNullOrEmpty(item.ItemType))
                                {
                                    <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary">
                                        <span>@item.ItemType</span>
                                    </Skclusive.Material.Typography.Typography>
                                }
                            </SubHeaderContent>
                        </CardHeader>
                        <CardContent>
                            <Grid Container Spacing="@Spacing.Two">
                                <Grid Item ExtraSmall="@GridSize.Six">
                                    <div class="Image-Root">
                                        <img src="@item.IconUrl" />
                                    </div>
                                </Grid>
                                <Grid Item ExtraSmall="@GridSize.Six">
                                    @if (item.MarketRankTotal > 0)
                                    {
                                        <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextPrimary" GutterBottom>
                                            <i class="fas fa-fw fa-balance-scale-left"></i>
                                            <span>@item.MarketRankPosition cheaper @item.ItemType.Pluralise(item.MarketRankPosition) in the marketplace (@item.MarketRankTotal total).</span>
                                        </Skclusive.Material.Typography.Typography>
                                    }
                                    @if (item.HasWorkshopFile)
                                    {
                                        <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextPrimary" NoWrap>
                                            <i class="fas fa-fw fa-shopping-cart"></i>
                                            @if (item.TotalSalesMax == null)
                                            {
                                                <span style="padding:8px">@item.TotalSalesMin.ToQuantityString() or more</span>
                                            }
                                            else if (item.TotalSalesMin == item.TotalSalesMax)
                                            {
                                                <span style="padding:8px">@item.TotalSalesMin.ToQuantityString()</span>
                                            }
                                            else
                                            {
                                                <span style="padding:8px">@item.TotalSalesMin.ToQuantityString() - @item.TotalSalesMax.Value.ToQuantityString()</span>
                                            }
                                        </Skclusive.Material.Typography.Typography>
                                        <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextPrimary" NoWrap>
                                            <i class="fas fa-fw fa-user"></i>
                                            @if (item.Subscriptions > 0)
                                            {
                                                <span style="padding:8px">@item.Subscriptions.Value.ToQuantityString()</span>
                                            }
                                        </Skclusive.Material.Typography.Typography>
                                        <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextPrimary" NoWrap GutterBottom>
                                            <i class="fas fa-fw fa-eye"></i>
                                            @if (item.Views > 0)
                                            {
                                                <span style="padding:8px">@item.Views.Value.ToQuantityString()</span>
                                            }
                                        </Skclusive.Material.Typography.Typography>
                                    }
                                    else
                                    {
                                        <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.Primary">
                                            <span>This item is not from the workshop, detailed statistics are unavailable.</span>
                                        </Skclusive.Material.Typography.Typography>
                                    }
                                    @if (!item.IsStillAvailableInStore)
                                    {
                                        @if (!item.HasMarketListing)
                                        {
                                            <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.Primary">
                                                <span>This item is no longer available.</span>
                                            </Skclusive.Material.Typography.Typography>
                                        }
                                        else 
                                        {
                                            <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.Primary">
                                                <span>This item is no longer available, grab it from the marketplace instead.</span>
                                            </Skclusive.Material.Typography.Typography>
                                        }
                                    }
                                    else if (item.HasMarketListing)
                                    {
                                        <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.Primary">
                                            <span>This item is also available in the marketplace.</span>
                                        </Skclusive.Material.Typography.Typography>
                                    }
                                </Grid>
                                <Grid Item Class="Action-Root" ExtraSmall="@GridSize.Six">
                                    <Skclusive.Material.Typography.Typography Class="Theme-Success">
                                        <Button OnClick="@(() => BuyItemStore(item))" Variant="@ButtonVariant.Contained" Color="@Skclusive.Core.Component.Color.Primary" Disabled="@(!item.IsStillAvailableInStore)">
                                            <i class="fas fa-fw fa-shopping-cart"></i>
                                            <strong>@item.Currency.ToPriceString(item.StorePrice)</strong>
                                        </Button>
                                    </Skclusive.Material.Typography.Typography>
                                </Grid>
                                <Grid Item Class="Action-Root" ExtraSmall="@GridSize.Six">
                                    @if (item.HasMarketListing)
                                    {
                                        <Skclusive.Material.Typography.Typography>
                                            <Button OnClick="@(() => BuyItemMarket(item))" Variant="@ButtonVariant.Contained" Color="@Skclusive.Core.Component.Color.Primary">
                                                <i class="fas fa-fw fa-balance-scale-left"></i>
                                                <span>@item.Currency.ToPriceString(item.MarketPrice ?? 0)</span>
                                            </Button>
                                        </Skclusive.Material.Typography.Typography>
                                    }
                                    else if (item.HasWorkshopFile)
                                    {
                                        <Skclusive.Material.Typography.Typography>
                                            <Button OnClick="@(() => ViewItem(item))" Variant="@ButtonVariant.Outlined" Color="@Skclusive.Core.Component.Color.TextSecondary">
                                                <i class="fas fa-fw fa-eye"></i>
                                                <span>View</span>
                                            </Button>
                                        </Skclusive.Material.Typography.Typography>
                                    }
                                </Grid>
                            </Grid>
                        </CardContent>
                    </Card>
                </Grid>   
            }
            <Grid Item ExtraSmall="@GridSize.Twelve" >
                <Grid Container Spacing="@Spacing.Two">
                    <Grid Item ExtraSmall="@GridSize.Twelve" ExtraLarge="@GridSize.Six">
                        <Paper>
                            <Tabs Value="@SelectedItemChartPanel"
                                  OnChange="@OnSelectedItemChartChanged"
                                  IndicatorColor="@Skclusive.Core.Component.Color.Primary"
                                  TextColor="@Skclusive.Core.Component.Color.Primary"
                                  Variant="@TabsVariant.FullWidth">
                                <Tab Id="store-tab" Control="store-tab-panel-0" Value="0" Label="Revenue" Wrapped />
                                <Tab Id="store-tab" Control="store-tab-panel-1" Value="1" Label="Sales" Wrapped />
                                <Tab Id="store-tab" Control="store-tab-panel-2" Value="2" Label="Timeline" Wrapped />
                                @if (Store.Items.Any(x => x.HasMarketListing))
                                {
                                    <Tab Id="store-tab" Control="store-tab-panel-3" Value="3" Label="Profitability" Wrapped />
                                }
                            </Tabs>
                            <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="0">
                                @if ((int)SelectedItemChartPanel == 0)
                                {
                                    @if (ItemSalesChart != null)
                                    {
                                        <ChartJsBarChart @ref="ItemSalesChartJs" Config="@ItemSalesChart" />
                                        <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextSecondary" Class="Chart-Footnote">
                                            <span><strong>NOTE:</strong> Steam doesn't disclose exact sales figures. This is a conservative <strong>estimate</strong> of revenue earned per-item. Because an individual can purchase multiple copies of the same item, actual revenue will likely be higher.</span>
                                        </Skclusive.Material.Typography.Typography>
                                    }
                                    else
                                    {
                                        <Error Title="Unavailable" SubTitle="No data yet" />
                                    }
                                }
                            </TabPanel>
                            <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="1">
                                @if ((int)SelectedItemChartPanel == 1)
                                {
                                    @if (ItemSubscribersChart != null)
                                    {
                                        <ChartJsBarChart @ref="ItemSubscribersChartJs" Config="@ItemSubscribersChart" />
                                    }
                                    else
                                    {
                                        <Error Title="Unavailable" SubTitle="No data yet" />
                                    }
                                }
                            </TabPanel>
                            <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="2">
                                @if ((int)SelectedItemChartPanel == 2)
                                {
                                    @if (ItemSubscribersHistoryChart != null)
                                    {
                                        <ChartJsLineChart @ref="ItemSubscribersHistoryChartJs" Config="@ItemSubscribersHistoryChart" />
                                    }
                                    else
                                    {
                                        <Error Title="Unavailable" SubTitle="No data yet" />
                                    }
                                }
                            </TabPanel>
                            <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="3">
                                @if ((int)SelectedItemChartPanel == 3)
                                {
                                    @if (ItemMarketplacePerformanceChart != null)
                                    {
                                        <div class="Chart-Radar">
                                            <ChartJsRadarChart @ref="ItemMarketplacePerformanceChartJs" Config="@ItemMarketplacePerformanceChart" />
                                        </div>
                                    }
                                    else
                                    {
                                        <Error Title="Unavailable" SubTitle="No data yet" />
                                    }
                                }
                            </TabPanel>
                        </Paper>
                    </Grid>
                    <Grid Item ExtraSmall="@GridSize.Twelve" ExtraLarge="@GridSize.Six">
                        <Grid Container Spacing="@Spacing.Two">
                            @foreach (var media in Store.Media)
                            {
                                <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six">
                                    <YouTubeVideo VideoId="@media" />
                                </Grid>
                            }
                        </Grid>
                    </Grid>
                </Grid>
            </Grid>
        }
    </Grid>
}

@code {
    private ItemStoreListDTO[] Stores { get; set; }

    private ItemStoreListDTO SelectedStore { get; set; }

    private ItemStoreDetailedDTO Store { get; set; }

    private Exception StoreException { get; set; }

    private object SelectedItemChartPanel { get; set; } = 1;

    private ChartJsBarChart ItemSalesChartJs { get; set; }

    private ChartJsBarChart ItemSubscribersChartJs { get; set; }

    private ChartJsLineChart ItemSubscribersHistoryChartJs { get; set; }

    private ChartJsRadarChart ItemMarketplacePerformanceChartJs { get; set; }

    private BarConfig ItemSalesChart { get; set; }

    private BarConfig ItemSubscribersChart { get; set; }

    private LineConfig ItemSubscribersHistoryChart { get; set; }

    private RadarConfig ItemMarketplacePerformanceChart { get; set; }

    private bool StoreSelectorDialogOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshStores();
    }
    
    private void BuyItemStore(StoreItemDetailDTO item)
    {
        string url = $"https://store.steampowered.com/itemstore/{item.SteamAppId}/detail/{item.SteamId}/";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }
    
    private void BuyItemMarket(StoreItemDetailDTO item)
    {
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

    private void ViewItem(StoreItemDetailDTO item)
    {
        string url = $"https://steamcommunity.com/sharedfiles/filedetails/?id={item.SteamWorkshopId}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

    private void HandleStoreSelectorDialogOpen()
    {
        StoreSelectorDialogOpen = true;
        StateHasChanged();
    }

    private void HandleStoreSelectorDialogClose()
    {
        StoreSelectorDialogOpen = false;
        StateHasChanged();
    }

    private async Task RefreshStores()
    {
        try
        {
            Stores = await Http.GetFromJsonAsync<ItemStoreListDTO[]>($"api/store");
            if (Stores.Any())
            {
                await OnSelectedStoreChanged(Stores.Last());
            }
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading the store");
        }
        StateHasChanged();
    }

    private async Task RefreshStore(Guid storeId)
    {
        try
        {
            Store = null;
            StoreException = null;
            StateHasChanged();
            Store = await Http.GetFromJsonAsync<ItemStoreDetailedDTO>($"api/store/{storeId}");
            if (Store != null)
            {
                SelectedItemChartPanel = (Store.End == null ? 0 : 3);
                OnSelectedItemChartChanged(SelectedItemChartPanel);
            }
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading the store");
        }
        StateHasChanged();
    }

    private async Task OnSelectedStoreChanged(object value)
    {
        StoreSelectorDialogOpen = false;
        SelectedStore = (ItemStoreListDTO) value;
        if (SelectedStore != null)
        {
            await RefreshStore(SelectedStore.Id);
        }
    }

    private void OnSelectedItemChartChanged(object value)
    {
        SelectedItemChartPanel = value;
        ItemSalesChart = null;
        ItemSubscribersChart = null;
        ItemSubscribersHistoryChart = null;
        ItemMarketplacePerformanceChart = null;
        switch (SelectedItemChartPanel)
        {
            case 0: RedrawItemSalesChart(); break;
            case 1: RedrawItemSubscribersChart(); break;
            case 2: RedrawItemSubscribersTimelineChart(); break;
            case 3: RedrawItemMarketplacePerformanceChart(); break;
        }

        StateHasChanged();
    }
    
    private string GetCardStyles(StoreItemDetailDTO item)
    {
        return $"border: 2px solid {item.ForegroundColour}";
    }

    private string GetNameStyles(StoreItemDetailDTO item)
    {
        return $"color: {item.ForegroundColour}";
    }

    private void RedrawItemSalesChart()
    {
        var storeItems = Store.Items
            .Where(x => x.HasWorkshopFile)
            .OrderBy(x => x.StoreIndex)
            .ToList();

        if (!storeItems.Any())
        {
            return;
        }

        ItemSalesChart = new BarConfig
        {
            Options = new BarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true,
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"

                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemSalesChart.Data.Labels.AddRange(
            storeItems.Select(x => x.Name).ToArray()
        );

        var localScaleString = String.Empty.PadRight(State.Currency.Scale, '0');
        var localScaleDivisor = Int64.Parse($"1{localScaleString}");

        var authorRevenue = new BarDataset<DoubleWrapper>
        {
            Label = "Skin Author Royalties",
            BackgroundColor = "#6BC16F",
            BorderColor = "#335E33",
            BorderWidth = 1
        };
        authorRevenue.AddRange(
            storeItems.Select(x => (DoubleWrapper)Math.Round((double)((x.TotalSalesMin * x.StorePrice) * 0.25) / localScaleDivisor, State.Currency.Scale))
        );

        var totalRevenue = new BarDataset<DoubleWrapper>
        {
            Label = "Skin Sales Revenue",
            BackgroundColor = "#388e3c",
            BorderColor = "#1b5e20",
            BorderWidth = 1
        };
        totalRevenue.AddRange(
            storeItems.Select(x => (DoubleWrapper)Math.Round((double)(x.TotalSalesMin * x.StorePrice) / localScaleDivisor, State.Currency.Scale))
        );

        ItemSalesChart.Data.Datasets.AddRange(new[] {
            authorRevenue, totalRevenue
        });
    }

    private void RedrawItemSubscribersChart()
    {
        var storeItems = Store.Items
            .Where(x => x.HasWorkshopFile)
            .OrderBy(x => x.StoreIndex)
            .ToList();

        if (!storeItems.Any())
        {
            return;
        }

        ItemSubscribersChart = new BarConfig
        {
            Options = new BarOptions
            {
                Legend = new Legend
                {
                    Display = false,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true,
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemSubscribersChart.Data.Labels.AddRange(
            storeItems.Select(x => x.Name).ToArray()
        );

        var itemSubscriptions = new BarDataset<DoubleWrapper>
        {
            Label = "Subscribers",
            BackgroundColor = "#388e3c",
            BorderColor = "#1b5e20",
            BorderWidth = 1
        };
        itemSubscriptions.AddRange(
            storeItems.Select(x => (DoubleWrapper)x.Subscriptions)
        );

        ItemSubscribersChart.Data.Datasets.AddRange(new[] {
            itemSubscriptions
        });
    }

    private void RedrawItemSubscribersTimelineChart()
    {
        var startOfWeek = Store.Start.DateTime;
        var storeItems = Store.Items
            .Where(x => x.HasWorkshopFile)
            .OrderBy(x => x.StoreIndex)
            .ToList();

        if (!storeItems.Any())
        {
            return;
        }

        ItemSubscribersHistoryChart = new LineConfig
        {
            Options = new LineOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new Scales
                {

                    xAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemSubscribersHistoryChart.Data.Labels = GetSkinWeekDates(startOfWeek)
            .Select(x => x.ToString("dd MMMM yyyy"))
            .ToList();

        foreach (var item in storeItems)
        {
            var itemDataSet = new LineDataset<DoubleWrapper>
            {
                Label = item.Name,
                BackgroundColor = GraphDataSetColours[storeItems.IndexOf(item)],
                BorderColor = GraphDataSetColours[storeItems.IndexOf(item)],
                BorderWidth = 3,
                LineTension = 0.1,
                Fill = false
            };
            itemDataSet.AddRange(
                GetItemSubscriptionDataset(item, startOfWeek)
            );
            ItemSubscribersHistoryChart.Data.Datasets.Add(itemDataSet);
        }
    }

    private void RedrawItemMarketplacePerformanceChart()
    {
        var storeItems = Store.Items
            .Where(x => x.HasMarketListing)
            .OrderBy(x => x.StoreIndex)
            .ToList();

        if (!storeItems.Any())
        {
            return;
        }

        ItemMarketplacePerformanceChart = new RadarConfig
        {
            Options = new RadarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scale = new Scale()
                {
                    Ticks = new LinearCartesianTicks()
                    {
                        Display = false,
                        BeginAtZero = true
                    }
                }
            }
        };

        ItemMarketplacePerformanceChart.Data.Labels.AddRange(
            storeItems.Select(x => x.Name).ToArray()
        );

        var itemMarketPrices = new RadarDataset
        {
            Label = "Market Price",
            BackgroundColor = "#bbdefb",
            BorderColor = "#0d47a1",
            BorderWidth = 1,
            Data = storeItems
                .Select(x => (double)x.Currency.ToPrice(x.MarketPrice ?? 0))
                .ToList()
        };

        var itemStorePrices = new RadarDataset
        {
            Label = "Store Price",
            BackgroundColor = "#c8e6c9",
            BorderColor = "#1b5e20",
            BorderWidth = 1,
            Data = storeItems
            .Select(x => (double)x.Currency.ToPrice(x.StorePrice))
            .ToList()
        };

        ItemMarketplacePerformanceChart.Data.Datasets.AddRange(new[] {
            itemMarketPrices, itemStorePrices
        });
    }

    IEnumerable<DateTime> GetSkinWeekDates(DateTime startOfWeek)
    {
        return new[] {
            startOfWeek.Date.AddDays(-1),
            startOfWeek.Date.AddDays(0),
            startOfWeek.Date.AddDays(1),
            startOfWeek.Date.AddDays(2),
            startOfWeek.Date.AddDays(3),
            startOfWeek.Date.AddDays(4),
            startOfWeek.Date.AddDays(5),
            startOfWeek.Date.AddDays(6)
        };
    }

    IEnumerable<DoubleWrapper> GetItemSubscriptionDataset(StoreItemDetailDTO item, DateTime startOfWeek)
    {
        var dataSet = new List<DoubleWrapper>();
        if (item?.SubscriptionsHistory?.Any() != true)
        {
            return dataSet;
        }

        var graphDates = GetSkinWeekDates(startOfWeek).Where(x => x < DateTime.UtcNow);
        foreach (var graphDate in graphDates)
        {
            var dataPoint = 0d;
            var dataKey = graphDate.Date.ToString("dd MMM yyyy");
            var keys = item.SubscriptionsHistory.Keys.ToArray();
            if (item.SubscriptionsHistory.ContainsKey(dataKey))
            {
                dataPoint = item.SubscriptionsHistory[dataKey];
            }
            dataSet.Add(dataPoint);
        }
        return dataSet;
    }

    private string[] GraphDataSetColours = {
        "#2196F3",
        "#8BC34A",
        "#FF5722",
        "#E91E63",
        "#9C27B0",
        "#3F51B5",
        "#FF9800",
        "#FFEB3B",
        "#795548",
        "#00BCD4",
        "#607D8B"
    };

}
