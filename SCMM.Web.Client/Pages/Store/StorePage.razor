@page "/"
@page "/store"
@page "/store/{StoreId}"
@page "/steam/store"
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Store
@inject ILogger<StorePage> Logger
@inject IDialogService Dialogs
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

@if (StoreList == null)
{
    @if (StoreException == null)
    {
        <Loading Message="Loading store list..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
    }
    else
    {
        <Alert Exception="@StoreException" />
    }
}
else if (StoreList.Any())
{
    <MudTabs Elevation="0" Position="MudBlazor.Position.Bottom" ActivePanelIndex="StoreIndex" ActivePanelIndexChanged="OnSelectedStoreChanged" Class="mud-transparent-tabs">
        <ChildContent>
		    @foreach (var store in StoreList)
            {
                <MudTabPanel ID="@store.Id" Tag="@store" Text="@GetStoreTitle(store)" />
            }
	    </ChildContent>
	    <TabPanelHeader>
            @if (!String.IsNullOrEmpty((context.Tag as StoreIdentifierDTO).Name))
            {
                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="pl-2">@((context.Tag as StoreIdentifierDTO).Name)</MudText>
            }
        </TabPanelHeader>
	    <Header>
            <MudIconButton Size="MudBlazor.Size.Small" Icon="fa fa-fw fa-history" OnClick="@(() => ShowStoreListDialog(StoreList))" Class="pa-2" />
	    </Header>
    </MudTabs>
    <PageContainer Title="Store" Class="mb-6 ml-6 mr-6">

        <MudGrid Spacing="2">
            @if (Store == null)
            {
                <MudItem xs="12">
                    @if (StoreException == null)
                    {
                        <Loading Message="Loading store..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
                    }
                    else
                    {
                        <Alert Exception="@StoreException" />
                    }
                </MudItem>
            }
            else
            {
                @if (Store.Notes != null)
                {
                    @foreach (var note in Store.Notes)
                    {
                        <MudItem xs="12">
                            <Alert Variant="MudBlazor.Variant.Filled" Severity="MudBlazor.Severity.Normal" Icon="fas fa-fw fa-info-circle" Title="@note" />
                        </MudItem>
                    }
                }
                
                <MudItem xs="12">
                    <StoreAnalyticsPanel Store="@Store" />
                </MudItem>
                
                @if (Store.IsDraft && State.IsInRole(Roles.Contributor))
                {
                    <MudItem xs="12">
                        <MudPaper Outlined="true" Class="d-flex flex-row justify-center align-center full-height pa-2">
                            <MudAutocomplete T="ItemDescriptionWithPriceDTO" @bind-Value="LinkedItem" SearchFunc="@SearchItem" ToStringFunc="@(x => x == null ? null : x.Name)" Variant="Variant.Outlined" Margin="Margin.Dense" 
                                             Placeholder="Suggest an item for this store..." Class="flex-grow-0 flex-shrink-0 pl-1 pr-2">
                                <ItemTemplate Context="item">
                                    <div class="d-flex flex-row justify-start align-center">
                                        <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                        <MudText Style="@($"color: {item.ForegroundColour}")">@item.Name</MudText>
                                    </div>
                                </ItemTemplate>
                            </MudAutocomplete>
                            <MudNumericField @bind-Value="LinkedItemStorePrice" Format="F2" Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-dollar-sign" Variant="Variant.Outlined" Margin="Margin.Dense" 
                                             HideSpinButtons="true" Class="flex-grow-0 flex-shrink-0 pl-1 pr-2" />
                            <MudTooltip Text="Add this item to the store">
                                <MudButton OnClick="@LinkItem" Variant="Variant.Text" Color="Color.Primary" StartIcon="fas fa-fw fa-plus" Class="flex-grow-0 flex-shrink-0 pa-2">Add</MudButton>
                            </MudTooltip>
                        </MudPaper>
                    </MudItem>
                }

                @if (!Store.Items.Any())
                {
                    <MudItem xs="12" sm="6" md="4" xl="3">
                        <MudPaper Outlined="true" Class="d-flex flex-column justify-center align-center full-height pa-4">
                            <TumbleWeed />
                            <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default">No items found!</MudText>
                            @if (State.IsInRole(Roles.Contributor))
                            {
                                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">You can help by contributing a suggestion.</MudText>
                            }
                        </MudPaper>
                    </MudItem>
                }

                @foreach (var item in Store.Items.OrderBy(x => (x.TopSellerIndex ?? 0)).ThenByDescending(x => (x.SalesMinimum ?? 0) * (x.StorePrice ?? 0)).ThenByDescending(x => x.Subscriptions))
                {
                    <MudItem xs="12" sm="6" md="4" xl="3">
                        <div class="store-item full-height">
                            <MudCard Outlined="true" Class="full-height d-flex flex-column">
                                <MudCardHeader>
                                    <CardHeaderAvatar>
                                        <MudTooltip Text="@item.CreatorName">
                                            <MudAvatar Image="@item.CreatorAvatarUrl" Size="MudBlazor.Size.Medium" />
                                        </MudTooltip>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                        <div class="item-name">
                                            <MudText Typo="MudBlazor.Typo.h6" Style="@($"color: {item.ForegroundColour}")">@item.Name</MudText>
                                        </div>
                                        @if (!String.IsNullOrEmpty(item.ItemType))
                                        {
                                            <div class="item-type">
                                                <MudText Typo="MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Secondary">@item.ItemType</MudText>
                                            </div>
                                        }
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <div class="pa-1 text-centered">
                                            @if (Store.End == null && item.IsStillAvailableFromStore && item.TopSellerIndex != null)
                                            {
                                                    <MudTooltip>
                                                        <ChildContent>
                                                            <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Secondary" Style="@GetTopSellerStyles(item.TopSellerIndex)">
                                                                <i class="fas fa-fw fa-trophy"/>
                                                            </MudText>
                                                            <MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary" Style="@GetTopSellerStyles(item.TopSellerIndex)">
                                                                <span>@(item.TopSellerIndex.Value + 1)@((item.TopSellerIndex.Value + 1).GetPositionSuffix())</span>
                                                            </MudText>
                                                        </ChildContent>
                                                        <TooltipContent>
                                                            <span>This item is currently @(item.TopSellerIndex.Value + 1)@((item.TopSellerIndex.Value + 1).GetPositionSuffix()) on the store top-sellers list</span>
                                                        </TooltipContent>
                                                    </MudTooltip>
                                            }
                                            @if (item.IsDraft && State.IsInRole(Roles.Contributor))
                                            {
                                                <MudTooltip Text="Remove this item from the store">
                                                    <MudFab OnClick="@(() => UnlinkItem(item))" Color="Color.Error" Size="Size.Medium" Icon="fas fa-fw fa-trash-alt"></MudFab>
                                                </MudTooltip>
                                            }
                                        </div>
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent Class="d-flex flex-column flex-grow-1">
                                    <MudGrid Spacing="1" Class="flex-grow-1">

                                        <MudItem xs="5">
                                            <div class="item-image">
                                                <MudTooltip Placement="MudBlazor.Placement.Top">
                                                    <ChildContent>
                                                        @if(item.HasWorkshopFile)
                                                        {
                                                            <img src="@item.IconUrl" @onclick="@(() => ViewItemWorkshopPage(item))" class="@($"{(item.Tags.GetFlag(Constants.RustAssetTagGlow) ? "glow" : null)} clickable")" />
                                                        }
                                                        else
                                                        {
                                                            <img src="@item.IconUrl" class="@(item.Tags.GetFlag(Constants.RustAssetTagGlow) ? "glow" : null)" />
                                                        }
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        @if(!String.IsNullOrEmpty(item.Description))
                                                        {
                                                            <span>@item.Description</span>
                                                        }
                                                        @if(item.HasWorkshopFile)
                                                        {
                                                            <p>Click to view the items workshop page.</p>
                                                        }
                                                    </TooltipContent>
                                                </MudTooltip>
                                            </div>
                                        </MudItem>
                                        <MudItem xs="7">
                                            @if (!item.HasWorkshopFile)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                                                    <span>This item is not from the Rust workshop, some statistics may be unavailable.</span>
                                                </MudText>
                                            }
                                            @if (item.MarketRankTotal > 0)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-balance-scale-left mud-secondary-text"></i>
                                                    <span>
                                                        <MudLink @onclick="@(() => ShowItemTypeDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.MarketRankIndex cheaper @item.ItemType.Pluralise(item.MarketRankTotal)</MudLink>
                                                        <span class="mud-secondary-text"> in the marketplace (@item.MarketRankTotal total).</span>
                                                    </span>
                                                </MudText>
                                            }
                                            @if (item.SalesMinimum > 0)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-shopping-cart mud-secondary-text"></i>
                                                    <span>
                                                        @if (item.SalesMaximum == null)
                                                        {
                                                            <span class="mud-secondary-text">More than </span>
                                                            <span>@item.SalesMinimum.Value.ToQuantityString() sold</span>
                                                        }
                                                        else if (item.SalesMinimum == item.SalesMaximum)
                                                        {
                                                            <span>@item.SalesMinimum.Value.ToQuantityString() sold</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="mud-secondary-text">Between </span>
                                                            <span>@item.SalesMinimum.Value.ToQuantityString() - @item.SalesMaximum.Value.ToQuantityString() sold</span>
                                                        }
                                                    </span>
                                                    <span>
                                                        <i class="fas fa-fw fa-question-circle" title="Steam doesn't disclose exact sales figures, this is just an estimate. See the store analytics & insights for more details." />
                                                    </span>
                                                </MudText>
                                            }
                                            else if (item.Subscriptions > 0)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-user mud-secondary-text"></i>
                                                    <span>
                                                        <span>@item.Subscriptions.Value.ToQuantityString() subscribers</span>
                                                    </span>
                                                </MudText>
                                            }
                                            @if (item.BreaksIntoComponents != null)
                                            {
                                                @foreach (var component in item.BreaksIntoComponents)
                                                {
                                                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                        <i class="fas fa-fw fa-cubes mud-secondary-text"></i>
                                                        <span>
                                                            <span class="mud-secondary-text">Breaks down into </span>
                                                            <span>@(component.Value)x @component.Key</span>
                                                        </span>
                                                    </MudText>
                                                }
                                            }
                                            @if (!String.IsNullOrEmpty(item.ItemCollection))
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-paint-roller mud-secondary-text"></i>
                                                    <span>
                                                        <span class="mud-secondary-text">Part of the </span>
                                                        <MudLink @onclick="@(() => ShowItemCollectionDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.ItemCollection</MudLink>
                                                        <span class="mud-secondary-text"> set</span>
                                                    </span>
                                                </MudText>
                                            }
                                            <div class="my-3">
                                                <MudTooltip>
                                                    <ChildContent>
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Tradable" Disabled="@(!item.IsTradable)"
                                                                 Icon="@(item.IsTradable ? "fas fa-fw fa-exchange-alt mr-2" : "fas fa-fw fa-times")" 
                                                                 Variant="@(item.IsTradable ? MudBlazor.Variant.Filled : MudBlazor.Variant.Outlined)" 
                                                                 Color="@(item.IsTradable ? MudBlazor.Color.Default : MudBlazor.Color.Default)" />
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        @if (item.IsTradable)
                                                        {
                                                            @if (item.TradableRestrictionDays > 0)
                                                            {
                                                                <span>This item <strong>can</strong> be traded <strong>@(item.TradableRestrictionDays)</strong> day(s) after purchase</span>
                                                            }
                                                            else
                                                            {
                                                                <span>This item <strong>can</strong> be traded immediately after purchase</span>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span>This item <strong>cannot</strong> be traded once purchased</span>
                                                        }
                                                    </TooltipContent>
                                                </MudTooltip>
                                                <MudTooltip>
                                                    <ChildContent>
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Marketable" Disabled="@(!item.IsMarketable)"
                                                                 Icon="@(item.IsMarketable ? "fas fa-fw fa-balance-scale-left mr-3" : ((item.IsStillAvailableFromStore && item.MarketableRestrictionDays > 0) ? "fas fa-fw fa-question" : "fas fa-fw fa-times"))" 
                                                                 Variant="@(item.IsMarketable ? MudBlazor.Variant.Filled : MudBlazor.Variant.Outlined)" 
                                                                 Color="@(item.IsMarketable ? MudBlazor.Color.Default : MudBlazor.Color.Default)" />
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        @if (item.IsMarketable)
                                                        {
                                                            @if (item.MarketableRestrictionDays > 0)
                                                            {
                                                                <span>This item <strong>can</strong> be listed on the Steam Community Market <strong>@(item.MarketableRestrictionDays)</strong> day(s) after purchase</span>
                                                            }
                                                            else
                                                            {
                                                                <span>This item <strong>can</strong> be listed on the Steam Community Market immediately after purchase</span>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            @if (item.IsStillAvailableFromStore && item.MarketableRestrictionDays > 0)
                                                            {
                                                                <span>This item <strong>cannot</strong> currently be listed on the Steam Community Market once purchased, but <strong>probably</strong> will be marketable when the next store is released in about @((Store.Start.AddDays(7) - DateTimeOffset.Now).ToDurationString(showMinutes: false, showSeconds: false, maxGranularity: 2)) from now.</span>
                                                                <span>This is a common Steam issue with some store items and it generally fixes itself when the store changes. If you have ever noticed that some items are available on the market early but others are not, this is the reason why.</span>
                                                            }
                                                            else
                                                            {
                                                                <span>This item <strong>cannot</strong> be listed on the Steam Community Market once purchased</span>
                                                            }
                                                        }
                                                    </TooltipContent>
                                                </MudTooltip>
                                                @if (item.Tags.GetFlagAsPercentage(Constants.RustAssetTagGlow) > 0)
                                                {
                                                    <MudTooltip>
                                                        <ChildContent>
                                                            <MudChip Size="MudBlazor.Size.Small" Text="@($"{@item.Tags.GetFlagAsPercentage(Constants.RustAssetTagGlow)}% Glow")" Icon="fas fa-fw fa-moon mr-3" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                                                        </ChildContent>
                                                        <TooltipContent>
                                                            @if (item.Tags.GetFlagAsPercentage(Constants.RustAssetTagGlow) < 100)
                                                            {
                                                                <span>@item.Tags.GetFlagAsPercentage(Constants.RustAssetTagGlow)% of this item glows in the dark, making it much easier to see at night</span>
                                                            }
                                                            else 
                                                            {
                                                                <span>Some parts of this item glow in the dark, making it much easier to see at night</span>
                                                            }
                                                        </TooltipContent>
                                                    </MudTooltip>
                                                }
                                                @if (item.Tags.GetFlag(Constants.RustAssetTagGlowSights))
                                                {
                                                    <MudTooltip Text="The iron sights of this weapon glow in the dark, making it much easier to aim at night">
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Glow Sight" Icon="fas fa-fw fa-crosshairs mr-3" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                                                    </MudTooltip>
                                                }
                                                @if (item.Tags.GetFlagAsPercentage(Constants.RustAssetTagCutout) > 0)
                                                {
                                                    <MudTooltip>
                                                        <ChildContent>
                                                            <MudChip Size="MudBlazor.Size.Small" Text="@($"{@item.Tags.GetFlagAsPercentage(Constants.RustAssetTagCutout)}% Cutout")" Icon="fas fa-fw fa-cut mr-3" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Default" />
                                                        </ChildContent>
                                                        <TooltipContent>
                                                            @if (item.Tags.GetFlagAsPercentage(Constants.RustAssetTagCutout) < 100)
                                                            {
                                                                <span>@item.Tags.GetFlagAsPercentage(Constants.RustAssetTagCutout)% of this items material has been removed. The shape may appeared altered when compared against the default item</span>
                                                            }
                                                            else 
                                                            {
                                                                <span>Parts of this items material has been removed. The shape may appeared altered when compared against the default item</span>
                                                            }
                                                        </TooltipContent>
                                                    </MudTooltip>
                                                }
                                            </div>
                                            @if (item.IsStillAvailableFromStore && item.HasMarketListing)
                                            {
                                                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                                                    <span>This item is also available on the market.</span>
                                                </MudText>
                                            }
                                            else if (!item.IsStillAvailableFromStore && item.HasMarketListing)
                                            {
                                                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                                                    <span>This item is no longer available from the store, grab it from the market instead.</span>
                                                </MudText>
                                            }
                                            else if (!item.IsStillAvailableFromStore)
                                            {
                                                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                                                    <span>This item is no longer available.</span>
                                                </MudText>
                                            }
                                        </MudItem>
                                    
                                        <MudItem xs="5" Class="text-centered">
                                            <div class="d-flex flex-row justify-center align-center">
                                                @if (item.StorePrice > 0)
                                                {
                                                    <MudText Typo="MudBlazor.Typo.h6" Color="@(item.IsStillAvailableFromStore ? MudBlazor.Color.Default : MudBlazor.Color.Secondary)" Class="@($"no-wrap {(item.IsStillAvailableFromStore ? null : "text-line-through")}")">
                                                        <span>@State.Currency.ToPriceString(item.StorePrice.Value)</span>
                                                    </MudText>
                                                }
                                                else
                                                {
                                                    <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary" Class="px-4">
                                                        <span>Store price is not available in your currency</span>
                                                    </MudText>
                                                }
                                            </div>
                                        </MudItem>
                                        <MudItem xs="7" Class="text-centered d-flex align-stretch">
                                            <MudButton OnClick="@(() => BuyItemFromStore(item))" Variant="@(item.IsStillAvailableFromStore ? MudBlazor.Variant.Filled : MudBlazor.Variant.Outlined)" 
                                                        Color="MudBlazor.Color.Tertiary" Disabled="@(!item.IsStillAvailableFromStore)" FullWidth>
                                                <RustTransparentIcon />        
                                                <strong class="ml-1">Store</strong>
                                            </MudButton>
                                        </MudItem>

                                        @if (item.HasMarketListing)
                                        {
                                            <MudItem xs="5" Class="text-centered">
                                                <div class="d-flex flex-column justify-center align-center">
                                                    <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="no-wrap">
                                                        <span>@State.Currency.ToPriceString(item.MarketPrice ?? 0)</span>
                                                    </MudText>
                                                    @if (item.MarketPrice > 0 && item.StorePrice > 0)
                                                    {
                                                        @if (item.MarketPrice >= item.StorePrice)
                                                        {
                                                            <MudChip Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-arrow-up mr-1" Text="@item.MarketPrice.Value.ToMovementString(item.StorePrice.Value)" 
                                                                     Color="MudBlazor.Color.Success" Variant="MudBlazor.Variant.Outlined" Class="my-0" />
                                                        }
                                                        else
                                                        {
                                                            <MudChip Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-arrow-down mr-1" Text="@item.MarketPrice.Value.ToMovementString(item.StorePrice.Value)" 
                                                                     Color="MudBlazor.Color.Error" Variant="MudBlazor.Variant.Outlined" Class="my-0" />
                                                        }
                                                    }
                                                </div>
                                            </MudItem>
                                            <MudItem xs="7" Class="text-centered d-flex align-stretch">
                                                <MudButton OnClick="@(() => BuyItemFromMarket(item))" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Dark" StartIcon="fab fa-fw fa-steam" FullWidth>
                                                    <strong>Marketplace</strong>
                                                </MudButton>
                                            </MudItem>
                                        }

                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </div>
                    </MudItem>   
                }
                
                @foreach (var media in Store.Media)
                {
                    <MudItem xs="12" sm="6" md="4" xl="3">
                        <YouTubeVideo VideoId="@media" />
                    </MudItem>
                }

            }
        </MudGrid>

    </PageContainer>
}

@code {

    private StoreIdentifierDTO[] StoreList { get; set; }
    
    private StoreDetailsDTO Store { get; set; }
    
    [Parameter]
    public string StoreId { get; set; }
    
    private int StoreIndex { get; set; }

    private Exception StoreException { get; set; }
    
    private ItemDescriptionWithPriceDTO LinkedItem { get; set; }
    
    private double LinkedItemStorePrice { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Load store list
        await LoadStoreList();
    }

    protected override async Task OnParametersSetAsync()
    {
        // If there is no store selected yet, navigate to the current one
        if (String.IsNullOrEmpty(StoreId))
        {
            NavigationManager.NavigateTo($"/store/current");
        }

        // Otherwise, load the selected store details
        else if (!String.Equals(StoreId, Store?.Id.ToString(), StringComparison.InvariantCultureIgnoreCase))
        {
            await LoadStore();
        }
    }
    
    private void OnSelectedStoreChanged(int index)
    {
        var oldStore = StoreList.ElementAtOrDefault(StoreIndex);
        StoreIndex = index;

        // Navigate to the selected store page
        var store = StoreList.ElementAtOrDefault(index);
        if (store != null && store != oldStore)
        {
            NavigationManager.NavigateTo($"/store/{store.Id}");  
        }
    }

    private async Task LoadStoreList()
    {
        try
        {
            Store = null;
            StoreList = null;
            StoreException = null;
            StateHasChanged();

            // Load the store list
            StoreList = await Http.GetFromJsonAsync<StoreIdentifierDTO[]>($"api/store");
   
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading the store list");
            Snackbar.Add($"Unable to load store list. {ex.Message}", MudBlazor.Severity.Error);
            StateHasChanged();
        }
    }

    private async Task LoadStore()
    {
        try
        {
            Store = null;
            StoreException = null;
            StateHasChanged();

            if (!String.IsNullOrEmpty(StoreId))
            {
                // Load the new store (if any)
                Store = await Http.GetFromJsonAsync<StoreDetailsDTO>($"api/store/{StoreId}");
                StoreId = Store.Id;
                
                // The selected store should show as the active tab in the store tab list
                StoreIndex = Array.IndexOf(StoreList, StoreList.FirstOrDefault(x => x.Id == StoreId));

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading store {StoreId}");
            Snackbar.Add($"Unable to load store details. {ex.Message}", MudBlazor.Severity.Error);
            StateHasChanged();
        }
    }

    private void BuyItemFromStore(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://store.steampowered.com/itemstore/{item.AppId}/detail/{item.Id}/"
        );
    }
    
    private void BuyItemFromMarket(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/market/listings/{item.AppId}/{Uri.EscapeDataString(item.Name)}"
        );
    }

    private void ViewItemWorkshopPage(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/sharedfiles/filedetails/?id={item.WorkshopFileId}"
        );
    }
    
    private void ShowStoreListDialog(StoreIdentifierDTO[] stores)
    {
        Dialogs.Show<ViewStoreListDialog>(null, parameters: new DialogParameters()
        {
            ["List"] = stores
        });
    }

    private void ShowItemTypeDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemListDialog>(null, parameters: new DialogParameters()
        {
            ["ListName"] = item.ItemType,
            ["ListUrl"] = $"api/item/type/{item.ItemType}?compareWithItemId={item.AssetDescriptionId}&marketableItemsOnly=true",
            ["HighlightedItemId"] = item.AssetDescriptionId,
        });
    }

    private void ShowItemCollectionDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemCollectionDialog>(null, parameters: new DialogParameters()
        {
            ["CollectionName"] = item.ItemCollection,
            ["CollectionUrl"] = $"api/item/collection/{item.ItemCollection}"
        });
    }
    
    private string GetTopSellerStyles(int? topSellerIndex)
    {
        switch(topSellerIndex)
        {
            case 0: return "color: gold !important";
            case 1: return "color: silver !important";
            case 2: return "color: #cd7f32 !important";
            default: return "color: #fff !important";
        }
    }

    private string GetStoreTitle(StoreIdentifierDTO store)
    {
        var title = new StringBuilder();
        title.Append(store.Start.ToString("MMMM d"));
        if (store.Id == StoreId)
        {
            title.Append(store.Start.ToString(" yyyy"));
        }

        return title.ToString().Trim();
    }
    
    private async Task<IEnumerable<ItemDescriptionWithPriceDTO>> SearchItem(string value)
    {
        try
        {
            var search = await Http.GetFromJsonAsync<PaginatedResult<ItemDescriptionWithPriceDTO>>(
                $"api/item?filter={Uri.EscapeDataString(value ?? String.Empty)}&start=0&count=25"
            );

            return search.Items;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing items");
            return null;
        }
    }
    
    private async void LinkItem()
    {
        try
        {
            var storePriceText = Math.Round(LinkedItemStorePrice, 2).ToString();
            var response = await Http.PostAsJsonAsync(
                $"api/store/{Store.Guid}/linkItem",
                new LinkStoreItemCommand()
                {
                    AssetDescriptionId = LinkedItem.Id,
                    StorePrice = storePriceText.SteamPriceAsInt(culture: CultureInfo.InvariantCulture, useDecimalShortCircuit: false)
                }
            );

            var item = await response.Content.ReadFromJsonAsync<StoreItemDetailsDTO>();
            if (item != null && !Store.Items.Any(x => x.AssetDescriptionId == item.AssetDescriptionId))
            {
                Store.Items.Add(item);
            }

            // Reset the selected item
            LinkedItem = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error linking item");
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async void UnlinkItem(StoreItemDetailsDTO item)
    {
        try
        {
            var response = await Http.PostAsJsonAsync(
                $"api/store/{Store.Guid}/unlinkItem/",
                new UnlinkStoreItemCommand()
                {
                    AssetDescriptionId = (item.AssetDescriptionId ?? 0)
                }
            );

            if (Store.Items.Contains(item))
            {
                Store.Items.Remove(item);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error unlinking item");
        }
        finally
        {
            StateHasChanged();
        }
    }

}
