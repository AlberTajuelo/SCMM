@page "/steam/marketlistings"
@using SCMM.Web.Data.Models.UI
@using SCMM.Web.Data.Models.Domain.MarketItems
@inject ILogger<MarketListingsPage> Logger
@inject NavigationManager Navigation
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<Title Value="Market Listings" />

<style>

    .Market-List-Container {
        max-height: calc(100vh - 150px);
        overflow: auto;
    }

</style>

<MarketListingsSearch OnSearch="@(async (x) => await RefreshItems(x))" />
@if (Items == null)
{
    <Loading Message="Finding market items..." />
}
else 
{
    <MarketItemsSummary Items="@Items.Items" />
}

@code {

    private PaginatedResult<MarketItemListDTO> Items { get; set; }

    private string Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshItems(Filter);
    }

    private void OnItemSelectionChanged(MarketItemListDTO item)
    {
        //Navigation.NavigateTo($"steam/marketplace/{item.Id}");
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

    private async Task RefreshItems(string filter = null)
    {
        try
        {
            if (!String.IsNullOrEmpty(filter))
            {
                Filter = filter;
            }

            Items = null;
            StateHasChanged();
            Items = await Http.GetFromJsonAsync<PaginatedResult<MarketItemListDTO>>(
                $"api/market?filter={Uri.EscapeDataString(Filter ?? String.Empty)}&start=0&count=100"
            );
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing market items");
        }
    }

}
