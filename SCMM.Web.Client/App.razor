@inherits PersistentComponent
@inject ILogger<App> Logger
@inject ISnackbar Snackbar
@inject ISystemService SystemService
@inject AppState State
@inject HttpClient Http

@if (State.App != null)
{
    <AppProviders />
}
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        @if (State.App != null && State.Profile != null)
        {
            <CascadingValue Value="@routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(AppLayout)" />
                <FocusOnNavigate RouteData="@routeData" Selector="h1" />
            </CascadingValue>
        }
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(AppLayout)">
            <Alert Title="Not Found (404)" SubTitle="Looks like that doesn't exist anymore, check that the URL is correct, then try again." />
        </LayoutView>
    </NotFound>
</Router>

@code {

    protected override async Task OnLoadStateAsync()
    {
        // Load the application state
        await State.LoadFromCookiesAsync();

        // Load the system status
        State.SystemStatus = await RestoreFromStateOrLoad(nameof(State.SystemStatus), async () =>
        {
            try
            {
                return await SystemService.GetSystemStatusAsync(State.AppId);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Unable to load system status. {ex.Message}");
                return null;
            }
        });

        // Load the our profile
        State.Profile = await RestoreFromStateOrLoad(nameof(State.Profile), async () =>
        {
            try
            {
                await State.LoadFromServerProfileAsync(Http);
                return State.Profile;
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Unable to load your profile. {ex.Message}");
                Snackbar.Add($"Unable to load your profile. {ex.Message}", MudBlazor.Severity.Error);
                throw;
            }
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(State.SystemStatus), State.SystemStatus);
        PersistToState(nameof(State.Profile), State.Profile);
        return Task.CompletedTask;
    }

}
