@page "/stats"
@page "/steam/marketstatistics"
@using SCMM.Steam.Data.Models
@using SCMM.Steam.Data.Models.Enums
@using SCMM.Web.Data.Models
@using SCMM.Web.Data.Models.Steam
@using SCMM.Web.Data.Models.UI
@using SCMM.Web.Data.Models.UI.MarketStatistics
@inject ILogger<StatisticsPage> Logger
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<PageContainer Title="Market Statistics">

    <MudGrid Spacing="2">

        <MudItem xs="12" xl="6">
            <StatisticsPanel Title="Market Sales" Subtitle="Total number of sales per day.">
                <ActionContent>
                    @if (SalesYesterday > 0)
                    {
                        <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="d-flex justify-center align-center mx-4">
                            <strong>@SalesYesterday.ToQuantityString() sales yesterday</strong>
                        </MudText>
                        <MudDivider Vertical="true" FlexItem="true" />
                    }
                    <MudButton @onclick="@(() => RefreshSalesPerDay(30))" Color="MudBlazor.Color.Primary">
                        1m
                    </MudButton>
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudButton @onclick="@(() => RefreshSalesPerDay(182))" Color="MudBlazor.Color.Primary">
                        6m
                    </MudButton>
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudButton @onclick="@(() => RefreshSalesPerDay(365))" Color="MudBlazor.Color.Primary">
                        12m
                    </MudButton>
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudButton @onclick="@(() => RefreshSalesPerDay(null))" Color="MudBlazor.Color.Primary">
                        All
                    </MudButton>
                </ActionContent>
                <ChildContent>
                    @if (SalesPerDaySeries == null || SalesPerDayLabels == null)
                    {
                        <Loading Message="Loading sales chart..." />
                    }
                    else
                    {
                        <MudChart ChartType="MudBlazor.ChartType.Line" ChartSeries="@SalesPerDaySeries" XAxisLabels="@SalesPerDayLabels" />
                    }
                </ChildContent>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Title="Hot Right Now" Subtitle="Items with the highest number of sales in the past 24hrs.">
                <MudGrid Spacing="0">
                    <Virtualize ItemsProvider="LoadHotRightNow" Context="item">
                        <ItemContent>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                                <MudText Typo="Typo.body2" Class="NoWrap">@item.Last24hrSales.ToQuantityString() sold</MudText>
                            </MudItem>
                        </ItemContent>
                        <Placeholder>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                            </MudItem>
                        </Placeholder>
                    </Virtualize>
                </MudGrid>
            </StatisticsPanel>
        </MudItem>

        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Title="Most Recent" Subtitle="Items with the lowest market age.">
                <MudGrid Spacing="0">
                    <Virtualize ItemsProvider="LoadMostRecent" Context="item">
                        <ItemContent>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                                <MudText Typo="Typo.body2" Class="NoWrap">@item.MarketAge</MudText>
                            </MudItem>
                        </ItemContent>
                        <Placeholder>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                            </MudItem>
                        </Placeholder>
                    </Virtualize>
                </MudGrid>
            </StatisticsPanel>
        </MudItem>

        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Title="📈 Stonking" Subtitle="Items currently at their all-time highest value.">
                <MudGrid Spacing="0">
                    <Virtualize ItemsProvider="LoadAllTimeHigh" Context="item">
                        <ItemContent>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                                <MudText Typo="Typo.body2" Class="NoWrap">@item.Currency.ToPriceString(item.Last1hrValue)</MudText>
                            </MudItem>
                        </ItemContent>
                        <Placeholder>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                            </MudItem>
                        </Placeholder>
                    </Virtualize>
                </MudGrid>
            </StatisticsPanel>
        </MudItem>

        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Title="📉 Crashing" Subtitle="Items currently at their all-time lowest value.">
                <MudGrid Spacing="0">
                    <Virtualize ItemsProvider="LoadAllTimeLow" Context="item">
                        <ItemContent>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                                <MudText Typo="Typo.body2" Class="NoWrap">@item.Currency.ToPriceString(item.Last1hrValue)</MudText>
                            </MudItem>
                        </ItemContent>
                        <Placeholder>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                            </MudItem>
                        </Placeholder>
                    </Virtualize>
                </MudGrid>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Title="Profitable Flips" Subtitle="Items with the largest gap in asking price vs buy now price with a upward trending average price. These items can be profitable if you are able to buy low and then sell high after the seven day market cooldown.">
                <MudGrid Spacing="0">
                    <Virtualize ItemsProvider="LoadProfitableFlips" Context="item">
                        <ItemContent>
                            <MudItem xs="4" Class="d-flex flex-row justify-start align-center">
                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                            </MudItem>
                            <MudItem xs="4" Class="d-flex flex-row justify-end align-center">
                                <MudText Typo="Typo.body2" Class="NoWrap">@item.Currency.ToPriceString(item.BuyAskingPrice)</MudText>
                            </MudItem>
                            <MudItem xs="4" Class="d-flex flex-row justify-end align-center">
                                <MudText Typo="Typo.body2" Color="Color.Success" Class="NoWrap">
                                    @item.Currency.ToPriceString(item.BuyNowPrice - item.BuyAskingPrice - ((long)Math.Floor(Math.Max(item.BuyNowPrice * EconomyExtensions.FeeMultiplier, 1))))
                                </MudText>
                            </MudItem>
                        </ItemContent>
                        <Placeholder>
                            <MudItem xs="4" Class="d-flex flex-row justify-start align-center">
                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                            </MudItem>
                            <MudItem xs="4" Class="d-flex flex-row justify-end align-center">
                            </MudItem>
                            <MudItem xs="4" Class="d-flex flex-row justify-end align-center">
                            </MudItem>
                        </Placeholder>
                    </Virtualize>
                </MudGrid>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Title="Most Profitable" Subtitle="Items with the highest current market value.">
                <MudGrid Spacing="0">
                    <Virtualize ItemsProvider="LoadMostProfitable" Context="item">
                        <ItemContent>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                                <MudText Typo="Typo.body2" Class="NoWrap">@item.Currency.ToPriceString(item.Last1hrValue)</MudText>
                            </MudItem>
                        </ItemContent>
                        <Placeholder>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                            </MudItem>
                        </Placeholder>
                    </Virtualize>
                </MudGrid>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Title="Most Popular" Subtitle="Items with them highest number of unique owners (subscribers).">
                <MudGrid Spacing="0">
                    <Virtualize ItemsProvider="LoadMostPopular" Context="item">
                        <ItemContent>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                                <MudText Typo="Typo.body2" Class="NoWrap">
                                    <i class="fas fa-fw fa-user"></i>
                                    <span>@item.Subscriptions.ToQuantityString()</span>
                                </MudText>
                            </MudItem>
                        </ItemContent>
                        <Placeholder>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                            </MudItem>
                        </Placeholder>
                    </Virtualize>
                </MudGrid>
            </StatisticsPanel>
        </MudItem>

        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Title="Most Saturated" Subtitle="Items with the highest number of listings on the marketplace.">
                <MudGrid Spacing="0">
                    <Virtualize ItemsProvider="LoadMostSaturated" Context="item">
                        <ItemContent>
                            <MudItem xs="4" Class="d-flex flex-row justify-start align-center">
                                <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                            </MudItem>
                            <MudItem xs="4" Class="d-flex flex-row justify-end align-center">
                                <MudText Typo="Typo.body2" Class="NoWrap">@item.Supply.ToQuantityString()</MudText>
                            </MudItem>
                            <MudItem xs="4" Class="d-flex flex-row justify-end align-center">
                                <MudText Typo="Typo.body2" Class="NoWrap">
                                    @if (item.Demand > 0)
                                    {
                                        <span>@item.Demand.ToQuantityString() sold yesterday</span>
                                    }
                                    else 
                                    {
                                        <span>None sold yesterday</span>
                                    }
                                </MudText>
                            </MudItem>
                        </ItemContent>
                        <Placeholder>
                            <MudItem xs="4" Class="d-flex flex-row justify-start align-center">
                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                            </MudItem>
                            <MudItem xs="4" Class="d-flex flex-row justify-end align-center">
                            </MudItem>
                            <MudItem xs="4" Class="d-flex flex-row justify-end align-center">
                            </MudItem>
                        </Placeholder>
                    </Virtualize>
                </MudGrid>
            </StatisticsPanel>
        </MudItem>
    
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Title="Skin Creators" Subtitle="Creators with the highest number of accepted in-game skins.">
                <MudGrid Spacing="0">
                    <Virtualize ItemsProvider="LoadAcceptedCreators" Context="item">
                        <ItemContent>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <img src="@item.AvatarUrl" class="mr-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2">@item.Name</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                                <MudText Typo="Typo.body2" Class="NoWrap">@item.Items.ToQuantityString() item(s)</MudText>
                            </MudItem>
                        </ItemContent>
                        <Placeholder>
                            <MudItem xs="6" Class="d-flex flex-row justify-start align-center">
                                <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex flex-row justify-end align-center">
                            </MudItem>
                        </Placeholder>
                    </Virtualize>
                </MudGrid>
            </StatisticsPanel>
        </MudItem>
    
    </MudGrid>

</PageContainer>

@code {

    private int SalesYesterday { get; set; }

    private IDictionary<string, DashboardSalesDataDTO> SalesPerDay { get; set; }

    private List<ChartSeries> SalesPerDaySeries { get; set; }

    private string[] SalesPerDayLabels { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshSalesPerDay(365);
    }

    private void ViewItem(ISteamMarketListing item)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}"
        );
    }
    
    private void ViewProfile(string steamId)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/profiles/{steamId}"
        );
    }
    
    private string GetItemStyles(ISteamAssetStyles item)
    {
        return $"color: {item.ForegroundColour}";
    }

    private async Task RefreshSalesPerDay(int? maxDays = null)
    {
        try
        {
            SalesYesterday = 0;
            SalesPerDay = null;
            SalesPerDaySeries = null;
            SalesPerDayLabels = null;
            StateHasChanged();
            SalesYesterday = await Http.GetFromJsonAsync<int>($"api/market/stat/salesCountYesterday");
            SalesPerDay = await Http.GetFromJsonAsync<IDictionary<string, DashboardSalesDataDTO>>($"api/market/stat/salesPerDay?maxDays={maxDays}");
            RedrawSalesPerDayChart();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'sales per day' market dashboard");
        }
    }

    private void RedrawSalesPerDayChart()
    {
        if (SalesPerDay?.Any() == true)
        {
            SalesPerDayLabels = SalesPerDay.Keys.ToArray();
            SalesPerDaySeries = new List<ChartSeries>()
            {
                new ChartSeries()
                {
                    Name = "Market Sales",
                    Data = SalesPerDay.Select(x => (double) x.Value.Sales).ToArray()
                }
            };
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetSalesDTO>> LoadHotRightNow(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetSalesDTO>>($"api/market/stat/hotRightNow?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetSalesDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'hot right now' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetAgeDTO>> LoadMostRecent(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetAgeDTO>>($"api/market/stat/mostRecent?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetAgeDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most recent' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetMarketValueDTO>> LoadAllTimeHigh(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetMarketValueDTO>>($"api/market/stat/allTimeHigh?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetMarketValueDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'all time high' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetMarketValueDTO>> LoadAllTimeLow(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetMarketValueDTO>>($"api/market/stat/allTimeLow?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetMarketValueDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'all time low' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetBuyOrderValueDTO>> LoadProfitableFlips(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetBuyOrderValueDTO>>($"api/market/stat/profitableFlips?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetBuyOrderValueDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'profitable flips' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetMarketValueDTO>> LoadMostProfitable(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetMarketValueDTO>>($"api/market/stat/mostProfitable?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetMarketValueDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most profitable' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetSubscriptionsDTO>> LoadMostPopular(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetSubscriptionsDTO>>($"api/market/stat/mostPopular?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetSubscriptionsDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most popular' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardAssetSupplyDemandDTO>> LoadMostSaturated(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardAssetSupplyDemandDTO>>($"api/market/stat/mostSaturated?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetSupplyDemandDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most staurated' market dashboard");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<DashboardProfileWorkshopValueDTO>> LoadAcceptedCreators(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedResult<DashboardProfileWorkshopValueDTO>>($"api/market/stat/acceptedCreators?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardProfileWorkshopValueDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'accepted creators' market dashboard");
            throw;
        }
    }
}
