@using SCMM.Web.Data.Models.UI.Profile.Inventory
@inject ILogger<InventoryMarketPanel> Logger
@inject HttpClient Http
@inject AppState State

@if (InventoryMovement == null)
{
    @if (LoadingError != null)
    {
        <Alert Exception="@LoadingError" />
    }
    else
    {
        <Loading Message="Loading market movement..." />
    }
}
else if (InventoryMovement?.Any() != true)
{
    <Alert Severity="MudBlazor.Severity.Normal" Icon="fas fa-fw fa-frown" SubTitle="Inventory is empty, nothing to see here." />
}
else 
{
    <MudGrid Spacing="0">
        <MudItem xs="12">
            <div class="pa-4">
                <MudText Typo="Typo.h5" Color="@(InventoryMovement.Sum(x => x.Movement * x.Quantity) >= 0 ? Color.Success : Color.Error)" Class="no-wrap text-centered">
                    @if (InventoryMovement.Sum(x => x.Movement * x.Quantity) >= 0)
                    {
                        <i class="fas fa-fw fa-arrow-up"></i>
                    }
                    else
                    {
                        <i class="fas fa-fw fa-arrow-down"></i>
                    }
                    <span>@State.Currency.ToPriceString(InventoryMovement.Sum(x => x.Movement * x.Quantity)) total movement</span>
			    </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="no-wrap text-centered">
                    <span>@((DateTimeOffset.Now - InventoryMovement.Min(x => x.MovementTime)).ToDurationString(prefix: "in the last", maxGranularity: 1))</span>
			    </MudText>
            </div>
		</MudItem>
        <MudItem xs="12" lg="6">
            <div class="pa-4">
                <MudText Typo="Typo.h5" Color="Color.Success" Class="no-wrap text-centered">
                    <i class="fas fa-fw fa-arrow-up"></i> 
                    <span>@State.Currency.ToPriceString(InventoryMovement.Where(x => x.Movement > 0).Sum(x => x.Movement * x.Quantity)) positive movement</span>
			    </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="no-wrap text-centered">
                    <span>@((DateTimeOffset.Now - InventoryMovement.Min(x => x.MovementTime)).ToDurationString(prefix: "in the last", maxGranularity: 1))</span>
			    </MudText>
            </div>
            <div class="d-flex flex-wrap flex-row align-start justify-center pa-4">
                @foreach (var item in InventoryMovement.Where(x => x.Movement > 0).OrderByDescending(x => x.Movement))
                {
                    <div class="d-flex flex-row align-center pa-1">
                        <img src="@(item.Item.IconUrl)" class="mx-1" style="width:32px; height:32px;" />
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body2" Class="mx-1 no-wrap" Style="@($"color: {(item.Item.ForegroundColour)}")">
                                <span>@(item.Item.Name)</span>
					        </MudText>
                            <small class="mud-success-text">
                                <i class="fas fa-fw fa-arrow-up"></i> 
                                <span>@State.Currency.ToPriceString(item.Movement)</span>
                            </small>
				        </div>
			        </div>
                }
            </div>
		</MudItem>
        <MudItem xs="12" lg="6">
            <div class="pa-4">
                <MudText Typo="Typo.h5" Color="Color.Error" Class="no-wrap text-centered">
                    <i class="fas fa-fw fa-arrow-down"></i> 
                    <span>@State.Currency.ToPriceString(InventoryMovement.Where(x => x.Movement < 0).Sum(x => x.Movement * x.Quantity)) negative movement</span>
			    </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="no-wrap text-centered">
                    <span>@((DateTimeOffset.Now - InventoryMovement.Min(x => x.MovementTime)).ToDurationString(prefix: "in the last", maxGranularity: 1))</span>
			    </MudText>
            </div>
            <div class="d-flex flex-wrap flex-row align-start justify-center pa-4">
                @foreach (var item in InventoryMovement.Where(x => x.Movement < 0).OrderBy(x => x.Movement))
                {
                    <div class="d-flex flex-row align-center pa-1">
                        <img src="@(item.Item.IconUrl)" class="mx-1" style="width:32px; height:32px;" />
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body2" Class="mx-1 no-wrap" Style="@($"color: {(item.Item.ForegroundColour)}")">
                                <span>@(item.Item.Name)</span>
					        </MudText>
                            <small class="mud-error-text">
                                <i class="fas fa-fw fa-arrow-down"></i> 
                                <span>@State.Currency.ToPriceString(item.Movement)</span>
                            </small>
				        </div>
			        </div>
                }
            </div>
		</MudItem>
    </MudGrid>
}

@code {

    [Parameter]
    public string SteamId { get; set; }
    
    [Parameter]
    public string Filter { get; set; }

    private IEnumerable<ProfileInventoryItemMovementDTO> InventoryMovement { get; set; }
    
    private Exception LoadingError { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadInventoryMovement();
    }

    private async Task LoadInventoryMovement()
    {
        try
        {
            Logger.LogInformation("Fetching inventory market movement...");
            InventoryMovement = await Http.GetFromJsonAsync<IEnumerable<ProfileInventoryItemMovementDTO>>(
                $"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/movement"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory market movement for '{SteamId}'");
            InventoryMovement = null;
            LoadingError = ex;
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }
    
}
