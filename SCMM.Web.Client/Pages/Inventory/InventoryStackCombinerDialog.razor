@using SCMM.Web.Data.Models.UI.Profile.Inventory
@inherits ResponsiveDialog
@inject ILogger<InventoryStackCombinerDialog> Logger
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject ExternalNavigationManager ExternalNavigationManager
@inject AppState State

<MudDialog>
    <TitleContent>
        <MudText Typo="MudBlazor.Typo.h6" Class="no-wrap">
            <i class="fa fa-fw fa-object-group"></i>
            <span>Stack Inventory</span>
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudAlert Severity="Severity.Normal" Class="mud-alert-outlined-normal mb-4">
            <span>This action will stack <strong>all items</strong> in your inventory. Depending on the size of your inventory, this could take a few minutes to complete. Once started, the action cannot be stopped.</span>
        </MudAlert>
        <MudAlert Severity="Severity.Warning" Class="mud-alert-outlined-warning mb-6">
            <span><strong>This action requires your <MudLink Href="https://steamcommunity.com/dev/apikey" Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Warning" Underline="Underline.Hover" Target="_blank">Steam API Key</MudLink> to modify your inventory items.</strong> Make sure you fully understand the implications of sharing your API Key with a 3rd party before proceeding. Read our <MudLink Href="/privacy" Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Warning" Underline="Underline.Hover" Target="_blank">Privacy Policy</MudLink> for more info.</span>
        </MudAlert>
        <MudTextField T="string" @bind-Text="@SteamApiKey" DebounceInterval="500" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" 
                      Label="Steam API Key" Placeholder="Paste your Steam API key here..." HelperText="Click on the question mark icon to view and manage your Steam API Key"
                      Adornment="Adornment.End" AdornmentIcon="fa fa-fw fa-question-circle" OnAdornmentClick="@(() => ExternalNavigationManager.NavigateToNewTabAsync("https://steamcommunity.com/dev/apikey"))" />
    </DialogContent>
    <DialogActions>
        <div class="d-flex gap-4 mx-4 my-2">
            <MudButton OnClick="@(() => Dialog.Cancel())">Cancel</MudButton>
            <MudButton OnClick="CombineItemStacks" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@(IsCombining ? "fas fa-fw fa-cog fa-spin" : "fa fa-fw fa-check")"
                       Disabled="@(IsCombining || String.IsNullOrEmpty(SteamApiKey))">
                @if(IsCombining)
                {
                    <span>Stacking...</span>
                }
                else
                {
                    <span>Stack all items in my inventory</span>
                }
            </MudButton>
        </div>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public string SteamId { get; set; }

    private string SteamApiKey { get; set; }

    private bool IsCombining { get; set; }

    protected override void OnConfigure(ResponsiveDialogOptions options)
    {
        options.FullscreenBreakpoint = MudBlazor.Breakpoint.Sm;
        options.MaxWidth = MudBlazor.MaxWidth.Small;
        options.FullWidth = true; // force item images to scale equally
        options.CloseButton = true;
    }

    private async Task CombineItemStacks()
    {
        try 
        {
            IsCombining = true;
            StateHasChanged();

            var request = new HttpRequestMessage()
            {
                RequestUri = new Uri($"{Http.BaseAddress}api/profile/{Uri.EscapeDataString(SteamId)}/inventory/combineAll"),
                Method = HttpMethod.Put,
                Headers = {
                    { "steam-api-key", SteamApiKey }
                }
            };

            var response = await Http.SendAsync(request);
            if(!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException(await response.Content.ReadAsStringAsync(), null, response.StatusCode);
            }

            Snackbar.Add($"Inventory was successfully stacked.", MudBlazor.Severity.Success, x => x.RequireInteraction = false);
            Dialog.Close(true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error stacking inventory items");
            Snackbar.Add($"Unable to stack inventory items. {ex.Message}", MudBlazor.Severity.Error, x => x.RequireInteraction = false);
        }
        finally
        {
            IsCombining = false;
            StateHasChanged();
        }
    }
}
