@page "/"
@page "/store"
@page "/store/{StoreId}"
@page "/steam/store"
@using SCMM.Web.Data.Models.UI.Store
@using SCMM.Web.Data.Models
@inject ILogger<StorePage> Logger
@inject IDialogService Dialogs
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

@if (StoreList == null)
{
    @if (StoreException == null)
    {
        <Loading Message="Loading store list..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
    }
    else
    {
        <Alert Exception="@StoreException" />
    }
}
else if (StoreList.Any())
{
    <div class="d-flex">
        <MudTabs Elevation="0" Position="MudBlazor.Position.Bottom" ActivePanelIndex="StoreIndex" ActivePanelIndexChanged="OnSelectedStoreChanged" Class="mud-transparent-tabs" Style="width: calc(100% - 48px)">
            @foreach (var store in StoreList)
            {
                <MudTabPanel ID="@store.Id.ToString()" Text="@GetStoreTitle(store)" />
            }
        </MudTabs>
        <MudIconButton Size="MudBlazor.Size.Small" Icon="fa fa-fw fa-history" OnClick="@(() => ShowStoreListDialog(StoreList))" />
    </div>
    <PageContainer Title="Store" Class="mb-6 ml-6 mr-6">

        <MudGrid Spacing="2">
            @if (Store == null)
            {
                <MudItem xs="12">
                    @if (StoreException == null)
                    {
                        <Loading Message="Loading store..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
                    }
                    else
                    {
                        <Alert Exception="@StoreException" />
                    }
                </MudItem>
            }
            else
            {
                <MudItem xs="12">
                    <StoreAnalyticsPanel Store="@Store" />
                </MudItem>

                @foreach (var item in Store.Items.OrderByDescending(x => (x.SalesMinimum ?? 0) * (x.StorePrice ?? 0)))
                {
                    <MudItem xs="12" sm="6" md="4" xl="3">
                        <div class="store-item full-height">
                            <MudCard Outlined="true" Class="full-height">
                                <MudCardHeader>
                                    <CardHeaderAvatar>
                                        <MudTooltip Text="@item.AuthorName">
                                            <MudAvatar Image="@item.AuthorAvatarUrl" Size="MudBlazor.Size.Medium" />
                                        </MudTooltip>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                        <div class="item-name">
                                            <MudText Typo="MudBlazor.Typo.h6" Style="@($"color: {item.ForegroundColour}")">@item.Name</MudText>
                                        </div>
                                        @if (!String.IsNullOrEmpty(item.ItemType))
                                        {
                                            <div class="item-type">
                                                <MudText Typo="MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Secondary">@item.ItemType</MudText>
                                            </div>
                                        }
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudGrid Spacing="1">

                                        <MudItem xs="5">
                                            <div class="item-image">
                                                <MudTooltip Text="@(item.HasWorkshopFile ? "Click to view workshop page" : null)" Placement="MudBlazor.Placement.Top">
                                                    <img src="@item.IconUrl" @onclick="@(() => ViewItemWorkshopPage(item))" />
                                                </MudTooltip>
                                            </div>
                                        </MudItem>
                                        <MudItem xs="7">
                                            @if (!item.HasWorkshopFile)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                                                    <span>This item is not from the Rust workshop, some statistics may be unavailable.</span>
                                                </MudText>
                                            }
                                            @if (item.MarketPriceRankTotal > 0)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-balance-scale-left"></i>
                                                    <span><MudLink @onclick="@(() => ShowItemTypeDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.MarketPriceRankPosition cheaper @item.ItemType.Pluralise(item.MarketPriceRankPosition)</MudLink> in the marketplace (@item.MarketPriceRankTotal total).</span>
                                                </MudText>
                                            }
                                            @if (item.SalesMinimum > 0)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-shopping-cart"></i>
                                                    <span>
                                                        @if (item.SalesMaximum == null)
                                                        {
                                                            <span>More than <MudLink @onclick="@(() => ShowItemSalesDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.SalesMinimum.Value.ToQuantityString() sold</MudLink></span>
                                                        }
                                                        else if (item.SalesMinimum == item.SalesMaximum)
                                                        {
                                                            <span><MudLink @onclick="@(() => ShowItemSalesDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.SalesMinimum.Value.ToQuantityString() sold</MudLink></span>
                                                        }
                                                        else
                                                        {
                                                            <span>Between <MudLink @onclick="@(() => ShowItemSalesDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.SalesMinimum.Value.ToQuantityString() - @item.SalesMaximum.Value.ToQuantityString() sold</MudLink></span>
                                                        }
                                                    </span>
                                                </MudText>
                                            }
                                            else if (item.Subscriptions > 0)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-user"></i>
                                                    <span>
                                                        <MudLink @onclick="@(() => ShowItemSalesDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.Subscriptions.Value.ToQuantityString() subscribers</MudLink>
                                                    </span>
                                                </MudText>
                                            }
                                            @if (item.BreaksIntoComponents != null)
                                            {
                                                @foreach (var component in item.BreaksIntoComponents)
                                                {
                                                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="no-wrap" GutterBottom>
                                                        <i class="fas fa-fw fa-cubes"></i>
                                                        <span>Breaks down into <MudLink @onclick="@(() => ShowItemBreakdownDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@(component.Value)x @component.Key</MudLink></span>
                                                    </MudText>
                                                }
                                            }
                                            @if (!String.IsNullOrEmpty(item.ItemCollection))
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-paint-roller"></i>
                                                    <span>Part of the <MudLink @onclick="@(() => ShowItemCollectionDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default">@item.ItemCollection</MudLink> set</span>
                                                </MudText>
                                            }
                                            <div class="my-3">
                                                <MudTooltip>
                                                    <ChildContent>
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Tradable" Disabled="@(!item.IsTradable)"
                                                                 Icon="@(item.IsTradable ? "fas fa-fw fa-exchange-alt mr-2" : "fas fa-fw fa-times")" 
                                                                 Variant="@(item.IsTradable ? MudBlazor.Variant.Filled : MudBlazor.Variant.Outlined)" 
                                                                 Color="@(item.IsTradable ? MudBlazor.Color.Default : MudBlazor.Color.Default)" />
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        @if (item.IsTradable)
                                                        {
                                                            @if (item.TradableRestrictionDays > 0)
                                                            {
                                                                <span>This item <strong>can</strong> be traded <strong>@(item.TradableRestrictionDays)</strong> day(s) after purchase</span>
                                                            }
                                                            else
                                                            {
                                                                <span>This item <strong>can</strong> be traded immediately after purchase</span>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span>This item <strong>cannot</strong> be traded once purchased</span>
                                                        }
                                                    </TooltipContent>
                                                </MudTooltip>
                                                <MudTooltip>
                                                    <ChildContent>
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Marketable" Disabled="@(!item.IsMarketable)"
                                                                 Icon="@(item.IsMarketable ? "fas fa-fw fa-balance-scale-left mr-3" : "fas fa-fw fa-times")" 
                                                                 Variant="@(item.IsMarketable ? MudBlazor.Variant.Filled : MudBlazor.Variant.Outlined)" 
                                                                 Color="@(item.IsMarketable ? MudBlazor.Color.Default : MudBlazor.Color.Default)" />
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        @if (item.IsMarketable)
                                                        {
                                                            @if (item.MarketableRestrictionDays > 0)
                                                            {
                                                                <span>This item <strong>can</strong> be listed on the Steam Community Market after <strong>@(item.MarketableRestrictionDays)</strong> day(s) after purchase</span>
                                                            }
                                                            else
                                                            {
                                                                <span>This item <strong>can</strong> be listed on the Steam Community Market immediately after purchase</span>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span>This item <strong>cannot</strong> be listed on the Steam Community Market once purchased</span>
                                                        }
                                                    </TooltipContent>
                                                </MudTooltip>
                                            </div>
                                            @if (item.IsStillAvailableFromStore && item.HasMarketListing)
                                            {
                                                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                                                    <span>This item is also available in the marketplace.</span>
                                                </MudText>
                                            }
                                            else if (!item.IsStillAvailableFromStore && item.HasMarketListing)
                                            {
                                                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                                                    <span>This item is no longer available from the store, grab it from the marketplace instead.</span>
                                                </MudText>
                                            }
                                            else if (!item.IsStillAvailableFromStore)
                                            {
                                                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                                                    <span>This item is no longer available.</span>
                                                </MudText>
                                            }
                                        </MudItem>
                                    
                                        @if (item.StorePrice > 0 && item.Currency != null)
                                        {
                                            <MudItem xs="5" Class="text-centered">
                                                <div class="d-flex flex-row justify-center align-center">
                                                    <MudText Typo="MudBlazor.Typo.h6" Color="@(item.IsStillAvailableFromStore ? MudBlazor.Color.Default : MudBlazor.Color.Secondary)" Class="@($"no-wrap {(item.IsStillAvailableFromStore ? null : "text-line-through")}")">
                                                        <span>@item.Currency.ToPriceString(item.StorePrice.Value)</span>
                                                    </MudText>
                                                </div>
                                            </MudItem>
                                            <MudItem xs="7" Class="text-centered d-flex align-stretch">
                                                <MudButton OnClick="@(() => BuyItemFromStore(item))" Variant="@(item.IsStillAvailableFromStore ? MudBlazor.Variant.Filled : MudBlazor.Variant.Outlined)" 
                                                           Color="MudBlazor.Color.Tertiary" Disabled="@(!item.IsStillAvailableFromStore)" FullWidth>
                                                    <RustIcon />        
                                                    <strong class="ml-1">Store</strong>
                                                </MudButton>
                                            </MudItem>
                                        }

                                        @if (item.HasMarketListing)
                                        {
                                            <MudItem xs="5" Class="text-centered">
                                                <div class="d-flex flex-column justify-center align-center">
                                                    <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="no-wrap">
                                                        <span>@item.Currency.ToPriceString(item.MarketPrice ?? 0)</span>
                                                    </MudText>
                                                    @if (item.MarketPrice > 0 && item.StorePrice > 0)
                                                    {
                                                        @if (item.MarketPrice >= item.StorePrice)
                                                        {
                                                            <MudChip Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-arrow-up mr-1" Text="@item.MarketPrice.Value.ToMovementString(item.StorePrice.Value)" 
                                                                     Color="MudBlazor.Color.Success" Variant="MudBlazor.Variant.Outlined" Class="my-0" />
                                                        }
                                                        else
                                                        {
                                                            <MudChip Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-arrow-down mr-1" Text="@item.MarketPrice.Value.ToMovementString(item.StorePrice.Value)" 
                                                                     Color="MudBlazor.Color.Error" Variant="MudBlazor.Variant.Outlined" Class="my-0" />
                                                        }
                                                    }
                                                </div>
                                            </MudItem>
                                            <MudItem xs="7" Class="text-centered d-flex align-stretch">
                                                <MudButton OnClick="@(() => BuyItemFromMarket(item))" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Dark" StartIcon="fab fa-fw fa-steam" FullWidth>
                                                    <strong>Marketplace</strong>
                                                </MudButton>
                                            </MudItem>
                                        }

                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </div>
                    </MudItem>   
                }
                
                @foreach (var media in Store.Media)
                {
                    <MudItem xs="12" sm="6" md="4" xl="3">
                        <YouTubeVideo VideoId="@media" />
                    </MudItem>
                }

            }
        </MudGrid>

    </PageContainer>
}

@code {

    private StoreIdentiferDTO[] StoreList { get; set; }
    
    private StoreDetailsDTO Store { get; set; }
    
    [Parameter]
    public string StoreId { get; set; }
    
    private int StoreIndex { get; set; }

    private Exception StoreException { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        // Load store list
        await LoadStoreList();
    }

    protected override async Task OnParametersSetAsync()
    {
        // If there is no store selected yet, navigate to the current one
        if (String.IsNullOrEmpty(StoreId))
        {
            NavigationManager.NavigateTo($"/store/current");
        }

        // Otherwise, load the selected store details
        else if (!String.Equals(StoreId, Store?.Id.ToString(), StringComparison.InvariantCultureIgnoreCase))
        {
            await LoadStore();
        }
    }
    
    private void OnSelectedStoreChanged(int index)
    {
        var oldStore = StoreList.ElementAtOrDefault(StoreIndex);
        StoreIndex = index;

        // Navigate to the selected store page
        var store = StoreList.ElementAtOrDefault(index);
        if (store != null && store != oldStore)
        {
            NavigationManager.NavigateTo($"/store/{store.Id}");  
        }
    }

    private async Task LoadStoreList()
    {
        try
        {
            Store = null;
            StoreList = null;
            StoreException = null;
            StateHasChanged();

            // Load the store list
            StoreList = await Http.GetFromJsonAsync<StoreIdentiferDTO[]>($"api/store");
   
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading the store list");
            Snackbar.Add($"Unable to load store list. {ex.Message}", MudBlazor.Severity.Error);
            StateHasChanged();
        }
    }

    private async Task LoadStore()
    {
        try
        {
            Store = null;
            StoreException = null;
            StateHasChanged();

            if (!String.IsNullOrEmpty(StoreId))
            {
                // Load the new store (if any)
                Store = await Http.GetFromJsonAsync<StoreDetailsDTO>($"api/store/{StoreId}");
                StoreId = Store.Id;
                
                // The selected store should show as the active tab in the store tab list
                StoreIndex = Array.IndexOf(StoreList, StoreList.FirstOrDefault(x => x.Id == StoreId));

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading store {StoreId}");
            Snackbar.Add($"Unable to load store details. {ex.Message}", MudBlazor.Severity.Error);
            StateHasChanged();
        }
    }

    private void BuyItemFromStore(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://store.steampowered.com/itemstore/{item.AppId}/detail/{item.Id}/"
        );
    }
    
    private void BuyItemFromMarket(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/market/listings/{item.AppId}/{Uri.EscapeDataString(item.Name)}"
        );
    }

    private void ViewItemWorkshopPage(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTab(
            $"https://steamcommunity.com/sharedfiles/filedetails/?id={item.WorkshopFileId}"
        );
    }
    
    private void ShowStoreListDialog(StoreIdentiferDTO[] stores)
    {
        Dialogs.Show<ViewStoreListDialog>(null, parameters: new DialogParameters()
        {
            ["List"] = stores
        });
    }

    private void ShowItemTypeDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemListDialog>(null, parameters: new DialogParameters()
        {
            ["ListName"] = item.ItemType,
            ["ListUrl"] = $"api/item/marketPriceRank/{item.ItemType}?compareWithItemId={item.AssetDescriptionId}",
            ["HighlightedItemId"] = item.AssetDescriptionId,
        });
    }

    private void ShowItemSalesDialog(StoreItemDetailsDTO item)
    {
    }

    private void ShowItemBreakdownDialog(StoreItemDetailsDTO item)
    {
    }
    
    private void ShowItemCollectionDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemCollectionDialog>(null, parameters: new DialogParameters()
        {
            ["CollectionName"] = item.ItemCollection,
            ["CollectionUrl"] = $"api/item/collection/{item.ItemCollection}"
        });
    }
    
    private string GetStoreTitle(StoreIdentiferDTO store)
    {
        var title = new StringBuilder();
        title.Append(store.Start.ToString("MMMM d"));
        if (!String.IsNullOrEmpty(store.Name))
        {
            title.Append($" - {store.Name}");
        }

        return title.ToString().Trim();
    }

}
