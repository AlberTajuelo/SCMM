@page "/steam/store"
@using SCMM.Web.Shared.Domain.DTOs.StoreItems
@using SCMM.Web.Shared
@inject ILogger<StorePage> Logger
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AppState State

<DocumentTitle Title="Item Store" />
@if (Items == null)
{
    <Loading />
}
else
{
    <Grid Container Spacing="@Spacing.Two">
        <Grid Item Large="@GridSize.Twelve" ExtraLarge="@GridSize.Six" style="width:100%">
            <Paper>
                <Table Narrow="true">
                    <TableBody>
                        @foreach (var item in Items.OrderBy(x => x.StoreRankPosition))
                        {
                            <TableRow>
                                <TableCell Class="align-top">
                                    <Hidden ExtraSmallDown>
                                        <img src="@item.IconUrl" style="width:72px" />
                                    </Hidden>
                                </TableCell>
                                <TableCell Class="align-top">
                                    <Typography Variant="@TypographyVariant.H6" Style="@GetItemStyles(item)" GutterBottom>
                                        @item.Name
                                    </Typography>
                                    @if (item.MarketRankTotal > 0)
                                    {
                                    <Typography Variant="@TypographyVariant.Body2" Color="@Color.TextSecondary">
                                        <span><strong>@item.MarketRankPosition/@item.MarketRankTotal</strong> other @item.ItemType.Pluralise(item.MarketRankPosition) are cheaper than this.</span>
                                    </Typography>
                                    }
                                </TableCell>
                                <TableCell Class="align-top">
                                    <Typography Variant="@TypographyVariant.Body1" GutterBottom NoWrap>
                                        <i class="fas fa-fw fa-tag"></i>
                                        @item.Currency.ToPriceString(item.StorePrice)
                                    </Typography>
                                    <Typography Variant="@TypographyVariant.Body2" Color="@Color.TextSecondary" NoWrap>
                                        <i class="fas fa-fw fa-shopping-cart"></i>
                                        @if (item.TotalSalesMax == null)
                                        {
                                        <span>@item.TotalSalesMin.ToQuantityString() or more</span>
                                        }
                                        else if (item.TotalSalesMin == item.TotalSalesMax)
                                        {
                                        <span>@item.TotalSalesMin.ToQuantityString()</span>
                                        }
                                        else
                                        {
                                        <span>@item.TotalSalesMin.ToQuantityString() - @item.TotalSalesMax.Value.ToQuantityString()</span>
                                        }
                                    </Typography>
                                    <Typography Variant="@TypographyVariant.Body2" Color="@Color.TextSecondary" NoWrap>
                                        <i class="fas fa-fw fa-user"></i>
                                        <span>@item.Subscriptions.ToQuantityString()</span>
                                    </Typography>
                                </TableCell>
                                <TableCell Class="align-top" Align="@Align.Right">
                                    <Typography GutterBottom="true" class="Theme-Success">
                                        <Button OnClick="@(() => BuyItem(item))" Variant="@ButtonVariant.Contained" Color="@Color.Primary">Buy</Button>
                                    </Typography>
                                    <Typography>
                                        <Button OnClick="@(() => ViewItem(item))" Variant="@ButtonVariant.Outlined" Color="@Color.TextSecondary">View</Button>
                                    </Typography>
                                </TableCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </Paper>
        </Grid>
        <Grid Item Large="@GridSize.Twelve" ExtraLarge="@GridSize.Six" style="width:100%">
            <Grid Container>
                <Grid ExtraSmall="@GridSize.Twelve">
                    @if (ItemRevenueChart != null || ItemRankChart != null || ItemRankHistoryChart != null)
                    {
                        <Paper>
                            <Tabs Value="@SelectedItemChartPanel"
                                  OnChange="@OnSelectedItemChartChanged"
                                  IndicatorColor="@Color.Primary"
                                  TextColor="@Color.Primary"
                                  Variant="@TabsVariant.FullWidth">
                                <Tab Id="store-tab" Control="store-tab-panel" Value="0" Label="Sales Revenue" Wrapped />
                                <Tab Id="store-tab" Control="store-tab-panel" Value="1" Label="Sales Overview" Wrapped />
                                <Tab Id="store-tab" Control="store-tab-panel" Value="2" Label="Sales History" Wrapped />
                            </Tabs>
                            <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="0">
                                @if (ItemRevenueChart != null)
                                {
                                    <Alert Info Title="Sales revenue calculation disclaimer" Rounded="false">
                                        <Icon>
                                            <i class="fas fa-fw fa-exclamation-circle"></i>
                                        </Icon>
                                        <MessageContent>
                                            <span><strong>TL;DR;</strong> Revenue is at least @(State.Currency.ToPriceString(Items.Sum(x => x.TotalSalesMin * x.StorePrice))) so far.</span>
                                            <span>This graph represents the <strong>minimum</strong> revenue earned per-item from store purchases. Because an individual can purchase multiple copies of the same item, actual revenue will always be higher than what is shown here. Steam doesn't publicly advertise exact sales figures, this is the just a rough estimate.</span>
                                        </MessageContent>
                                    </Alert>
                                    <ChartJsBarChart @ref="ItemRevenueChartJs" Config="@ItemRevenueChart" />
                                }
                            </TabPanel>
                            <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="1">
                                @if (ItemRankChart != null)
                                {
                                    <ChartJsBarChart @ref="ItemRankChartJs" Config="@ItemRankChart" />
                                }
                            </TabPanel>
                            <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="2">
                                @if (ItemRankHistoryChart != null)
                                {
                                    <ChartJsLineChart @ref="ItemRankHistoryChartJs" Config="@ItemRankHistoryChart" />
                                }
                            </TabPanel>
                        </Paper>
                    }
                </Grid>
                <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six">
                    <YouTubeVideo VideoId="TB7L1tINHvA" />
                </Grid>
                <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six">
                    <YouTubeVideo VideoId="P7xhT-6FdsA" />
                </Grid>
            </Grid>
        </Grid>
    </Grid>
}

@code {

    private StoreItemListDTO[] Items { get; set; }

    private object SelectedItemChartPanel { get; set; } = 1;

    private ChartJsBarChart ItemRevenueChartJs { get; set; }

    private ChartJsBarChart ItemRankChartJs { get; set; }

    private ChartJsLineChart ItemRankHistoryChartJs { get; set; }

    private BarConfig ItemRevenueChart { get; set; }

    private BarConfig ItemRankChart { get; set; }

    private LineConfig ItemRankHistoryChart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshItems();
    }

    private void BuyItem(StoreItemListDTO item)
    {
        string url = $"https://store.steampowered.com/itemstore/{item.SteamAppId}/detail/{item.SteamId}/";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

    private void ViewItem(StoreItemListDTO item)
    {
        string url = $"https://steamcommunity.com/sharedfiles/filedetails/?id={item.SteamWorkshopId}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

    private async Task RefreshItems()
    {
        try
        {
            Items = await Http.GetFromJsonAsync<StoreItemListDTO[]>($"api/store");
            OnSelectedItemChartChanged(SelectedItemChartPanel);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing store items");
        }
    }

    private string GetItemStyles(StoreItemListDTO item)
    {
        return $"color: {item.ForegroundColour}";
    }

    private void OnSelectedItemChartChanged(object value)
    {
        SelectedItemChartPanel = value;
        ItemRevenueChart = null;
        ItemRankChart = null;
        ItemRankHistoryChart = null;
        switch (SelectedItemChartPanel)
        {
            case 0: RedrawItemRevenueChart(); break;
            case 1: RedrawItemRankChart(); break;
            case 2: RedrawItemRankHistoryChart(); break;
        }

        StateHasChanged();
    }

    private void RedrawItemRevenueChart()
    {
        ItemRevenueChart = new BarConfig
        {
            Options = new BarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true,
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"

                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemRevenueChart.Data.Labels.AddRange(
            Items.Select(x => x.Name).ToArray()
        );

        var localScaleString = String.Empty.PadRight(State.Currency.Scale, '0');
        var localScaleDivisor = Int64.Parse($"1{localScaleString}");

        var authorRevenue = new BarDataset<DoubleWrapper>
        {
            Label = "Skin Author Royalties",
            BackgroundColor = "#6BC16F",
            BorderColor = "#335E33",
            BorderWidth = 1
        };
        authorRevenue.AddRange(
            Items.Select(x => (DoubleWrapper)Math.Round((double)((x.TotalSalesMin * x.StorePrice) * 0.25) / localScaleDivisor, State.Currency.Scale))
        );

        var totalRevenue = new BarDataset<DoubleWrapper>
        {
            Label = "Skin Sales Revenue",
            BackgroundColor = "#388e3c",
            BorderColor = "#1b5e20",
            BorderWidth = 1
        };
        totalRevenue.AddRange(
            Items.Select(x => (DoubleWrapper)Math.Round((double)(x.TotalSalesMin * x.StorePrice) / localScaleDivisor, State.Currency.Scale))
        );

        ItemRevenueChart.Data.Datasets.AddRange(new[] {
            authorRevenue, totalRevenue
        });
    }

    private void RedrawItemRankChart()
    {
        ItemRankChart = new BarConfig
        {
            Options = new BarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true,
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemRankChart.Data.Labels.AddRange(
            Items.Select(x => x.Name).ToArray()
        );

        var itemSubscriptions = new BarDataset<DoubleWrapper>
        {
            Label = "Subscribers",
            BackgroundColor = "#388e3c",
            BorderColor = "#1b5e20",
            BorderWidth = 1
        };
        itemSubscriptions.AddRange(
            Items.Select(x => (DoubleWrapper)x.Subscriptions)
        );

        var itemTotalSalesMin = new BarDataset<DoubleWrapper>
        {
            Label = "Minimum Sales",
            BackgroundColor = "#6BC16F",
            BorderColor = "#335E33",
            BorderWidth = 1
        };
        itemTotalSalesMin.AddRange(
            Items.Select(x => (DoubleWrapper)x.TotalSalesMin)
        );

        ItemRankChart.Data.Datasets.AddRange(new[] {
            itemSubscriptions, itemTotalSalesMin
        });
    }

    private void RedrawItemRankHistoryChart()
    {
        var startOfWeek = Items.FirstOrDefault()?.AcceptedOn.UtcDateTime;
        if (startOfWeek == null)
        {
            return;
        }

        ItemRankHistoryChart = new LineConfig
        {
            Options = new LineOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new Scales
                {

                    xAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemRankHistoryChart.Data.Labels = GetSkinWeekDates(startOfWeek.Value)
            .Select(x => x.ToString("dd MMMM yyyy"))
            .ToList();

        foreach (var item in Items)
        {
            var itemDataSet = new LineDataset<DoubleWrapper>
            {
                Label = item.Name,
                BackgroundColor = GraphDataSetColours[Array.IndexOf(Items, item)],
                BorderColor = GraphDataSetColours[Array.IndexOf(Items, item)],
                BorderWidth = 3,
                LineTension = 0.1,
                Fill = false
            };
            itemDataSet.AddRange(
                GetItemSubscriptionDataset(item, startOfWeek.Value)
            );
            ItemRankHistoryChart.Data.Datasets.Add(itemDataSet);
        }
    }

    IEnumerable<DateTime> GetSkinWeekDates(DateTime startOfWeek)
    {
        return new[] {
            startOfWeek.Date.AddDays(0),
            startOfWeek.Date.AddDays(1),
            startOfWeek.Date.AddDays(2),
            startOfWeek.Date.AddDays(3),
            startOfWeek.Date.AddDays(4),
            startOfWeek.Date.AddDays(5),
            startOfWeek.Date.AddDays(6),
            startOfWeek.Date.AddDays(7)
        };
    }

    IEnumerable<DoubleWrapper> GetItemSubscriptionDataset(StoreItemListDTO item, DateTime startOfWeek)
    {
        var dataSet = new List<DoubleWrapper>();
        if (item?.SubscriptionsHistory?.Any() != true)
        {
            return dataSet;
        }

        var graphDates = GetSkinWeekDates(startOfWeek).Where(x => x < DateTime.UtcNow);
        foreach (var graphDate in graphDates)
        {
            var dataPoint = 0d;
            var dataKey = graphDate.Date.ToString("dd MMM yyyy");
            var keys = item.SubscriptionsHistory.Keys.ToArray();
            if (item.SubscriptionsHistory.ContainsKey(dataKey))
            {
                dataPoint = item.SubscriptionsHistory[dataKey];
            }
            dataSet.Add(dataPoint);
        }
        return dataSet;
    }

    private string[] GraphDataSetColours = {
        "#2196F3",
        "#8BC34A",
        "#FF5722",
        "#E91E63",
        "#9C27B0",
        "#3F51B5",
        "#FF9800",
        "#FFEB3B",
        "#795548",
        "#00BCD4",
        "#607D8B"
    };

}
