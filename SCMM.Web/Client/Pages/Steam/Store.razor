@page "/steam/store"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SCMM.Web.Shared.Domain.DTOs.Steam
@using SCMM.Web.Shared
@inject HttpClient Http

<Container Fluid="true">
    <Row>
        <Column ColumnSize="ColumnSize.Is6">

            @if (items == null)
            {
                <Text><em>Loading...</em></Text>
            }
            else
            {
                <Table Narrow="true">
                    <TableBody>
                        @foreach (var item in items)
                        {
                        <TableRow>
                            <TableRowCell>
                                <img src="@item.Description.IconUrl" style="width:96px" />
                            </TableRowCell>
                            <TableRowCell>
                                <Heading Size="HeadingSize.Is4">
                                    @item.Description.Name
                                    @if (items.First() == item)
                                    {
                                        <i class="fas fa-award" style="color:gold"></i>
                                    }
                                    @if (items.Skip(1).First() == item)
                                    {
                                        <i class="fas fa-award" style="color:silver"></i>
                                    }
                                    @if (items.Skip(2).First() == item)
                                    {
                                        <i class="fas fa-award" style="color:chocolate"></i>
                                    }
                                </Heading>
                                <Paragraph>
                                    @foreach (var tag in item.Description.Tags)
                                    {
                                        <Badge Color="Color.Light" Margin="Margin.Is1" Padding="Padding.Is1">@tag.Value</Badge>
                                    }
                                </Paragraph>
                            </TableRowCell>
                            <TableRowCell>
                                <Heading Size="HeadingSize.Is4">
                                    <i class="fas fa-tag"></i>
                                    @item.Currency.ToPriceString(item.StorePrice)
                                </Heading>
                                <Paragraph>
                                    @if (item.MarketRankTotal > 0)
                                    {
                                        <span>There are <strong>@item.MarketRankPosition</strong> cheaper market items of the same type (@item.MarketRankPosition / @item.MarketRankTotal).</span>
                                        <br />
                                    }
                                </Paragraph>
                            </TableRowCell>
                            <TableRowCell Style="vertical-align: middle">
                                <Heading Size="HeadingSize.Is6">
                                    <i class="fas fa-user"></i>
                                    @item.Description.WorkshopFile.Subscriptions.ToQuantityString()
                                </Heading>
                                <Heading Size="HeadingSize.Is6">
                                    <i class="fas fa-eye"></i>
                                    @item.Description.WorkshopFile.Views.ToQuantityString()
                                </Heading>
                                <Heading Size="HeadingSize.Is6">
                                    <i class="fas fa-heart"></i>
                                    @item.Description.WorkshopFile.Favourited.ToQuantityString()
                                </Heading>
                            </TableRowCell>
                            <TableRowCell>
                                <Button Color="Color.Success" Size="ButtonSize.Small" Margin="Margin.Is1">Buy</Button>
                                <br/>
                                <Button Color="Color.Info" Size="ButtonSize.Small" Margin="Margin.Is1">View</Button>
                            </TableRowCell>
                        </TableRow>
                        }
                    </TableBody>
                </Table>
            }

        </Column>
        <Column ColumnSize="ColumnSize.Is6">
            <BarChart @ref="storeRankings" TItem="double" Padding="Padding.Is2" />
            <Alert Color="Color.Info" Visible="true">
                <AlertMessage>What are subscribers?</AlertMessage>
                <AlertDescription>A subscriber is a Steam user that owns at least one copy of the item. One subscriber could own multiple copies of the same item, therefore subscribers ≠ sales.</AlertDescription>
            </Alert>
        </Column>
    </Row>
</Container>

@code {

    private SteamStoreItemDTO[] items;
    BarChart<double> storeRankings;

    protected override async Task OnInitializedAsync()
    {
        await RefreshItems();
        await RedrawStoreRankings();
    }

    async Task RefreshItems()
    {
        try
        {
            items = await Http.GetFromJsonAsync<SteamStoreItemDTO[]>($"SteamStoreItems");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task RedrawStoreRankings()
    {
        await storeRankings.Clear();
        await storeRankings.AddLabel(items.Select(x => x.Description.Name).ToArray());
        await storeRankings.AddDataSet(new BarChartDataset<double>
        {
            Label = "Total Subscribers",
            Data = items.Select(x => (double)x.Description.WorkshopFile.Subscriptions).ToList(),
            BackgroundColor = items.Select(x => "#4caf50").ToList(),
            BorderColor = items.Select(x => "#388e3c").ToList(),
            HoverBackgroundColor = items.Select(x => "#4caf50").ToList(),
            HoverBorderColor = items.Select(x => "#388e3c").ToList(),
        });
        await storeRankings.AddDataSet(new BarChartDataset<double>
        {
            Label = "Total Views",
            Data = items.Select(x => (double)x.Description.WorkshopFile.Views).ToList(),
            BackgroundColor = items.Select(x => "#2196f3").ToList(),
            BorderColor = items.Select(x => "#1976d2").ToList(),
            HoverBackgroundColor = items.Select(x => "#2196f3").ToList(),
            HoverBorderColor = items.Select(x => "#1976d2").ToList(),
        });
        await storeRankings.Update();
    }

}
