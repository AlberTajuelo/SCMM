@page "/items"
@page "/skins"
@using SCMM.Web.Client.Shared.Components.Items
@using SCMM.Web.Data.Models.UI.Item
@inject ILogger<ItemsPage> Logger
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageContainer Title="Items">

    <MudGrid Spacing="2">
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Value="@Filter" ValueChanged="@OnSearch" DebounceInterval="500" Label="Search" Placeholder="Search for an item..." 
                          Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Class="mud-input-transparent ma-0" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudSelect T="string" Value="@Type" ValueChanged="@(async (x) => { Type = x; RefreshItems(); })" Label="Item Type" Clearable="true"
                       Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Class="mud-input-transparent ma-0">
                @if (ItemTypes != null)
                {
                    @foreach (var itemType in ItemTypes)
                    {
                        <MudSelectItem Value="@itemType" />
                    }
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Outlined="true" Class="d-flex flex-row align-center justify-center flex-wrap pa-2 px-4">
                <MudSwitch T="bool" Checked="@Glow" CheckedChanged="@(async (x) => { Glow = x; RefreshItems(); })" Label="Glow" Color="Color.Info" />
                <MudSwitch T="bool" Checked="@Glowsight" CheckedChanged="@(async (x) => { Glowsight = x; RefreshItems(); })" Label="Glowsight" Color="Color.Info" />
                <MudSwitch T="bool" Checked="@Cutout" CheckedChanged="@(async (x) => { Cutout = x; RefreshItems(); })" Label="Cutout" Color="Color.Info" />
                <MudSwitch T="bool" Checked="@Craftable" CheckedChanged="@(async (x) => { Craftable = x; RefreshItems(); })" Label="Craftable" Color="Color.Info" />
                <MudSwitch T="bool" Checked="@SpecialDrop" CheckedChanged="@(async (x) => { SpecialDrop = x; RefreshItems(); })" Label="Special Drop" Color="Color.Info" />
                <MudSwitch T="bool" Checked="@TwitchDrop" CheckedChanged="@(async (x) => { TwitchDrop = x; RefreshItems(); })" Label="Twitch Drop" Color="Color.Info" />
                <MudSwitch T="bool" Checked="@Tradeable" CheckedChanged="@(async (x) => { Tradeable = x; RefreshItems(); })" Label="Tradeable" Color="Color.Info" />
                <MudSwitch T="bool" Checked="@Marketable" CheckedChanged="@(async (x) => { Marketable = x; RefreshItems(); })" Label="Marketable" Color="Color.Info" />
                <MudSwitch T="bool" Checked="@Returning" CheckedChanged="@(async (x) => { Returning = x; RefreshItems(); })" Label="Returning" Color="Color.Info" />
                <MudSwitch T="bool" Checked="@Banned" CheckedChanged="@(async (x) => { Banned = x; RefreshItems(); })" Label="Banned" Color="Color.Info" />
            </MudPaper>
        </MudItem>
        @if (Items == null)
        {
            <MudItem xs="12">
                <Loading Message="Finding items..." />
            </MudItem>
        }
        else 
        {
            @foreach (var item in Items.Items)
            {
                <MudItem xs="6" sm="4" md="3" lg="2" xl="1">
                    <MudPaper Outlined="true" Class="full-height">
                        <ItemDescriptionSummary Item="@item" OnClick="@OnItemClicked" />
                    </MudPaper>
                </MudItem>
            }
            @if(Items.Total > 0)
            {
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudPagination SelectedChanged="@OnPageChange" Color="@Color.Primary" ShowFirstButton="true" ShowLastButton="true" 
                                   Selected="@((int)Math.Floor(Start > 0 ? ((double)Start.Value / Math.Max(Count ?? 100, 1)) + 1 : 1))" 
                                   Count="@((int)Math.Ceiling((double)Items.Total / Math.Max(Count ?? 100, 1)))" />
                </MudItem>
            }
        }
    </MudGrid>

</PageContainer>

@code {

    private PaginatedResult<ItemDescriptionWithPriceDTO> Items { get; set; }
    
    private string[] ItemTypes { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string Type { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public bool Glow { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public bool Glowsight { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public bool Cutout { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public bool Craftable { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public bool SpecialDrop { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public bool TwitchDrop { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public bool Tradeable { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public bool Marketable { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public bool Returning { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public bool Banned { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public Nullable<int> Start { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Nullable<int> Count { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshItemTypes();
        await RefreshItems();
    }
    
    private void OnItemClicked(IItemDescription item)
    {
        NavigationManager.NavigateTo($"/item/{item.Name}");  
    }

    private void OnSearch(string text)
    {
        if (Filter != text)
        {
            Filter = text;
            RefreshItems();
        };
    }
    
    private void OnPageChange(int page)
    {
        var newStart = (Math.Max(page - 1, 0) * Math.Max(Count ?? 100, 1));
        if (Start != newStart)
        {
            Start = newStart;
            RefreshItems();
        }
    }
    
    private async Task RefreshItemTypes()
    {
        try
        {
            ItemTypes = await Http.GetFromJsonWithDefaultsAsync<string[]>($"api/item/types");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing item types");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task RefreshItems()
    {
        try
        {
            Items = null;
            StateHasChanged();
            Items = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemDescriptionWithPriceDTO>>(
                $"api/item?filter={Uri.EscapeDataString(Filter ?? String.Empty)}&start={Start ?? 0}&count={Math.Max(Count ?? 100, 1)}&type={Uri.EscapeDataString(Type ?? String.Empty)}&glow={Glow}&glowsight={Glowsight}&cutout={Cutout}&craftable={Craftable}&specialDrop={SpecialDrop}&twitchDrop={TwitchDrop}&tradeable={Tradeable}&marketable={Marketable}&returning={Returning}&banned={Banned}"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing items");
        }
        finally
        {
            StateHasChanged();
        }
    }

}
