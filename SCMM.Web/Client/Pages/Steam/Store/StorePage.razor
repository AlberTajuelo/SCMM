@page "/steam/store"
@using SCMM.Web.Shared.Domain.DTOs.StoreItems
@using SCMM.Web.Shared
@inject ILogger<StorePage> Logger
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AppState State

<style>

    .Store-List {
        margin: -16px;
        padding-bottom: 0px
    }

    .Store .TabIndicator-Root {
        top: 0px;
    }

    .Store-Item .Card-Root {
        display: flex;
        flex-direction: column;
    }

    .Store-Item .CardContent-Root {
        flex-grow: 1;
    }

    .Store-Item .CardContent-Root:last-child {
        padding-bottom: 16px;
    }

    .Store-Item .CardContent-Root > .Grid-Root {
        height: 100%;
    }

    .Store-Item .Paper-Root {
        width: 100%;
        height: 100%;
    }
    
    .Store-Item .Image-Root {
        text-align: center;
    }

    .Store-Item .Image-Root img {
        width: 100%;
        max-width: 144px;
    }

    .Store-Item .Button-Root {
        width: 100%;
    }
    
    .Store-Item .Button-Root i {
        margin-right: 6px;
    }
    
    .Store-Item .Price-Root {
        width: 100%;
        text-align: center;
        padding: 8px;
    }
    
    .Store-Item .Price-Root {
        width: 100%;
        text-align: center;
        padding: 8px;
    }

    .Store-Item .Action-Root {
        display: flex;
        align-items: flex-end;
    }

    .Store-Item .Action-Root .Typography-Root {
        width: 100%;
    }

</style>

<DocumentTitle Title="Item Store" />

@if (Stores == null)
{
    @if(StoreException == null)
    {
        <Loading />
    }
    else
    {
        <Error Exception="@StoreException" />
    }
}
else
{
    <Grid Container Spacing="@Spacing.Two">
        @if(Stores.Any())
        {
            <Grid Item ExtraSmall="@GridSize.Twelve">
                <Tabs Class="Store-List"
                      Value="@SelectedStore"
                      OnChange="@OnSelectedStoreChanged"
                      IndicatorColor="@Color.Primary"
                      TextColor="@Color.Primary"
                      Variant="@TabsVariant.Scrollable"
                      Style="margin:-16px; padding-bottom:0px">
                    <IndicatorContent>
                        <div />
                    </IndicatorContent>
                    <ChildContent>
                        @foreach (var store in Stores.OrderByDescending(x => x.Start))
                        {
                            <Tab Class="Store" Id="@store.Id.ToString()" Value="@store" Label="@store.Name" />
                        }
                    </ChildContent>
                </Tabs>
            </Grid>
        }
        @if (Store == null)
        {
            <Grid Item ExtraSmall="@GridSize.Twelve">
                @if(StoreException == null)
                {
                    <Loading />
                }
                else
                {
                    <Error Exception="@StoreException" />
                }
            </Grid>
        }
        else
        {
            @foreach (var item in Store.Items.OrderBy(x => x.StoreIndex))
            {
                <Grid Item Class="Store-Item" ExtraSmall="@GridSize.Twelve" Small="@GridSize.Six" Medium="@GridSize.Four" ExtraLarge="@GridSize.Three">
                    <Card>
                        <CardHeader DisableTypography="true">
                            <AvatarContent>
                                <div title="@item.AuthorName">
                                    <Avatar Src="@item.AuthorAvatarUrl" Alt="@item.AuthorName">
                                    </Avatar>
                                </div>
                            </AvatarContent>
                            <TitleContent>
                                <Typography Variant="@TypographyVariant.H6" Style="@GetItemStyles(item)">
                                    <span>@item.Name</span>
                                </Typography>
                            </TitleContent>
                            <SubHeaderContent>
                                @if (!String.IsNullOrEmpty(item.ItemType))
                                {
                                    <Typography Variant="@TypographyVariant.Body2" Color="@Color.TextSecondary">
                                        <span>@item.ItemType</span>
                                    </Typography>
                                }
                            </SubHeaderContent>
                        </CardHeader>
                        <CardContent>
                            <Grid Container Spacing="@Spacing.Two">
                                <Grid Item ExtraSmall="@GridSize.Six">
                                    <div class="Image-Root">
                                        <img src="@item.IconUrl" />
                                    </div>
                                </Grid>
                                <Grid Item ExtraSmall="@GridSize.Six">
                                    @if (item.MarketRankTotal > 0)
                                    {
                                        <Typography Variant="@TypographyVariant.Body2" Color="@Color.TextPrimary" GutterBottom>
                                            <i class="fas fa-fw fa-balance-scale-left"></i>
                                            <span>@item.MarketRankPosition cheaper @item.ItemType.Pluralise(item.MarketRankPosition) in the marketplace (@item.MarketRankTotal total).</span>
                                        </Typography>
                                    }
                                    @if (item.HasWorkshopFile)
                                    {
                                        <Typography Variant="@TypographyVariant.Body2" Color="@Color.TextPrimary" NoWrap>
                                            <i class="fas fa-fw fa-shopping-cart"></i>
                                            @if (item.TotalSalesMax == null)
                                            {
                                                <span style="padding:8px">@item.TotalSalesMin.ToQuantityString() or more</span>
                                            }
                                            else if (item.TotalSalesMin == item.TotalSalesMax)
                                            {
                                                <span style="padding:8px">@item.TotalSalesMin.ToQuantityString()</span>
                                            }
                                            else
                                            {
                                                <span style="padding:8px">@item.TotalSalesMin.ToQuantityString() - @item.TotalSalesMax.Value.ToQuantityString()</span>
                                            }
                                        </Typography>
                                        <Typography Variant="@TypographyVariant.Body2" Color="@Color.TextPrimary" NoWrap>
                                            <i class="fas fa-fw fa-user"></i>
                                            @if (item.Subscriptions > 0)
                                            {
                                                <span style="padding:8px">@item.Subscriptions.Value.ToQuantityString()</span>
                                            }
                                        </Typography>
                                        <Typography Variant="@TypographyVariant.Body2" Color="@Color.TextPrimary" NoWrap GutterBottom>
                                            <i class="fas fa-fw fa-eye"></i>
                                            @if (item.Views > 0)
                                            {
                                                <span style="padding:8px">@item.Views.Value.ToQuantityString()</span>
                                            }
                                        </Typography>
                                    }
                                    @if (!item.StoreIsStillAvailable)
                                    {
                                        <Typography Variant="@TypographyVariant.Body2" Color="@Color.Primary">
                                            <span>This item is no longer available, grab it from the marketplace instead.</span>
                                        </Typography>
                                    }
                                    else if (item.HasMarketListing)
                                    {
                                        <Typography Variant="@TypographyVariant.Body2" Color="@Color.Primary">
                                            <span>This item is also available in the marketplace.</span>
                                        </Typography>
                                    }
                                </Grid>
                                <Grid Item Class="Action-Root" ExtraSmall="@GridSize.Six">
                                    <Typography Class="Theme-Success">
                                        <Button OnClick="@(() => BuyItem(item))" Variant="@ButtonVariant.Contained" Color="@Color.Primary" Disabled="@(!item.StoreIsStillAvailable)">
                                            <i class="fas fa-fw fa-shopping-cart"></i>
                                            <strong>@item.Currency.ToPriceString(item.StorePrice)</strong>
                                        </Button>
                                    </Typography>
                                </Grid>
                                <Grid Item Class="Action-Root" ExtraSmall="@GridSize.Six">
                                    @if (item.HasMarketListing)
                                    {
                                        <Typography>
                                            <Button OnClick="@(() => BuyItem(item))" Variant="@ButtonVariant.Contained" Color="@Color.Primary">
                                                <i class="fas fa-fw fa-balance-scale-left"></i>
                                                <span>@item.Currency.ToPriceString(item.MarketPrice ?? 0)</span>
                                            </Button>
                                        </Typography>
                                    }
                                    else if (item.HasWorkshopFile)
                                    {
                                        <Typography>
                                            <Button OnClick="@(() => ViewItem(item))" Variant="@ButtonVariant.Outlined" Color="@Color.TextSecondary">
                                                <i class="fas fa-fw fa-eye"></i>
                                                <span>View</span>
                                            </Button>
                                        </Typography>
                                    }
                                </Grid>
                            </Grid>
                        </CardContent>
                    </Card>
                </Grid>   
            }
            <Grid Item Large="@GridSize.Twelve" ExtraLarge="@GridSize.Six">
                <Paper>
                    <Tabs Value="@SelectedItemChartPanel"
                          OnChange="@OnSelectedItemChartChanged"
                          IndicatorColor="@Color.Primary"
                          TextColor="@Color.Primary"
                          Variant="@TabsVariant.FullWidth">
                        <Tab Id="store-tab" Control="store-tab-panel-0" Value="0" Label="Sales Revenue" Wrapped />
                        <Tab Id="store-tab" Control="store-tab-panel-1" Value="1" Label="Sales Overview" Wrapped />
                        <Tab Id="store-tab" Control="store-tab-panel-2" Value="2" Label="Sales History" Wrapped />
                        <Tab Id="store-tab" Control="store-tab-panel-3" Value="3" Label="Marketplace vs Store" Wrapped />
                    </Tabs>
                    <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="0">
                        @if ((int)SelectedItemChartPanel == 0)
                        {
                            @if (ItemRevenueChart != null)
                            {
                                <Alert Info Title="Sales revenue calculation disclaimer" Rounded="false">
                                    <Icon>
                                        <i class="fas fa-fw fa-exclamation-circle"></i>
                                    </Icon>
                                    <MessageContent>
                                        <span><strong>TL;DR;</strong> Revenue is at least @(State.Currency.ToPriceString(Store.Items.Sum(x => x.TotalSalesMin * x.StorePrice))) so far.</span>
                                        <span>This graph represents the <strong>minimum</strong> revenue earned per-item from store purchases. Because an individual can purchase multiple copies of the same item, actual revenue will always be higher than what is shown here. Steam doesn't publicly advertise exact sales figures, this is the just a rough estimate.</span>
                                    </MessageContent>
                                </Alert>
                                <ChartJsBarChart @ref="ItemRevenueChartJs" Config="@ItemRevenueChart" />
                            }
                            else
                            {
                                <Error Title="Unavailable" SubTitle="No data" />
                            }
                        }
                    </TabPanel>
                    <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="1">
                        @if ((int)SelectedItemChartPanel == 1)
                        {
                            @if (ItemRankChart != null)
                            {
                                <ChartJsBarChart @ref="ItemRankChartJs" Config="@ItemRankChart" />
                            }
                            else
                            {
                                <Error Title="Unavailable" SubTitle="No data" />
                            }
                        }
                    </TabPanel>
                    <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="2">
                        @if ((int)SelectedItemChartPanel == 2)
                        {
                            @if (ItemRankHistoryChart != null)
                            {
                                <ChartJsLineChart @ref="ItemRankHistoryChartJs" Config="@ItemRankHistoryChart" />
                            }
                            else
                            {
                                <Error Title="Unavailable" SubTitle="No data" />
                            }
                        }
                    </TabPanel>
                    <TabPanel Id="store-tab-panel" Label="store-tab" Value="@SelectedItemChartPanel" Index="3">
                        @if ((int)SelectedItemChartPanel == 3)
                        {
                            @if (ItemStoreVerusMarketChart != null)
                            {
                                <ChartJsRadarChart @ref="ItemStoreVerusMarketChartJs" Config="@ItemStoreVerusMarketChart" />
                            }
                            else
                            {
                                <Error Title="Unavailable" SubTitle="No data" />
                            }
                        }
                    </TabPanel>
                </Paper>
            </Grid>
            @foreach (var media in Store.Media)
            {
                <Grid Item ExtraSmall="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
                    <YouTubeVideo VideoId="@media" />
                </Grid>
            }
        }
    </Grid>
}

@code {

    private ItemStoreListDTO[] Stores { get; set; }

    private ItemStoreListDTO SelectedStore { get; set; }

    private ItemStoreDetailedDTO Store { get; set; }

    private Exception StoreException { get; set; }

    private object SelectedItemChartPanel { get; set; } = 1;

    private ChartJsBarChart ItemRevenueChartJs { get; set; }

    private ChartJsBarChart ItemRankChartJs { get; set; }

    private ChartJsLineChart ItemRankHistoryChartJs { get; set; }

    private ChartJsRadarChart ItemStoreVerusMarketChartJs { get; set; }

    private BarConfig ItemRevenueChart { get; set; }

    private BarConfig ItemRankChart { get; set; }

    private LineConfig ItemRankHistoryChart { get; set; }

    private RadarConfig ItemStoreVerusMarketChart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshStores();
    }

    private void BuyItem(StoreItemDetailDTO item)
    {
        string url = (item.StoreIsStillAvailable)
            ? $"https://store.steampowered.com/itemstore/{item.SteamAppId}/detail/{item.SteamId}/"
            : $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

    private void ViewItem(StoreItemDetailDTO item)
    {
        string url = $"https://steamcommunity.com/sharedfiles/filedetails/?id={item.SteamWorkshopId}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

    private async Task RefreshStores()
    {
        try
        {
            Stores = await Http.GetFromJsonAsync<ItemStoreListDTO[]>($"api/store");
            if (Stores.Any())
            {
                OnSelectedStoreChanged(Stores.Last());
            }
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading the store");
        }
        StateHasChanged();
    }

    private async Task RefreshStore(Guid storeId)
    {
        try
        {
            Store = null;
            StoreException = null;
            StateHasChanged();
            Store = await Http.GetFromJsonAsync<ItemStoreDetailedDTO>($"api/store/{storeId}");
            OnSelectedItemChartChanged(SelectedItemChartPanel);
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading the store");
        }
        StateHasChanged();
    }

    private void OnSelectedStoreChanged(object value)
    {
        SelectedStore = (ItemStoreListDTO) value;
        if (SelectedStore != null)
        {
            RefreshStore(SelectedStore.Id);
        }
    }

    private void OnSelectedItemChartChanged(object value)
    {
        SelectedItemChartPanel = value;
        ItemRevenueChart = null;
        ItemRankChart = null;
        ItemRankHistoryChart = null;
        ItemStoreVerusMarketChart = null;
        switch (SelectedItemChartPanel)
        {
            case 0: RedrawItemRevenueChart(); break;
            case 1: RedrawItemRankChart(); break;
            case 2: RedrawItemRankHistoryChart(); break;
            case 3: RedrawItemStoreVerusMarketChart(); break;
        }

        StateHasChanged();
    }

    private string GetItemStyles(StoreItemDetailDTO item)
    {
        return $"color: {item.ForegroundColour}";
    }

    private void RedrawItemRevenueChart()
    {
        var storeItems = Store.Items
            .Where(x => x.HasWorkshopFile)
            .OrderBy(x => x.StoreIndex)
            .ToList();

        if (!storeItems.Any())
        {
            return;
        }

        ItemRevenueChart = new BarConfig
        {
            Options = new BarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true,
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"

                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemRevenueChart.Data.Labels.AddRange(
            storeItems.Select(x => x.Name).ToArray()
        );

        var localScaleString = String.Empty.PadRight(State.Currency.Scale, '0');
        var localScaleDivisor = Int64.Parse($"1{localScaleString}");

        var authorRevenue = new BarDataset<DoubleWrapper>
        {
            Label = "Skin Author Royalties",
            BackgroundColor = "#6BC16F",
            BorderColor = "#335E33",
            BorderWidth = 1
        };
        authorRevenue.AddRange(
            storeItems.Select(x => (DoubleWrapper)Math.Round((double)((x.TotalSalesMin * x.StorePrice) * 0.25) / localScaleDivisor, State.Currency.Scale))
        );

        var totalRevenue = new BarDataset<DoubleWrapper>
        {
            Label = "Skin Sales Revenue",
            BackgroundColor = "#388e3c",
            BorderColor = "#1b5e20",
            BorderWidth = 1
        };
        totalRevenue.AddRange(
            storeItems.Select(x => (DoubleWrapper)Math.Round((double)(x.TotalSalesMin * x.StorePrice) / localScaleDivisor, State.Currency.Scale))
        );

        ItemRevenueChart.Data.Datasets.AddRange(new[] {
            authorRevenue, totalRevenue
        });
    }

    private void RedrawItemRankChart()
    {
        var storeItems = Store.Items
            .Where(x => x.HasWorkshopFile)
            .OrderBy(x => x.StoreIndex)
            .ToList();

        if (!storeItems.Any())
        {
            return;
        }

        ItemRankChart = new BarConfig
        {
            Options = new BarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true,
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemRankChart.Data.Labels.AddRange(
            storeItems.Select(x => x.Name).ToArray()
        );

        var itemSubscriptions = new BarDataset<DoubleWrapper>
        {
            Label = "Subscribers",
            BackgroundColor = "#388e3c",
            BorderColor = "#1b5e20",
            BorderWidth = 1
        };
        itemSubscriptions.AddRange(
            storeItems.Select(x => (DoubleWrapper)x.Subscriptions)
        );

        var itemTotalSalesMin = new BarDataset<DoubleWrapper>
        {
            Label = "Minimum Sales",
            BackgroundColor = "#6BC16F",
            BorderColor = "#335E33",
            BorderWidth = 1
        };
        itemTotalSalesMin.AddRange(
            storeItems.Select(x => (DoubleWrapper)x.TotalSalesMin)
        );

        ItemRankChart.Data.Datasets.AddRange(new[] {
            itemSubscriptions, itemTotalSalesMin
        });
    }

    private void RedrawItemRankHistoryChart()
    {
        var startOfWeek = Store.Start.DateTime;
        var storeItems = Store.Items
            .Where(x => x.HasWorkshopFile)
            .OrderBy(x => x.StoreIndex)
            .ToList();

        if (!storeItems.Any())
        {
            return;
        }

        ItemRankHistoryChart = new LineConfig
        {
            Options = new LineOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new Scales
                {

                    xAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };

        ItemRankHistoryChart.Data.Labels = GetSkinWeekDates(startOfWeek)
            .Select(x => x.ToString("dd MMMM yyyy"))
            .ToList();

        foreach (var item in storeItems)
        {
            var itemDataSet = new LineDataset<DoubleWrapper>
            {
                Label = item.Name,
                BackgroundColor = GraphDataSetColours[storeItems.IndexOf(item)],
                BorderColor = GraphDataSetColours[storeItems.IndexOf(item)],
                BorderWidth = 3,
                LineTension = 0.1,
                Fill = false
            };
            itemDataSet.AddRange(
                GetItemSubscriptionDataset(item, startOfWeek)
            );
            ItemRankHistoryChart.Data.Datasets.Add(itemDataSet);
        }
    }

    private void RedrawItemStoreVerusMarketChart()
    {
        var storeItems = Store.Items
            .Where(x => x.HasMarketListing)
            .OrderBy(x => x.StoreIndex)
            .ToList();

        if (!storeItems.Any())
        {
            return;
        }

        ItemStoreVerusMarketChart = new RadarConfig
        {
            Options = new RadarOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scale = new Scale()
                {
                    Ticks = new LinearCartesianTicks()
                    {
                        Display = false
                    }
                }
            }
        };

        ItemStoreVerusMarketChart.Data.Labels.AddRange(
            storeItems.Select(x => x.Name).ToArray()
        );

        var itemMarketPrices = new RadarDataset
        {
            Label = "Market Price",
            BackgroundColor = "#bbdefb",
            BorderColor = "#0d47a1",
            BorderWidth = 1,
            Data = storeItems
                .Select(x => (double)x.Currency.ToPrice(x.MarketPrice ?? 0))
                .ToList()
        };

        var itemStorePrices = new RadarDataset
        {
            Label = "Store Price",
            BackgroundColor = "#c8e6c9",
            BorderColor = "#1b5e20",
            BorderWidth = 1,
            Data = storeItems
            .Select(x => (double)x.Currency.ToPrice(x.StorePrice))
            .ToList()
        };

        ItemStoreVerusMarketChart.Data.Datasets.AddRange(new[] {
            itemMarketPrices, itemStorePrices
        });
    }

    IEnumerable<DateTime> GetSkinWeekDates(DateTime startOfWeek)
    {
        return new[] {
            startOfWeek.Date.AddDays(0),
            startOfWeek.Date.AddDays(1),
            startOfWeek.Date.AddDays(2),
            startOfWeek.Date.AddDays(3),
            startOfWeek.Date.AddDays(4),
            startOfWeek.Date.AddDays(5),
            startOfWeek.Date.AddDays(6),
            startOfWeek.Date.AddDays(7)
        };
    }

    IEnumerable<DoubleWrapper> GetItemSubscriptionDataset(StoreItemDetailDTO item, DateTime startOfWeek)
    {
        var dataSet = new List<DoubleWrapper>();
        if (item?.SubscriptionsHistory?.Any() != true)
        {
            return dataSet;
        }

        var graphDates = GetSkinWeekDates(startOfWeek).Where(x => x < DateTime.UtcNow);
        foreach (var graphDate in graphDates)
        {
            var dataPoint = 0d;
            var dataKey = graphDate.Date.ToString("dd MMM yyyy");
            var keys = item.SubscriptionsHistory.Keys.ToArray();
            if (item.SubscriptionsHistory.ContainsKey(dataKey))
            {
                dataPoint = item.SubscriptionsHistory[dataKey];
            }
            dataSet.Add(dataPoint);
        }
        return dataSet;
    }

    private string[] GraphDataSetColours = {
        "#2196F3",
        "#8BC34A",
        "#FF5722",
        "#E91E63",
        "#9C27B0",
        "#3F51B5",
        "#FF9800",
        "#FFEB3B",
        "#795548",
        "#00BCD4",
        "#607D8B"
    };

}
