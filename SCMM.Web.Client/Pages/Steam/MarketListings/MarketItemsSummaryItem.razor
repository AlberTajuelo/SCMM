@namespace SCMM.Web.Client.Pages.Steam.MarketListings
@using SCMM.Web.Data.Models.Domain.MarketItems;
@using SCMM.Steam.Data.Models.Enums;
@using SCMM.Web.Data.Models; 
@inherits ComponentBase
@inject ILogger<MarketItemsSummaryItem> Logger
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject AppState State

<div class="Item-Summary-Root">
    <div class="Item-Summary-Body" style="@GetBorderStyles(Item)" @onclick="@((_) => OnItemClicked(Item))" title="@Item.Name">
        <Badge Class="Item-Summary-Badge Item-Summary-Badge-Flags Item-Summary-Badge-Top"
                Invisible="@(!Item.ProfileFlags.HasFlag(SteamProfileMarketItemFlags.WantToBuy))"
                Color="@Skclusive.Core.Component.Color.Custom"
                Horizontal="@Horizontal.Left"
                Vertical="@Vertical.Top">
            <BadgeContent>
                @if (Item.ProfileFlags.HasFlag(SteamProfileMarketItemFlags.WantToBuy))
                {
                    <i class="fas fa-star" title="You want this item" />
                }
            </BadgeContent>
            <ChildContent>
                <Grid Container Spacing="@Spacing.Two">
                    <Grid Item ExtraSmall="@GridSize.Four">
                        <div class="Image-Root">
                            <img src="@Item.IconUrl" />
                        </div>
                    </Grid>
                    <Grid Item ExtraSmall="@GridSize.Eight">
                        <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body1" style="@GetTitleStyles(Item)">
                            <strong>@Item.Name</strong>
                        </Skclusive.Material.Typography.Typography>
                        <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextPrimary">
                            <span><strong>@Item.Supply</strong> for sale starting at <strong>@Item.Currency.ToPriceString(Item.BuyNowPrice)</strong>.</span>
                        </Skclusive.Material.Typography.Typography>
                        <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextPrimary">
                            <span><strong>@Item.Demand</strong> for requests to buy at <strong>@Item.Currency.ToPriceString(Item.BuyAskingPrice)</strong> or lower.</span>
                        </Skclusive.Material.Typography.Typography>
                        <Skclusive.Material.Typography.Typography Variant="@TypographyVariant.Body2" Color="@Skclusive.Core.Component.Color.TextPrimary">
                            <span><strong>@Item.Last24hrSales</strong> sold in the last 24 hours.</span>
                        </Skclusive.Material.Typography.Typography>
                    </Grid>
                </Grid>
            </ChildContent>
        </Badge>
    </div>
</div>

@code {

    [Parameter]
    public MarketItemListDTO Item { get; set; }
    
    [Parameter]
    public bool ReadOnly { get; set; }

    private string GetBorderStyles(MarketItemListDTO item)
    {
        return $"border: 2px solid {item.ForegroundColour}";
    }
    
    private string GetTitleStyles(MarketItemListDTO item)
    {
        return $"color: {item.ForegroundColour}";
    }

    private void OnItemClicked(MarketItemListDTO item)
    {
        //Navigation.NavigateTo($"steam/marketplace/{item.Id}");
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

    private async Task UpdateItemFlag(MarketItemListDTO item, SteamProfileMarketItemFlags flag, bool value)
    {
        try
        {
            if (value)
            {
                item.ProfileFlags |= flag;
            }
            else 
            {
                item.ProfileFlags &= ~flag;
            }
            StateHasChanged();

            await Http.PutAsJsonAsync($"api/profile/market/item/{item.SteamDescriptionId}/{flag}", value);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error updating flag for item '{item.Name}' (flag: {flag}, value: {value})");
        }
    }
}
