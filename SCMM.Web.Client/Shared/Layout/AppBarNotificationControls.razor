@using SCMM.Web.Client.Shared.Storage
@using SCMM.Web.Data.Models.UI.System
@using Markdig
@inherits PersistentComponent
@inject ILogger<AppBarAppControls> Logger
@inject ISnackbar Snackbar
@inject ICookieManager CookieManager
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject AppState State
@inject HttpClient Http

@if (Notifications?.Any() == true)
{
    <div @attributes="AdditionalAttributes">
        <MudTooltip IsVisible="NotificationsAreNew" Placement="Placement.Bottom" Color="@(NotificationsAreNew ? Color.Primary : Color.Secondary)">
            <TooltipContent>
                @if(NotificationsAreNew)
                {
                    <span class="text-centered">New updates are here! Click the bell for info</span>
                }
                else
                {
                    <span class="text-centered">View the most recent notifications</span>
                }
            </TooltipContent>
            <ChildContent>
                <MudToggleIconButton Toggled="@IsOpen" ToggledChanged="OnToggleMenu" Icon="@(NotificationsAreNew ? "fas fa-fw fa-bell bell-ring" : "far fa-fw fa-bell")" Color="@(NotificationsAreNew ? Color.Primary : Color.Secondary)" ToggledIcon="fas fa-fw fa-bell" ToggledColor="@Color.Secondary" />
            </ChildContent>
        </MudTooltip>
        <MudPopover Open="IsOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Paper="false">
            <MudPaper Outlined="true" Class="pa-4" Style="max-width:500px; width:85vw; max-height:85vh; overflow:auto">
                <MudStack>
                    @foreach (var message in Notifications)
                    {
                        <MudStack>
                            <MudText Typo="Typo.h6" Color="Color.Default">
                                <span class="no-wrap">@((DateTimeOffset.Now - message.Timestamp).ToDurationString(maxGranularity: 1, suffix: "ago"))</span>
                            </MudText>
                            <MudText Typo="Typo.body1" Color="Color.Secondary">
                                <span class="notification-content">
                                @((MarkupString)
                                    Markdown.ToHtml(
                                        message.Description,
                                        new MarkdownPipelineBuilder()
                                            .UseAdvancedExtensions()
                                            .UseSoftlineBreakAsHardlineBreak()
                                            .Build()
                                    )
                                )
                                </span>
                            </MudText>
                            <div class="d-flex align-start justify-top flex-wrap">
                                @foreach (var media in message.Media)
                                {
                                    <MudImage Fluid="true" Src="@media.Key" Class="rounded-lg clickable" onclick="@(() => ViewMedia(media.Key))" title="Click to enlarge" />
                                }
                            </div>
                        </MudStack>
                        <MudDivider />
                    }
                </MudStack>
            </MudPaper>
        </MudPopover>
    </div>
}

@code
{
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    private DateTimeOffset NotificationsLastViewedOn = DateTimeOffset.MinValue;

    private bool NotificationsAreNew => (Notifications?.Any() == true && Notifications?.Max(x => x.Timestamp) > NotificationsLastViewedOn);

    private SystemUpdateMessageDTO[] Notifications;

    private bool IsOpen;

    protected override async Task OnLoadStateAsync()
    {
        NotificationsLastViewedOn = await RestoreFromStateOrLoad(nameof(NotificationsLastViewedOn), async () =>
        {
            return DateTimeOffset.FromUnixTimeMilliseconds(await CookieManager.GetAsync<long>("notifications-last-viewed", DateTimeOffset.MinValue.ToUnixTimeMilliseconds()));
        });
        Notifications = await RestoreFromStateOrLoad(nameof(Notifications), async () =>
        {
            try
            {
                return await Http.GetFromJsonWithDefaultsAsync<SystemUpdateMessageDTO[]>($"api/system/latestUpdates");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error loading latest system updates");
                throw;
            }
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(Notifications), Notifications);
        PersistToState(nameof(NotificationsLastViewedOn), NotificationsLastViewedOn);
        return Task.CompletedTask;
    }

    private void OnToggleMenu(bool toggle)
    {
        IsOpen = toggle;
        if (IsOpen)
        {
            NotificationsLastViewedOn = DateTimeOffset.Now;
            CookieManager.Set("notifications-last-viewed", NotificationsLastViewedOn.ToUnixTimeMilliseconds());
        }
    }

    private void ViewMedia(string url)
    {
        ExternalNavigationManager.NavigateToNewTab(url);
    }
}
