@using MudBlazor.Utilities
@using SCMM.Web.Client.Shared.Dialogs.Items
@implements IAsyncDisposable
@inject ILogger<ViewItemModelDialog> Logger
@inject IJSRuntime JS
@inject AppState State

<div @attributes="AdditionalAttributes">
    <div @ref=Container class="scene-container interactive full-width full-height">
        
        <div class="scene-controls position-top d-flex flex-wrap flex-row align-center justify-center full-width pa-4">
            <MudTooltip Text="Reset camera" Class="mx-4">
                <MudIconButton OnClick="@OnResetCameraClicked" Icon="fas fa-video" Color="Color.Default" Disabled="@(Scene == null || State.IsPrerendering)" />
            </MudTooltip>
            <div class="d-flex flex-row align-center mx-4">
                <MudTooltip Text="Toggle rotate animation">
                    <MudToggleIconButton Toggled="@IsRotating" ToggledChanged="@OnToggleAutoRotateChanged" Icon="fas fa-fw fa-play" ToggledIcon="fas fa-fw fa-pause" Color="@Color.Default" ToggledColor="@Color.Default" Disabled="@(Scene == null || State.IsPrerendering)" />
                </MudTooltip>
                <MudText Typo="@Typo.caption" Color="@Color.Default" Class="no-wrap">Auto-rotate</MudText>
            </div>
            @if (!DisableCutoutControls)
            {
                <div class="d-flex flex-row align-center mx-4">
                    <MudTooltip Text="Show/hide cutout">
                        <MudToggleIconButton Toggled="@IsCutoutVisible" ToggledChanged="@OnToggleAlphaCutoffChanged" Icon="fas fa-fw fa-eye" ToggledIcon="fas fa-fw fa-eye-slash" Color="@Color.Default" ToggledColor="@Color.Default" Disabled="@(Scene == null || State.IsPrerendering)" Class="ml-2" />
                    </MudTooltip>
                    <MudText Typo="@Typo.caption" Color="@Color.Default" Class="no-wrap">Cutout</MudText>
                </div>
            }
            @if (!DisableGlowControls)
            {
                <div class="d-flex flex-row align-center mx-4">
                    <MudTooltip Text="Slide to set the glow effect intensity">
                        <MudIcon Icon="fas fa-fw fa-moon ml-2" Size="@Size.Medium" Color="@Color.Default" />
                    </MudTooltip>
                    <MudSlider T="double" ValueChanged="@OnEmissionIntensityChanged" Min="0" Max="1" Step="0.1" Color="@Color.Secondary" Disabled="@(Scene == null || State.IsPrerendering)" Class="ml-4 ma-2" />
                </div>
            }
            <div class="d-flex flex-row align-center mx-4">
                <MudTooltip Text="Toggle the lights on/off">
                    <MudToggleIconButton Toggled="@IsLightOn" ToggledChanged="@OnToggleLightChanged" Icon="@Icons.Filled.LightMode" ToggledIcon="@Icons.Filled.LightMode" Color="@Color.Default" ToggledColor="@Color.Warning" Disabled="@(Scene == null || State.IsPrerendering)" Class="" />
                </MudTooltip>
                <MudSlider T="double" ValueChanged="@OnLightIntensityChanged" Min="0" Max="1" Step="0.1" Color="@Color.Warning" Disabled="@(Scene == null || !IsLightOn || State.IsPrerendering)" Class="ma-2 mr-4" />
            </div>
            @if (AdditionalTools != null)
            {
                <div class="d-flex flex-row align-center mx-4">
                    @AdditionalTools
                </div>
            }
        </div>
        
        @*
        <div class="scene-controls position-bottom d-flex flex-row align-center justify-center full-width pa-2">
            <MudColorPicker ValueChanged="@OnLightColorChanged" Adornment="@Adornment.Start" AdornmentIcon="fa fa-fw fa-sun" 
                            Variant="@Variant.Outlined" PickerVariant="PickerVariant.Inline" ColorPickerView="ColorPickerView.Palette" DisableToolbar="false" DisableAlpha="true" />
        </div>
        *@
        
        @if(Scene != null && !IsLoading) 
        {
            <div class="scene-controls position-bottom d-flex flex-column align-center justify-center full-width pa-4">
                <div class="fade-out">
                    <div class="grabbing mb-4">
                        <i class="fas fa-fw fa-long-arrow-alt-left"></i>
                        <i class="fas fa-fw fa-hand-pointer"></i>
                        <i class="fas fa-fw fa-long-arrow-alt-right"></i>
				    </div>
				</div>
                <Alert Variant="MudBlazor.Variant.Text" Severity="MudBlazor.Severity.Normal" Icon="fas fa-fw fa-info-circle" SubTitle="Use left mouse to look around. Right mouse to pan. Middle mouse to zoom in/out." />
            </div>
        }
        
        @if (IsLoading) 
        {
            <div class="scene-controls position-top d-flex flex-column align-center justify-center full-width full-height">
                <MudProgressCircular Indeterminate="true" Size="Size.Medium" />
                @if(ProgressLoaded != null && ProgressTotal != null)
                {
                    <MudText Typo="Typo.body1" Color="Color.Default" Class="pa-2">@(((long)ProgressLoaded.Value).ToFileSizeString()) / @(((long)ProgressTotal.Value).ToFileSizeString())</MudText>
                }
            </div>
        }
        else if (!String.IsNullOrEmpty(Error))
        {
            <div class="scene-controls position-top d-flex flex-row align-center justify-center full-width full-height pa-10">
                <Alert Variant="MudBlazor.Variant.Text" Severity="MudBlazor.Severity.Error" Icon="fas fa-fw fa-exclamation-triangle" Title="3D model viewer is unavailable" SubTitle="@Error" Elevation="12" />
            </div>
        }

    </div>
</div>

@code {

    [Parameter]
    public string ItemType { get; set; }

    [Parameter]
    public string WorkshopFileUrl { get; set; }

    [Parameter]
    public bool DisableCutoutControls { get; set; }

    [Parameter]
    public bool DisableGlowControls { get; set; }

    [Parameter]
    public RenderFragment AdditionalTools { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    private ElementReference Container { get; set; }

    private ThreeJsScene Scene { get; set; }

    private bool IsRotating { get; set; } = false;

    private bool IsCutoutVisible { get; set; } = false;

    private bool IsLightOn { get; set; } = true;

    private bool IsLoading { get; set; } = true;

    private long? ProgressLoaded { get; set; }

    private long? ProgressTotal { get; set; }

    private string Error { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;
                Scene = await CreateSceneFromWorkshopFileAsync(
                    Container,
                    new
                    {
                        // TODO: Add endpoint url configuration
                        ModelEndpoint = $"https://data.scmm.app/{Constants.BlobContainerModels}",
                        // TODO: Add support for other apps
                        ModelName = ItemType.ToRustItemShortName(),
                        WorkshopFileUrl = WorkshopFileUrl,
                        AutoRotate = IsRotating,                        Light = IsLightOn
                    }
                );
            }
            catch(Exception ex)
            {
                Logger.LogError(ex, "Failed to initialise the model viewer");
                Error = $"Unable to initialise the model viewer. {ex.Message}";
                IsLoading = false;
                StateHasChanged();
                throw ex;
            }
        }
    }
    
    private async Task<ThreeJsScene> CreateSceneFromWorkshopFileAsync(ElementReference sceneContainer, object sceneOptions)
    {
        var modelViewComponent = DotNetObjectReference.Create(this);
        var threejsWrapper = await JS.InvokeAsync<IJSObjectReference>("import", "./js/threejs-wrapper.js");
        var threejsScene = await threejsWrapper.InvokeAsync<IJSObjectReference>("createSceneFromWorkshopFile", sceneContainer, sceneOptions, modelViewComponent);
        return new ThreeJsScene(threejsWrapper, threejsScene, modelViewComponent);
    }

    private async Task OnResetCameraClicked()
    {
        await Scene.ToggleResetCameraAsync();
    }
    private async Task OnToggleAutoRotateChanged(bool toggled)
    {
        IsRotating = toggled;
        await Scene.ToggleAutoRotateAsync(toggled);
    }
        private async Task OnToggleAlphaCutoffChanged(bool toggled)
    {
        IsCutoutVisible = toggled;
        await Scene.ToggleAlphaCutoffAsync(toggled);
    }
        private async Task OnToggleLightChanged(bool toggled)
    {
        IsLightOn = toggled;
        await Scene.ToggleLightAsync(toggled);
    }

    private async Task OnLightColorChanged(MudColor color)
    {
        await Scene.SetLightColorAsync(color);
    }
    
    private async Task OnLightIntensityChanged(double intensity)
    {
        await Scene.SetLightIntensityAsync(intensity);
    }
    
    private async Task OnEmissionIntensityChanged(double intensity)
    {
        await Scene.SetEmissionIntensityAsync(intensity);
    }
    
    [JSInvokable]
    public void OnLoadProgress(long loaded, long total)
    {
        Error = null;
        IsLoading = true;
        ProgressLoaded = loaded;
        ProgressTotal = total;
        Logger.LogTrace($"Load Progress: {loaded}/{total}");
        StateHasChanged();
    }
    
    [JSInvokable]
    public void OnLoadComplete()
    {
        Error = null;
        IsLoading = false;
        ProgressLoaded = null;
        ProgressTotal = null;
        Logger.LogTrace($"Load Complete!");
        StateHasChanged();
    }

    [JSInvokable]
    public void OnLoadError(string error)
    {
        Error = error;
        IsLoading = false;
        Logger.LogError($"Load Error: {error}");
        StateHasChanged();
    }

    public class ThreeJsScene : IAsyncDisposable
    {
        private readonly IJSObjectReference _threejsWrapper;
        private readonly IJSObjectReference _threejsScene;
        private readonly DotNetObjectReference<ItemModelView> _modelViewComponent;
        
        public ThreeJsScene(IJSObjectReference threejsWrapper, IJSObjectReference threejsScene, DotNetObjectReference<ItemModelView> modelViewComponent)
        {
            _threejsWrapper = threejsWrapper;
            _threejsScene = threejsScene;
            _modelViewComponent = modelViewComponent;
        }

        public async Task ToggleResetCameraAsync() => await _threejsWrapper.InvokeVoidAsync("resetCamera", _threejsScene);

        public async Task ToggleAutoRotateAsync(bool toggled) => await _threejsWrapper.InvokeVoidAsync("toggleAutoRotate", _threejsScene, toggled);
        
        public async Task ToggleAlphaCutoffAsync(bool toggled) => await _threejsWrapper.InvokeVoidAsync("toggleAlphaCutoff", _threejsScene, toggled);

        public async Task ToggleLightAsync(bool toggled) => await _threejsWrapper.InvokeVoidAsync("toggleLight", _threejsScene, toggled);

        public async Task SetLightIntensityAsync(double intensity) => await _threejsWrapper.InvokeVoidAsync("setLightIntensity", _threejsScene, intensity);

        public async Task SetLightColorAsync(MudColor color) => await _threejsWrapper.InvokeVoidAsync("setLightColor", _threejsScene, $"rgb({color.R}, {color.G}, {color.B})");
        
        public async Task SetEmissionIntensityAsync(double intensity) => await _threejsWrapper.InvokeVoidAsync("setEmissionIntensity", _threejsScene, intensity);

        public async ValueTask DisposeAsync()
        {
            _modelViewComponent?.Dispose();
            if (_threejsScene != null)
            {
                await _threejsScene.DisposeAsync().AsTask();
            }
            if (_threejsWrapper != null)
            {
                await _threejsWrapper.DisposeAsync().AsTask();
            }
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (Scene != null)
        {
            await Scene.DisposeAsync().AsTask();
        }
    }
}
