@page "/steam/inventory/{SteamId}"
@using SCMM.Web.Shared.Domain.DTOs.InventoryItems
@using SCMM.Web.Shared
@namespace SCMM.Web.Client.Pages.Steam.Inventory
@inject ILogger<ProfileInventoryPage> Logger
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AppState State

<style>
    
    .Inventory-List-Container {
        max-height: calc(100vh - 235px);
        overflow: auto;
    }

</style>

<DocumentTitle Title="Inventory" />

<Grid Container Spacing="@Spacing.Two">
    <Grid Item ExtraSmall="@GridSize.Twelve" Large="@GridSize.Six">
        <ResponsiveTextField Label="Steam ID" Placeholder="steam id" Value="@SteamId" OnChange="@(x => OnSteamIdChanged(x))">
            <StartAdornment>
                <Typography Variant="@TypographyVariant.Body1" Color="@Color.TextSecondary">
                    <span>https://steamcommunity.com/id/</span>
                </Typography>
            </StartAdornment>
            <EndAdornment>
                <IconButton OnClick="@ViewProfileInventory" Style="padding:5px;" title="View Profile Inventory">
                    <SearchIcon />
                </IconButton>
            </EndAdornment>
        </ResponsiveTextField>
    </Grid>
    <Grid Item ExtraSmall="@GridSize.Twelve" Large="@GridSize.Six">
        <ResponsiveTextField Label="Filter" Placeholder="type an item name or tag..." OnChange="@(x => OnFilterChanged(x))">
            <StartAdornment>
                <Typography Variant="@TypographyVariant.Body1" Color="@Color.TextSecondary">
                    <i class="fas fa-fw fa-filter"></i>
                </Typography>
            </StartAdornment>
        </ResponsiveTextField>
    </Grid>
</Grid>
<Grid Container Spacing="@Spacing.Two">
    @if (InventoryTotal == null)
    {
        <Grid ExtraSmall="@GridSize.Twelve">
            @if (ProfileNotFound)
            {
                <NotFound />
            }
            else
            {
                <Loading />
            }
        </Grid>
    }
    else
    {
        if (Profile != null)
        {
            <DocumentTitle Title="@($"Inventory - {Profile.Name}")" />
        }
        else
        {
            <DocumentTitle Title="@($"Inventory - {SteamId}")" />
        }
        @if(Profile != null && !ProfileIsMe)
        {
            <Grid ExtraSmall="@GridSize.Twelve" Small="@GridSize.Six" Large="@GridSize.Four" ExtraLarge="@GridSize.Two">
                <InventoryProfileCard Profile="@Profile" />
            </Grid>
        }
        <Grid ExtraSmall="@GridSize.Twelve" Small="@GridSize.Six" Large="@GridSize.Four" ExtraLarge="@GridSize.Two">
            <InventoryTotalCard Title="Assets">
                <Icon>
                    <SwapBagIcon />
                </Icon>
                <Total>
                    @InventoryTotal.TotalItems
                </Total>
            </InventoryTotalCard>
        </Grid>
        @if (InventoryTotal.TotalInvested > 0)
        {
            <Grid ExtraSmall="@GridSize.Twelve" Small="@GridSize.Six" Large="@GridSize.Four" ExtraLarge="@GridSize.Two">
                <InventoryTotalCard Title="Total Investment" IconClass="Background-Error">
                    <Icon>
                        <i class="fas fa-fw fa-dollar-sign"></i>
                    </Icon>
                    <Total>
                        @State.Currency.ToPriceString(InventoryTotal.TotalInvested)
                    </Total>
                </InventoryTotalCard>
            </Grid>
        }
        @if (InventoryTotal.TotalMarketValue > 0)
        {
            <Grid ExtraSmall="@GridSize.Twelve" Small="@GridSize.Six" Large="@GridSize.Four" ExtraLarge="@GridSize.Two">
                <InventoryTotalCard Title="Total Market Value" IconClass="Background-Info">
                    <Icon>
                        <i class="fas fa-fw fa-dollar-sign"></i>
                    </Icon>
                    <Total>
                        @State.Currency.ToPriceString(InventoryTotal.TotalMarketValue)
                        <span>
                            @if (InventoryTotal.TotalMarket24hrMovement > 0)
                            {
                                <span class="Text-Success">
                                    🡱 @State.Currency.ToPriceString(InventoryTotal.TotalMarket24hrMovement) today
                                </span>
                            }
                            @if (InventoryTotal.TotalMarket24hrMovement < 0)
                            {
                                <span class="Text-Error">
                                    🡳 @State.Currency.ToPriceString(InventoryTotal.TotalMarket24hrMovement) today
                                </span>
                            }
                        </span>
                    </Total>
                </InventoryTotalCard>
            </Grid>
        }
        @if (InventoryTotal.TotalResellValue > 0)
        {
            <Grid ExtraSmall="@GridSize.Twelve" Small="@GridSize.Six" Large="@GridSize.Four" ExtraLarge="@GridSize.Two">
                <InventoryTotalCard Title="Optimistic Resell Value" IconClass="Background-Success">
                    <Icon>
                        <i class="fas fa-fw fa-dollar-sign"></i>
                    </Icon>
                    <Total>
                        @State.Currency.ToPriceString(InventoryTotal.TotalResellValue)
                        <span>
                            @if (InventoryTotal.TotalResellProfit > 0)
                            {
                                <span class="Text-Success">
                                    🡱 @State.Currency.ToPriceString(InventoryTotal.TotalResellProfit) profit
                                </span>
                            }
                            @if (InventoryTotal.TotalResellProfit < 0)
                            {
                                <span class="Text-Error">
                                    🡳 @State.Currency.ToPriceString(InventoryTotal.TotalResellProfit) profit
                                </span>
                            }
                        </span>
                    </Total>
                </InventoryTotalCard>
            </Grid>
        }
        @if (Profile != null && ProfileIsMe)
        {
            <Grid ExtraSmall="@GridSize.Twelve" Small="@GridSize.Six" Large="@GridSize.Four" ExtraLarge="@GridSize.Two" Style="padding:8px">
                <Typography Variant="@TypographyVariant.Body2" Color="@Color.TextSecondary" GutterBottom>
                    Last synchronised @Math.Floor((DateTimeOffset.Now - (Profile.LastUpdatedInventoryOn ?? DateTimeOffset.Now)).TotalHours) hour(s) ago
                </Typography>
                <Button OnClick="@(() => SynchroniseInventory())" Size="@Size.Small"
                        Variant="@ButtonVariant.Outlined" Color="@Color.TextSecondary">
                    Synchronise
                </Button>
            </Grid>
        }
        <Grid Item ExtraSmall="@GridSize.Twelve">
            <Tabs Value="@SelectedInventoryPanel"
                    OnChange="@(x => OnSelectedInventoryPanelChanged(x))"
                    IndicatorColor="@Color.Primary"
                    TextColor="@Color.Primary"
                    Variant="@TabsVariant.FullWidth">
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="0" Label="Summary" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="1" Label="Return on investment" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="2" Label="Market activity" Wrapped />
                <Tab Id="inventory-tab" Control="inventory-tab-panel" Value="3" Label="Market performance" Wrapped />
            </Tabs>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab" Value="@SelectedInventoryPanel" Index="0">
                @if ((int)SelectedInventoryPanel == 0)
                {
                    @if (InventoryItemsSummary == null)
                    {
                        <Loading />
                    }
                    else
                    {
                        <InventoryItemsSummary Items="@InventoryItemsSummary" />
                    }
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab" Value="@SelectedInventoryPanel" Index="1">
                @if ((int)SelectedInventoryPanel == 1)
                {
                    @if (InventoryItemsDetailed == null)
                    {
                        <Loading />
                    }
                    else
                    {
                        <Paper Class="Inventory-List-Container">
                            <InventoryItemsTable Items="@InventoryItemsDetailed" ReadOnly="@(!ProfileIsMe)" />
                        </Paper>
                    }
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab"  Value="@SelectedInventoryPanel" Index="2">
                @if ((int)SelectedInventoryPanel == 2)
                {
                    <InventoryItemsActivity />
                }
            </TabPanel>
            <TabPanel Id="inventory-tab-panel" Label="inventory-tab"  Value="@SelectedInventoryPanel" Index="3">
                @if ((int)SelectedInventoryPanel == 3)
                {
                    <Grid Container>
                        <Grid Item ExtraSmall="@GridSize.Twelve" ExtraLarge="@GridSize.Six">
                            @if(InventoryPerformanceValueHistoryChart == null)
                            {
                                <Loading />
                            }
                            else
                            {
                                <ChartJsLineChart @ref="InventoryPerformanceValueHistoryChartJs" Config="@InventoryPerformanceValueHistoryChart" />
                            }
                        </Grid>
                        <Grid Item ExtraSmall="@GridSize.Twelve" ExtraLarge="@GridSize.Six">
                            @if(InventoryPerformanceValueChart == null)
                            {
                                <Loading />
                            }
                            else
                            {
                                <ChartJsPieChart @ref="InventoryPerformanceValueChartJs" Config="@InventoryPerformanceValueChart" />
                            }
                        </Grid>
                    </Grid>
                }
            </TabPanel>
        </Grid>
    }
</Grid>

@code {

    [Parameter]
    public string SteamId { get; set; }

    private string Filter { get; set; }

    private ProfileInventoryDetailsDTO Profile { get; set; }

    private bool ProfileIsMe { get; set; }

    private bool ProfileNotFound { get; set; }

    private object SelectedInventoryPanel { get; set; } = 0;

    private IList<ProfileInventoryItemSummaryDTO> InventoryItemsSummary { get; set; }

    private IList<InventoryItemListDTO> InventoryItemsDetailed { get; set; }

    private ProfileInventoryTotalsDTO InventoryTotal { get; set; }

    private ProfileInventoryPerformanceDTO InventoryPerformance { get; set; }
    
    private ChartJsPieChart InventoryPerformanceValueChartJs;
    private PieConfig InventoryPerformanceValueChart;
    
    private ChartJsLineChart InventoryPerformanceValueHistoryChartJs;
    private LineConfig InventoryPerformanceValueHistoryChart;

    protected override async Task OnInitializedAsync()
    {
        SelectedInventoryPanel = await LocalStorage.GetItemAsync<int>("Inventory.SelectedTab");
        await RefreshInventory();
    }

    private async Task RefreshInventory(bool forceReload = false)
    {
        try
        {
            Logger.LogInformation($"Refreshing inventory for '{SteamId}'...");
            Profile = null;
            ProfileIsMe = false;
            ProfileNotFound = false;
            InventoryItemsSummary = null;
            InventoryItemsDetailed = null;
            InventoryTotal = null;
            InventoryPerformance = null;
            await LoadProfile(forceReload);
            await LoadInventoryTotals(forceReload);
            await OnSelectedInventoryPanelChanged(SelectedInventoryPanel, forceReload);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing inventory for '{SteamId}'");
            ProfileNotFound = true;
        }
    }

    private async Task OnSelectedInventoryPanelChanged(object value, bool forceReload = false)
    {
        SelectedInventoryPanel = value;
        await LocalStorage.SetItemAsync<int>("Inventory.SelectedTab", (int) value);
        switch (SelectedInventoryPanel)
        {
            case 0: await LoadInventorySummary(forceReload); break;
            case 1: await LoadInventoryDetails(forceReload); break;
            case 2: await LoadInventoryActivity(forceReload); break;
            case 3: await LoadInventoryPerformance(forceReload); break;
        }
        StateHasChanged();
    }
    
    private void OnSteamIdChanged(string steamId)
    {
        SteamId = steamId;
        StateHasChanged();
    }
    
    private void OnFilterChanged(string filter)
    {
        Filter = (string) filter;
        StateHasChanged();
    }
    
    private async Task SynchroniseInventory()
    {
        Profile = null;
        StateHasChanged();
        await RefreshInventory(forceReload: true);
        StateHasChanged();
    }
    
    private async Task LoadProfile(bool forceReload = false)
    {
        try
        {
            if (Profile == null || forceReload)
            {
                Logger.LogInformation("Fetching inventory profile...");
                Profile = await Http.GetFromJsonAsync<ProfileInventoryDetailsDTO>(
                    $"api/inventory/{SteamId}?sync={forceReload}"
                );
                ProfileIsMe = (Profile != null && (State.ProfileId == Profile?.SteamId || State.ProfileId == Profile?.ProfileId));
                ProfileNotFound = (Profile == null);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching inventory profile");
            Profile = null;
            ProfileIsMe = false;
            ProfileNotFound = true;
        }
    }

    private async Task LoadInventoryTotals(bool forceReload = false)
    {
        try
        {
            if (InventoryTotal == null || forceReload)
            {
                Logger.LogInformation("Fetching inventory totals...");
                InventoryTotal = await Http.GetFromJsonAsync<ProfileInventoryTotalsDTO>(
                    $"api/inventory/{SteamId}/total"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching inventory totals");
            InventoryTotal = null;
        }
    }

    private async Task LoadInventorySummary(bool forceReload = false)
    {
        try
        {
            if (InventoryItemsSummary == null || forceReload)
            {
                Logger.LogInformation("Fetching inventory summary...");
                InventoryItemsSummary = await Http.GetFromJsonAsync<IList<ProfileInventoryItemSummaryDTO>>(
                    $"api/inventory/{SteamId}/summary"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching inventory summary");
            InventoryItemsSummary = null;
        }
    }

    private async Task LoadInventoryDetails(bool forceReload = false)
    {
        try
        {
            if (InventoryItemsDetailed == null || forceReload)
            {
                Logger.LogInformation("Fetching inventory details...");
                InventoryItemsDetailed = await Http.GetFromJsonAsync<IList<InventoryItemListDTO>>(
                    $"api/inventory/{SteamId}/details"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching inventory details");
            InventoryItemsDetailed = null;
        }
    }
    
    private async Task LoadInventoryActivity(bool forceReload = false)
    {
        try
        {
            // TODO: This...
            Logger.LogInformation("Fetching inventory activity...");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching inventory activity");
        }
    }
    
    private async Task LoadInventoryPerformance(bool forceReload = false)
    {
        try
        {
            if (InventoryPerformance == null || forceReload)
            {
                Logger.LogInformation("Fetching inventory performance...");
                InventoryPerformanceValueChart = null;
                InventoryPerformanceValueHistoryChart = null;
                InventoryPerformance = await Http.GetFromJsonAsync<ProfileInventoryPerformanceDTO>(
                    $"api/inventory/{SteamId}/performance"
                );
            
            }
            // TODO: How to cache rendering of charts?
            if (true || InventoryPerformanceValueChart == null || forceReload)
            {
                RedrawInventoryPerformanceValueChart();
            }
            // TODO: How to cache rendering of charts?
            if (true || InventoryPerformanceValueHistoryChart == null || forceReload)
            {
                RedrawInventoryPerformanceValueHistoryChart();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching inventory performance");
            InventoryPerformanceValueChart = null;
            InventoryPerformanceValueHistoryChart = null;
            InventoryPerformance = null;
        }
    }
    
    private void RedrawInventoryPerformanceValueChart()
    {
        InventoryPerformanceValueChart = new PieConfig
        {
            Options = new PieOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                },
                Tooltips = new Tooltips
                {
                    Enabled = true
                }
            }
        };
        
        InventoryPerformanceValueChart.Data.Labels.AddRange(new[] { 
            "Invested", 
            "Resell Fees", 
            "Resell Profit", 
            "Resell Value"
        });

        var localScaleString = String.Empty.PadRight(State.Currency.Scale, '0');
        var localScaleDivisor = Int64.Parse($"1{localScaleString}");
        if (InventoryTotal != null)
        {
            var inventoryValueDataSet = new PieDataset
            {
                BackgroundColor = new[] { 
                    "#d32f2f",
                    "#f57c00",
                    "#388e3c",
                    "#1976d2"
                },
                BorderWidth = 0
            };

            inventoryValueDataSet.Data.AddRange(new double[] { 
                (DoubleWrapper)0,
                (DoubleWrapper)0,
                (DoubleWrapper)0,
                (DoubleWrapper)Math.Round((double)InventoryTotal.TotalResellValue / localScaleDivisor, State.Currency.Scale)
            });
        
            var inventoryValueBreakdownDataSet = new PieDataset
            {
                BackgroundColor = new[] { 
                    "#d32f2f",
                    "#f57c00",
                    "#388e3c",
                    "#1976d2"
                },
                BorderWidth = 0
            };

            inventoryValueBreakdownDataSet.Data.AddRange(new double[] { 
                (DoubleWrapper)Math.Round((double)InventoryTotal.TotalInvested / localScaleDivisor, State.Currency.Scale),
                (DoubleWrapper)Math.Round((double)InventoryTotal.TotalResellTax / localScaleDivisor, State.Currency.Scale),
                (DoubleWrapper)Math.Round((double)InventoryTotal.TotalResellProfit / localScaleDivisor, State.Currency.Scale),
                (DoubleWrapper)0
            });

            InventoryPerformanceValueChart.Data.Datasets.Add(inventoryValueDataSet);
            InventoryPerformanceValueChart.Data.Datasets.Add(inventoryValueBreakdownDataSet);
        }
    }
    
    private void RedrawInventoryPerformanceValueHistoryChart()
    {
        InventoryPerformanceValueHistoryChart = new LineConfig
        {
            Options = new LineOptions
            {
                Legend = new Legend
                {
                    Display = true,
                    Labels = new LegendLabelConfiguration()
                    {
                        FontColor = "#ffffff"
                    }
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Enabled = true
                },
                Scales = new Scales
                {

                    xAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Display = true,
                                FontColor = "#ffffff",
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel()
                            {
                                Display = true,
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Display = true,
                                Color = "#e0e0e0"
                            }
                        }
                    }
                }
            }
        };
        
        if (InventoryPerformance != null)
        {
            InventoryPerformanceValueHistoryChart.Data.Labels = InventoryPerformance.ValueHistoryGraph.Keys.ToList();
        }

        var localScaleString = String.Empty.PadRight(State.Currency.Scale, '0');
        var localScaleDivisor = Int64.Parse($"1{localScaleString}");

        if (InventoryPerformance?.ProfitHistoryGraph != null && InventoryTotal?.TotalResellProfit > 0)
        {
            var profitHistoryDataSet = new LineDataset<DoubleWrapper>
            {
                Label = "Resell Profit",
                BackgroundColor = "#388e3c",
                BorderColor = "#1b5e20",
                BorderWidth = 1,
                PointBorderWidth = 2,
                PointRadius = 8,
                LineTension = 0.1,
                Fill = true
            };
            profitHistoryDataSet.AddRange(
                InventoryPerformance.ProfitHistoryGraph.Values.Select(x => (DoubleWrapper)Math.Round((double)x / localScaleDivisor, State.Currency.Scale)).ToList()
            );

            InventoryPerformanceValueHistoryChart.Data.Datasets.Add(profitHistoryDataSet);
        }

        if (InventoryPerformance?.ValueHistoryGraph != null)
        {
            var valueHistoryDataSet = new LineDataset<DoubleWrapper>
            {
                Label = "Market Value",
                BackgroundColor = "#1976d2",
                BorderColor = "#0d47a1",
                BorderWidth = 1,
                PointBorderWidth = 2,
                PointRadius = 8,
                LineTension = 0.1,
                Fill = true
            };
            valueHistoryDataSet.AddRange(
                InventoryPerformance.ValueHistoryGraph.Values.Select(x => (DoubleWrapper)Math.Round((double)x / localScaleDivisor, State.Currency.Scale)).ToList()
            );

            InventoryPerformanceValueHistoryChart.Data.Datasets.Add(valueHistoryDataSet);
        }
    }

    private IEnumerable<InventoryMarketItemDTO> FilterItems(IEnumerable<InventoryMarketItemDTO> items)
    {
        if (String.IsNullOrEmpty(Filter))
        {
            return items;
        }

        return items.Where(x => 
            x.Name.Contains(Filter, StringComparison.CurrentCultureIgnoreCase)
        );
    }
    
    private async Task ViewProfileInventory()
    {
        Navigation.NavigateTo($"steam/inventory/{SteamId}", forceLoad: true);
    }

    private void ViewItem(InventoryItemListDTO item)
    {
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }
}
