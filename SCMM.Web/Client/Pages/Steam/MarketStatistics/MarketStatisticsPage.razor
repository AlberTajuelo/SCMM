@page "/steam/marketstatistics"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SCMM.Web.Shared.Domain.DTOs.MarketItems
@using SCMM.Web.Shared
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AppState State

<DocumentTitle Title="Market Statistics" />
<Grid Container Spacing="@Spacing.Two">
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        Good Time to Buy
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Largest <strong>negative</strong> gap in buy-now vs recent market value
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (GoodTimeToBuy == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in GoodTimeToBuy)
                        {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                @item.Currency.ToPriceString(item.BuyNowPrice) (@Math.Floor(((decimal)item.Last48hrValue / item.Last1hrValue) * 100)%)
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        Good Time to Sell
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Largest <strong>positive</strong> gap in buy-now vs recent market value
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (GoodTimeToSell == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in GoodTimeToSell)
                        {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                @item.Currency.ToPriceString(item.BuyNowPrice) (@Math.Floor(((decimal)item.Last1hrValue / item.Last48hrValue) * 100)%)
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        <img src="/images/stonks-guy.png" style="width:24px; margin-right: -10px;" />
                        📈 Stonking
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Currently at an all-time high value
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (AllTimeHigh == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in AllTimeHigh)
                            {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                @item.Currency.ToPriceString(item.Last1hrValue)
                            </TableCell>
                            <TableCell>
                                @if (Math.Abs(item.Last1hrValue - item.AllTimeHighestValue) == 0)
                                {
                                <span class="Text-Success">🡱 All-Time High</span>
                                }
                                else
                                {
                                <span class="Text-Error">🡳 @Math.Abs(item.Last1hrValue - item.AllTimeHighestValue)</span>
                                }
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        <img src="/images/stonks-guy.png" style="width:24px; margin-right: -10px;" />
                        📉 Crashing
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Currently at an all-time low value
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (AllTimeLow == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in AllTimeLow)
                            {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                @item.Currency.ToPriceString(item.Last1hrValue)
                            </TableCell>
                            <TableCell>
                                @if (Math.Abs(item.Last1hrValue - item.AllTimeLowestValue) == 0)
                                        {
                                <span class="Text-Error">🡳 All-Time Low</span>
                                        }
                                        else
                                        {
                                <span class="Text-Success">🡱 @Math.Abs(item.Last1hrValue - item.AllTimeLowestValue)</span>
                                        }
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        Hot Right Now
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Highest number of sales in the last 24hrs
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (HotRightNow == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in HotRightNow)
                            {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                @item.Last24hrSales.ToSalesActivityString()
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        Most Recent
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Lowest market age
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostRecent == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in MostRecent)
                            {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                @item.MarketAge
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        Most Common
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Highest number of unique owners
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostCommon == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in MostCommon)
                            {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                <i class="fa fa-fw fa-user"></i>
                                @item.Subscriptions.ToQuantityString()
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        Most Rare
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Lowest number of unique owners
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostRare == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in MostRare)
                            {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                <i class="fa fa-fw fa-user"></i>
                                @item.Subscriptions.ToQuantityString()
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>
    
    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        Most Profitable
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Highest all-time profitability (against day-1 value)
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostProfitable == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in MostProfitable)
                            {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                @item.Currency.ToPriceString(item.Last1hrValue)
                            </TableCell>
                            <TableCell>
                                <span class="Text-Success">🡱 @Math.Abs(item.Last1hrValue - item.First24hrValue)</span>
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        Most Wanted
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Highest number of buy orders
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostWanted == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in MostWanted)
                            {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                @item.Demand.ToQuantityString()
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        Most Saturated
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Highest number of sell orders
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (MostSaturated == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in MostSaturated)
                            {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                @item.Supply.ToQuantityString()
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>

    <Grid Item ExtraSmall="@GridSize.Twelve" Small="@GridSize.Twelve" Medium="@GridSize.Six" ExtraLarge="@GridSize.Three">
        <Card>
            <CardHeader>
                <TitleContent>
                    <Typography Variant="TypographyVariant.H6" Color="@Color.Primary">
                        Worst Crashes
                    </Typography>
                    <Typography Variant="TypographyVariant.Body2" Color="@Color.TextSecondary">
                        Highest <strong>negative</strong> value swing (all-time high vs current)
                    </Typography>
                </TitleContent>
                <ActionContent>
                    <Button Color="@Color.Secondary"
                            Disabled="true"
                            Size="@Size.Small"
                            Variant="@ButtonVariant.Text">
                        View More <ArrowRightIcon />
                    </Button>
                </ActionContent>
            </CardHeader>
            <CardContent Style="padding:0px">
                @if (BiggestCrashes == null)
                {
                <Loading />
                }
                else
                {
                <Table Size="@Size.Small">
                    <TableBody>
                        @foreach (var item in BiggestCrashes)
                            {
                        <TableRow Hover OnClick="@((_) => ViewItem(item))">
                            <TableCell>
                                <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            </TableCell>
                            <TableCell Component="th" Scope="row">
                                <strong>@item.Name</strong>
                            </TableCell>
                            <TableCell>
                                @item.Currency.ToPriceString(item.Last1hrValue)
                            </TableCell>
                            <TableCell>
                                <span class="Text-Error">🡳 @Math.Abs(item.Last1hrValue - item.AllTimeHighestValue)</span>
                            </TableCell>
                        </TableRow>
                            }
                    </TableBody>
                </Table>
                }
            </CardContent>
        </Card>
    </Grid>
    
</Grid>

@code {

    private MarketItemListDTO[] GoodTimeToBuy { get; set; }
    private MarketItemListDTO[] GoodTimeToSell { get; set; }
    private MarketItemListDTO[] AllTimeLow { get; set; }
    private MarketItemListDTO[] AllTimeHigh { get; set; }
    private MarketItemListDTO[] MostProfitable { get; set; }
    private MarketItemListDTO[] HotRightNow { get; set; }
    private MarketItemListDTO[] MostWanted { get; set; }
    private MarketItemListDTO[] MostSaturated { get; set; }
    private MarketItemListDTO[] MostRecent { get; set; }
    private MarketItemListDTO[] MostCommon { get; set; }
    private MarketItemListDTO[] MostRare { get; set; }
    private MarketItemListDTO[] BiggestCrashes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshGoodTimeToBuy();
        await RefreshGoodTimeToSell();
        await RefreshAllTimeLow();
        await RefreshAllTimeHigh();
        await RefreshMostProfitable();
        await RefreshHotRightNow();
        await RefreshMostWanted();
        await RefreshMostSaturated();
        await RefreshMostRecent();
        await RefreshMostCommon();
        await RefreshMostRare();
        await RefreshBiggestCrashes();
    }

    private void ViewItem(MarketItemListDTO item)
    {
        //Navigation.NavigateTo($"steam/marketplace/{item.Id}");
        string url = $"https://steamcommunity.com/market/listings/{item.SteamAppId}/{Uri.EscapeDataString(item.Name)}";
        JSRuntime.InvokeVoidAsync("WindowInterop.openInNewTab", url);
    }

    private async Task RefreshHotRightNow()
    {
        try
        {
            HotRightNow = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/hotRightNow");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshAllTimeLow()
    {
        try
        {
            AllTimeLow = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/allTimeLow");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshAllTimeHigh()
    {
        try
        {
            AllTimeHigh = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/allTimeHigh");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshGoodTimeToBuy()
    {
        try
        {
            GoodTimeToBuy = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/goodTimeToBuy");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshGoodTimeToSell()
    {
        try
        {
            GoodTimeToSell = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/goodTimeToSell");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshMostProfitable()
    {
        try
        {
            MostProfitable = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/mostProfitable");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshMostWanted()
    {
        try
        {
            MostWanted = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/mostWanted");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshMostSaturated()
    {
        try
        {
            MostSaturated = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/mostSaturated");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshMostRecent()
    {
        try
        {
            MostRecent = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/mostRecent");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshMostCommon()
    {
        try
        {
            MostCommon = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/mostCommon");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshMostRare()
    {
        try
        {
            MostRare = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/mostRare");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshBiggestCrashes()
    {
        try
        {
            BiggestCrashes = await Http.GetFromJsonAsync<MarketItemListDTO[]>($"api/market/dashboard/biggestCrashes");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}
