@page "/settings"
@using SCMM.Web.Data.Models.UI.Profile
@inject ILogger<SettingsPage> Logger
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject ExternalNavigationManager ExternalNavigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject UIState State

<PageContainer Title="Settings">

    <MudGrid Spacing="4" Justify="MudBlazor.Justify.Center">
        <MudItem xs="12" xl="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="@MudBlazor.Typo.h6" Color="MudBlazor.Color.Default">
                            Your Profile
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        @if (Updating)
                        {
                            <MudProgressCircular Size="MudBlazor.Size.Medium" Color="MudBlazor.Color.Primary" Indeterminate="true"/>
                        }
                        else 
                        {
                            @if (!String.IsNullOrEmpty(UpdateMessage))
                            {
                                @if (UpdateException == null)
                                {
                                    <MudText Typo="@MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Success">
                                        <span>@UpdateMessage</span>
                                        <i class="fa fa-fw fa-check-circle"></i>
                                    </MudText>
                                }
                                else
                                {
                                    <MudText Typo="@MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Error">
                                        <span>@UpdateMessage</span>
                                        <i class="fa fa-fw fa-times-circle"></i>
                                    </MudText>
                                }
                            }
                        }
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Spacing="2">
                        <MudItem xs="3">
                            <MudAvatar Image="@State.Profile.AvatarLargeUrl" Style="height:152px; width:152px; " />
                        </MudItem>
                        <MudItem xs="9">
                            <MudGrid Spacing="2">
                                <MudItem xs="12">
                                  <MudTextField Label="Name" Variant="MudBlazor.Variant.Outlined" FullWidth Disabled="true"
                                                Value="@State.Profile.Name" />
                                </MudItem>
                                <MudItem xs="12">
                                  <MudTextField Label="Steam ID" Variant="MudBlazor.Variant.Outlined" FullWidth Disabled="true"
                                                Value="@State.Profile.SteamId" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Steam Trade URL" Variant="MudBlazor.Variant.Outlined" FullWidth
                                          @bind-Value="@Update.TradeUrl" DebounceInterval="500" OnDebounceIntervalElapsed="UpdateProfile"
                                          HelperText="We use this to offer trades to anybody that is interested in trading with you." />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Language" Variant="MudBlazor.Variant.Outlined" FullWidth Disabled="true"
                                          Value="@State.Profile.Language.Name" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Currency" Variant="MudBlazor.Variant.Outlined" FullWidth Disabled="true"
                                          Value="@State.Profile.Currency.Name" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Discord ID" Variant="MudBlazor.Variant.Outlined" FullWidth
                                          @bind-Value="@Update.DiscordId" DebounceInterval="500" OnDebounceIntervalElapsed="UpdateProfile"
                                          HelperText="If you have item alerts setup, we'll use this to PM you on Discord. You'll also be able to use your Discord name with the SCMM bot instead of your Steam Id." />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Gambling Offset" Variant="MudBlazor.Variant.Outlined" FullWidth Disabled="true"
                                          Value="@State.Profile.Currency.ToPriceString(State.Profile.GamblingOffset)" 
                                          HelperText="If you use gambling sites, enter your total win/lose amount here. We use this to calculate your inventory total profit." />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" xl="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="@MudBlazor.Typo.h6" Color="MudBlazor.Color.Default">
                            Your Data
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="@MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                        <span>This is where you can manage all data SCMM collects about you. You may download a copy, or delete it.</span><br/>
                        <span>Your data includes things like:</span>
                    </MudText>
                    <MudText Typo="@MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                        <ul class="fa-ul">
                            <li><span class="fa-li">-</span>Your Steam profile details</li>
                            <li><span class="fa-li">-</span>Your Steam inventory item details (including quantities and purchase prices)</li>
                            <li><span class="fa-li">-</span>Your marketplace item wishlist</li>
                            <li><span class="fa-li">-</span>All of the information shown on this page</li>
                        </ul>
                    </MudText>
                    <MudText Typo="@MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                        <span><strong>NOTE:</strong> If you are an accepted workshop creator and you choose to delete your data, we will still retain a copy of your basic Steam profile information (i.e. id, name, avatar). This is nessecary for completeness of the Steam item database.</span>
                    </MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Primary" StartIcon="fas fa-fw fa-download" Disabled="true">
                        Download Your Data
                    </MudButton>
                    <MudButton Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Error" StartIcon="fas fa-fw fa-trash" Disabled="true">
                        Delete Your Data
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>

</PageContainer>

@code {

    private bool Updating { get; set; }

    private UpdateProfileCommand Update { get; set; }

    private string UpdateMessage { get; set; }

    private Exception UpdateException { get; set; }

    protected override void OnInitialized()
    {
        if (!State.IsAuthenticated)
        {
            ExternalNavigation.NavigateTo($"/signin?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }
        else 
        {
            Update = new UpdateProfileCommand()
            {
                DiscordId = State.Profile.DiscordId,
                TradeUrl = State.Profile.TradeUrl
            };
        }
    }
    
    public async Task UpdateProfile()
    {
        if (Updating) 
        {
            return;
        }
        try 
        {
            Updating = true;
            StateHasChanged();
            await Http.PutAsJsonAsync($"api/profile", Update);
            UpdateMessage = "Updated!";
            UpdateException = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error updating profile details");
            Snackbar.Add($"Unable to save profile details. {ex.Message}", MudBlazor.Severity.Error);
            UpdateMessage = $"Changes not saved, an error occured";
            UpdateException = ex;
        }
        finally
        {
            Updating = false;
            StateHasChanged();
        }
    }

}