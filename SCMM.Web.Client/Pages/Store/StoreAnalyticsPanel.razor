@using SCMM.Web.Data.Models.UI.Store
@using Syncfusion.Blazor.Charts
@inject AppState State

<MudExpansionPanels Dense="true" DisableGutters="true" >
    <MudExpansionPanel @bind-IsExpanded="IsAnalyticsPanelOpen" Disabled="State.IsPrerendering">
        <TitleContent>
            <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="text-centered my-n4 mx-n2">
                <i class="fa fa-fw fa-flask mr-1" />
                <span>View Store Analytics</span>
            </MudText>
        </TitleContent>
        <ChildContent>
            @if (IsAnalyticsPanelOpen)
            {
                <MudTabs Rounded="true" Centered="true" PanelClass="ma-2">
                    <MudTabPanel Text="Estimated Sales" Disabled="@(Store?.Items?.Any(x => x.SupplyTotalEstimated > 0) != true)">
                        @if ((Store?.Items?.Any(x => x.SupplyTotalEstimated > 0) != true))
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="pa-8 text-centered">
                                <span>No data available yet.</span>
                            </MudText>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Warning" Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Warning">
                                <span><strong>Steam doesn't disclose exact sales figures, this is just an estimate</strong> to roughly guage how each item is performing. How is this calculated? Steam users <MudLink Href="https://partner.steamgames.com/doc/features/workshop/implementation#item_subscription" Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Warning" Underline="Underline.Hover" Target="_blank">subscribe to workshop files</MudLink> when they purchase items from the store. Using this, we can determine the approximate number of unique users that purchased at least one copy of the item.</span>
                                <span>To account for users who buy multiple copies of items, we do two things; Firstly, use the <MudLink Href="https://store.steampowered.com/itemstore/252490/?filter=Featured" Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Warning" Underline="Underline.Hover" Target="_blank">store top sellers</MudLink> ranking to add a conservative 1-10% buffer in sales depending on how well the item has been selling. Secondly, we scan Steam inventories to identify actual duplicate item purchases. Because only a small fraction of all Steam accounts are scanned, this metric is heavily skewed but does provide a some level of insight in to what items are selling multiple copies.</span>
                            </MudAlert>
                            <SfChart ID="ItemSales" Theme="Syncfusion.Blazor.Theme.FluentDark" Background="transparent" Width="100%" Height="100%">
                                @* TODO: Preload this, web api adapter cause multiple calls on first load *@
                                <SfDataManager Url="@($"api/store/{Store.Guid}/stats/itemSales")" Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
                                <ChartArea>
                                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                                </ChartArea>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis LabelFormat="#,##" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                    <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                </ChartPrimaryYAxis>
                                <ChartSeriesCollection>
                                    <ChartSeries XName="name" YName="supplyTotalMarketsKnown" Name="Currently listed on the market" StackingGroup="Breakdown" ColumnWidth="0.5" Fill="#171a21" Width="2" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="supplyTotalOwnersKnown" Name="User currently hold this item" StackingGroup="Breakdown" ColumnWidth="0.5" Width="2" Fill="#1565c0" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="supplyTotalOwnersEstimated" Name="Unknown subscribers to this item" StackingGroup="Breakdown" ColumnWidth="0.5" Width="2" Fill="#1e88e5" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="supplyTotalInvestorsKnown" Name="Duplicate inventory stock held of this item " StackingGroup="Breakdown" ColumnWidth="0.5" Fill="#6a1b9a" Width="2" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="supplyTotalInvestorsEstimated" Name="Possible duplicate inventory stock held of this item" StackingGroup="Breakdown" ColumnWidth="0.5" Fill="#8e24aa" Width="2" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="supplyTotalEstimated" Name="Total estimated sales" StackingGroup="Total" ColumnWidth="1" Fill="#388e3c" Width="2" Type="ChartSeriesType.Bar">
                                        <ChartMarker>
                                            <ChartDataLabel Visible="true" Name="totalText" Position="LabelPosition.Top">
                                                <ChartDataLabelFont FontWeight="600" Color="#eeeeee"></ChartDataLabelFont>
                                            </ChartDataLabel>
                                        </ChartMarker>
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                                <ChartLegendSettings Visible="true" Position="LegendPosition.Auto"></ChartLegendSettings>
                            </SfChart>
                        }
                    </MudTabPanel>
                    <MudTabPanel Text="Estimated Revenue" Disabled="@(Store?.Items?.Any(x => x.SupplyTotalEstimated > 0) != true)">
                        @if ((Store?.Items?.Any(x => x.SupplyTotalEstimated > 0) != true))
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="pa-8 text-centered">
                                <span>No data available yet.</span>
                            </MudText>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Warning" Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Warning">
                                <span><strong>Steam doesn't disclose exact sales figures, this is just an estimate</strong> to roughly guage how each item is performing. How is this calculated? <code>(total_estimated_sales * price_in_usd)</code>. See the sales tab for more on how we estimate sales numbers.</span>
                                <span>All revenue is subject to local sales tax, which varies between countries (and states) and is difficult to accurately estimate. We estimate that Steam pay about 7% in taxes for all store revenue collected.</span>
                                <span>After tax, <MudLink Href="https://steamcommunity.com/workshop/about/?appid=252490" Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Warning" Underline="Underline.Hover" Target="_blank">25% of remaining revenue goes to the item creator(s)</MudLink>. After the item creator(s), we estimate that Steam takes 30% as a service fee, with the remaining revenue going to the game publisher (Facepunch).</span>
                                <span>Finally, all revenue is further subject to local income taxes (for individuals), goods and service taxes (for companies), international banking fees, etc; None of these additional taxes/fees are accounted for in the below estimates, so actual revenue is likley lower.</span>
                            </MudAlert>
                            <SfChart ID="ItemRevenue" Theme="Syncfusion.Blazor.Theme.FluentDark" Background="transparent" Width="100%" Height="100%">
                                @* TODO: Preload this, web api adapter cause multiple calls on first load *@
                                <SfDataManager Url="@($"api/store/{Store.Guid}/stats/itemRevenue")" Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
                                <ChartArea>
                                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                                </ChartArea>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis LabelFormat="@($"{State.Currency.PrefixText}#,##0.00{State.Currency.SuffixText}+")" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                    <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                </ChartPrimaryYAxis>
                                <ChartSeriesCollection>
                                    <ChartSeries XName="name" YName="salesTax" Name="Sales tax" StackingGroup="Breakdown" ColumnWidth="0.5" Fill="#fb8c00" Width="2" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="authorRevenue" Name="Item author revenue" StackingGroup="Breakdown" ColumnWidth="0.5" Fill="#1e88e5" Width="2" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="platformRevenue" Name="Steam revenue" StackingGroup="Breakdown" ColumnWidth="0.5" Width="2" Fill="#171a21" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="publisherRevenue" Name="Facepunch revenue" StackingGroup="Breakdown" ColumnWidth="0.5" Width="2" Fill="@State.App?.PrimaryColor" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="total" Name="Total estimated revenue" StackingGroup="Total" ColumnWidth="1" Fill="#388e3c" Width="2" Type="ChartSeriesType.Bar">
                                        <ChartMarker>
                                            <ChartDataLabel Visible="true" Position="LabelPosition.Top">
                                                <ChartDataLabelFont FontWeight="600" Color="#eeeeee"></ChartDataLabelFont>
                                            </ChartDataLabel>
                                        </ChartMarker>
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                                <ChartLegendSettings Visible="true" Position="LegendPosition.Auto"></ChartLegendSettings>
                            </SfChart>
                        }
                    </MudTabPanel>
                </MudTabs>
            }
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    [Parameter]
    public StoreDetailsDTO Store { get; set; }

    private bool IsAnalyticsPanelOpen;
}
