@namespace SCMM.Web.Client.Pages.Steam.MarketListings
@using SCMM.Web.Shared.Domain.DTOs.MarketItems
@using SCMM.Web.Shared
@using SCMM.Steam.Shared
@inherits ComponentBase
@inject AppState State

<Table StickyHeader Size="@Size.Small">
    <TableHead>
        <TableRow>
            <TableCell>
                @CreateSortableColumn(nameof(MarketItemListDTO.Name), "Name")
            </TableCell>
            <TableCell>
                @CreateSortableColumn(nameof(MarketItemListDTO.BuyNowPrice), "Buy now")
            </TableCell>
            <TableCell>
                @CreateSortableColumn(nameof(MarketItemListDTO.Supply), "Available")
            </TableCell>
            <TableCell>
                @CreateSortableColumn(nameof(MarketItemListDTO.BuyAskingPrice), "Asking price")
            </TableCell>
            <TableCell>
                @CreateSortableColumn(nameof(MarketItemListDTO.Last24hrSales), "Sold in last 24hrs")
            </TableCell>
            <TableCell>
                @CreateSortableColumn(nameof(MarketItemListDTO.MovementLast336hrValue), "Trending over the last week")
            </TableCell>
            <TableCell>
                @CreateSortableColumn(nameof(MarketItemListDTO.Subscriptions), "Estimated market size")
            </TableCell>
            <TableCell>
                @CreateSortableColumn(nameof(MarketItemListDTO.MarketAge), "Age")
            </TableCell>
        </TableRow>
    </TableHead>
    <TableBody>
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <TableRow @key="@item.Id" Hover OnClick="@((_) => OnItemClick?.Invoke(item))">
                    <TableCell Component="th" Scope="row" Style="@GetItemStyles(item)">
                        <div style="display:flex; align-content:center; align-items:center">
                            <img src="@item.IconUrl" style="max-width:32px; max-height:32px; margin:-4px 0px;" />
                            <strong style="margin:8px">@item.Name</strong>
                        </div>
                    </TableCell>
                    <TableCell>
                        <strong>@item.Currency.ToPriceString(item.BuyNowPrice)</strong>
                    </TableCell>
                    <TableCell>
                        @if (item.Supply > 0)
                        {
                            <span>@item.Supply.ToQuantityString()</span>
                        }
                        else
                        {
                            <span>None</span>
                        }
                    </TableCell>
                    <TableCell>
                        <span>@item.Currency.ToPriceString(item.BuyAskingPrice)</span>
                    </TableCell>
                    <TableCell>
                        @if (item.Last24hrSales > 0)
                        {
                            <span>@item.Last24hrSales.ToSalesActivityString()</span>
                        }
                        else
                        {
                            <span>None</span>
                        }
                    </TableCell>
                    <TableCell Class="@(item.MovementLast336hrValue >= 0 ? "Text-Success" : "Text-Error")">
                        <span>@item.Last1hrValue.ToMovementString(item.Last336hrValue)</span>
                    </TableCell>
                    <TableCell>
                        @if (item.Subscriptions > 0)
                        {
                            <span>@item.Subscriptions.Value.ToQuantityString() or more </span>
                        }
                    </TableCell>
                    <TableCell>
                        <span>@item.MarketAge</span>
                    </TableCell>
                </TableRow>
            }
        }
    </TableBody>
</Table>
@if (Items == null)
{
    <Loading />
}
else
{
    <Button OnClick="@OnMoreItemsRequested" Disabled="@NoMoreItems" Style="width:100%">more...</Button>
}

@code {

    [Parameter]
    public IList<MarketItemListDTO> Items { get; set; }

    [Parameter]
    public bool NoMoreItems { get; set; }

    [Parameter]
    public Action OnMoreItemsRequested { set; get; }

    [Parameter]
    public Action<MarketItemListDTO> OnItemClick { set; get; }

    [Parameter]
    public string OrderBy { set; get; }

    [Parameter]
    public Sort Direction { set; get; }

    [Parameter]
    public Action<string, Sort> OnSortChanged { set; get; }

    private RenderFragment CreateSortableColumn(string name, string label)
    {
        return @<TableSortLabel
                    Active="@(OrderBy == name)"
                    Direction="@Direction"
                    OnClick="@CreateOnSortClick(name)">
                    @label
                </TableSortLabel>;
    }

    private EventCallback<EventArgs> CreateOnSortClick(string name)
    {
        return EventCallback.Factory.Create<System.EventArgs>(this, async (_) =>
        {
            await HandleSortClick(name);
        });
    }

    private async Task HandleSortClick(string name)
    {
        if (OrderBy == name)
        {
            Direction = Direction == Sort.Ascending ? Sort.Descending : Sort.Ascending;
        }
        else
        {
            Direction = Sort.Ascending;
        }
        OrderBy = name;
        OnSortChanged(OrderBy, Direction);
    }

    private string GetItemStyles(MarketItemListDTO item)
    {
        return $"color: {item.ForegroundColour}";
    }

}
