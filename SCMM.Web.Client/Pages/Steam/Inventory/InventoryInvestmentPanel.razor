@using SCMM.Web.Data.Models.UI.Profile.Inventory
@inject ILogger<InventoryInvestmentPanel> Logger
@inject HttpClient Http
@inject AppState State

@if (LoadingError != null)
{
    <Alert Exception="@LoadingError" />
}
else
{
    <MudTable @ref="Table" Dense="true" Hover="true" Striped="true" FixedHeader="true" FixedFooter="true" ReadOnly="@ReadOnly" Class="mud-table-dense-extra"
              ServerData="@LoadItems" RowsPerPage="25" CommitEditTooltip="Save Changes" SortLabel="Description.MarketItem.Last1hrValue" AllowUnsorted="false">
        <ToolBarContent>
            <MudText Typo="MudBlazor.Typo.body2">
                <span>Track your investment performance by clicking on an item and entering the price you paid for it.</span><br/>
                <span class="mud-secondary-text">Your return on investment (RoI) is calculated by deducting the purchase price and Steam market seller fees from the list price of each item.</span>
            </MudText>
            <MudToolBarSpacer />
            <MudTextField T="string" ValueChanged="@OnSearch" DebounceInterval="500" Placeholder="Filter items..." Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-filter mr-2" IconSize="MudBlazor.Size.Small" Class="mt-n4" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh Class="mud-primary-text">
                @*<MudTooltip Text="The name of the item. These are a 1:1 mirror of your inventory items; If you have a stack of items, they'll show as a stack here too">*@
                    <MudTableSortLabel SortLabel="Description.Name" T="InventoryInvestmentItemDTO">Item</MudTableSortLabel>
                @*</MudTooltip>*@
            </MudTh>
            <MudTh Class="mud-primary-text">
                @*<MudTooltip Text="The price that you paid for the item">*@
                    <MudTableSortLabel SortLabel="BuyPrice" InitialDirection="MudBlazor.SortDirection.Descending" T="InventoryInvestmentItemDTO">Purchase Price</MudTableSortLabel>
                @*</MudTooltip>*@
            </MudTh>
            <MudTh Class="mud-primary-text">
                @*<MudTooltip Text="The price you could reasonably expect to sell the item for right now by undercutting the lowest 'buy now' price">*@
                    <MudTableSortLabel SortLabel="Description.MarketItem.ResellPrice" InitialDirection="MudBlazor.SortDirection.Descending" T="InventoryInvestmentItemDTO">List Price</MudTableSortLabel>
                @*</MudTooltip>*@
            </MudTh>
            <MudTh Class="mud-primary-text">
                @*<MudTooltip Text="The fees Steam charge when selling items on the Steam Community Market (~12% of sale price)">*@
                    <MudTableSortLabel SortLabel="Description.MarketItem.ResellTax" InitialDirection="MudBlazor.SortDirection.Descending" T="InventoryInvestmentItemDTO">Market Fees</MudTableSortLabel>
                @*</MudTooltip>*@
            </MudTh>
            <MudTh Class="mud-primary-text">
                @*<MudTooltip Text="The profit or loss you'll make if you sold this item at the listing price, after deducting your investment cost and Steam seller fees">*@
                    <span>Profit / Loss</span>
                @*</MudTooltip>*@
            </MudTh>
            <MudTh Class="mud-primary-text">
                @*<MudTooltip Text="Your return on investment, as a percentage. 0% is break-even, a positive number is profit, negative is a loss">*@
                    <span>RoI %</span>
                @*</MudTooltip>*@
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <div class="d-flex flex-row justify-start align-center">
                    <img src="@context.IconUrl" class="my-1 mr-2" style="max-width:32px; max-height:32px;" />
                    <strong>@context.Name</strong>
                    @if (context.Quantity > 1)
                    { 
                        <MudChip Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Primary" Class="ml-1">@context.Quantity</MudChip>
                    }
                </div>
            </MudTd>
            <MudTd>
                @switch(context.AcquiredBy)
                {
                    case SteamProfileInventoryItemAcquisitionType.Store: 
                    {
                        <i class="fas fa-fw fa-shopping-cart mr-1" />
                        @if (context.BuyCurrency != null && context.BuyPrice != null)
                        {
                            @context.BuyCurrency.ToPriceString(context.BuyPrice.Value)
                        }
                        else
                        {
                            <span class="mud-secondary-text">Unknown</span>
                        }
                        break;
                    }
                    case SteamProfileInventoryItemAcquisitionType.Marketplace: 
                    {
                        <i class="fas fa-fw fa-search-dollar mr-1" />
                        @if (context.BuyCurrency != null && context.BuyPrice != null)
                        {
                            @context.BuyCurrency.ToPriceString(context.BuyPrice.Value)
                        }
                        else
                        {
                            <span class="mud-secondary-text">Unknown</span>
                        }
                        break;
                    }
                    case SteamProfileInventoryItemAcquisitionType.Trade: 
                    {
                        <i class="fa fa-fw fa-exchange-alt mr-1" />
                        @if (context.BuyCurrency != null && context.BuyPrice != null)
                        {
                            @context.BuyCurrency.ToPriceString(context.BuyPrice.Value)
                        }
                        else
                        {
                            <span class="mud-secondary-text">Unknown</span>
                        }
                        break;
                    }
                    case SteamProfileInventoryItemAcquisitionType.Gambling: 
                    {
                        <i class="fa fa-fw fa-dice mr-1" />
                        <span>Gambling <span class="mud-secondary-text">(Free)</span></span>
                        break;
                    }
                    case SteamProfileInventoryItemAcquisitionType.Gift: 
                    {
                        <i class="fa fa-fw fa-gift mr-1" />
                        <span>Gift <span class="mud-secondary-text">(Free)</span></span>
                        break;
                    }
                    case SteamProfileInventoryItemAcquisitionType.Drop: 
                    {
                        <i class="fa fa-fw fa-gift mr-1" />
                        <span>Game Drop <span class="mud-secondary-text">(Free)</span></span>
                        break;
                    }
                    default:
                    {
                        @if (context.BuyCurrency != null && context.BuyPrice != null)
                        {
                            @context.BuyCurrency.ToPriceString(context.BuyPrice.Value)
                        }
                        else
                        {
                            <span class="mud-secondary-text">Unknown</span>
                        }
                        break;
                    }
                }
            </MudTd>
            <MudTd>
                @if (context.ResellPrice != null)
                {
                    @State.Currency.ToPriceString(context.ResellPrice.Value) 
                }
                else
                {
                    <span class="mud-secondary-text">—</span>
                }
            </MudTd>
            <MudTd>
                @if (context.ResellTax != null)
                {
                    @State.Currency.ToPriceString(context.ResellTax.Value) 
                }
                else
                {
                    <span class="mud-secondary-text">—</span>
                }
            </MudTd>
            <MudTd>
                @if (context.ResellPrice != null && context.ResellTax != null && (context.ResellPrice - context.ResellTax) > 0)
                {
                    @State.Currency.ToPriceString(context.ResellPrice.Value - context.ResellTax.Value - (context.BuyPriceLocal ?? 0)) 
                }
                else
                {
                    <span class="mud-secondary-text">—</span>
                }
            </MudTd>
            <MudTd Class="@GetItemClass(context)">
                @if (context.ResellPrice != null && context.ResellTax != null && context.BuyPriceLocal != null && context.BuyPriceLocal > 0 && (context.ResellPrice - context.ResellTax) != 0)
                {
                    @(((int)Math.Round(((decimal)(context.ResellPrice.Value - context.ResellTax.Value) / context.BuyPriceLocal.Value) * 100, 0) - 100).ToRoIString()) 
                }
                else
                {
                    <span class="mud-secondary-text">N/A</span>
                }
            </MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd>
                <div class="d-flex flex-row justify-start align-center">
                    <img src="@context.IconUrl" class="my-1 mr-2" style="max-width:32px; max-height:32px;" />
                    <strong>@context.Name</strong>
                    @if (context.Quantity > 1)
                    { 
                        <MudChip Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Primary" Class="ml-1">@context.Quantity</MudChip>
                    }
                </div>
            </MudTd>
            <MudTd>
                <div class="d-flex flex-row justify-space-between align-baseline">
                    <MudSelect T="SteamProfileInventoryItemAcquisitionType" @bind-Value="@context.AcquiredBy" SelectedValuesChanged="@((e) => UpdateItemAcquired(context, context.AcquiredBy))">
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Store">
                            <i class="fas fa-fw fa-shopping-cart" />
                            <span>Store</span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Marketplace">
                            <i class="fas fa-fw fa-search-dollar" />
                            <span>Marketplace</span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Trade">
                            <i class="fa fa-fw fa-exchange-alt" />
                            <span>Trade</span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Gambling">
                            <i class="fa fa-fw fa-dice" />
                            <span>Gambling <span class="mud-secondary-text">(Free)</span></span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Gift">
                            <i class="fa fa-fw fa-gift" />
                            <span>Gift <span class="mud-secondary-text">(Free)</span></span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Drop">
                            <i class="fa fa-fw fa-gift" />
                            <span>Game Drop <span class="mud-secondary-text">(Free)</span></span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Other">
                            <span>Other</span>
                        </MudSelectItem>
                    </MudSelect>
                    @if (context.AcquiredBy == SteamProfileInventoryItemAcquisitionType.Store && context.BuyPriceStore != null)
                    {
                        <span class="mx-4">@State.Currency.ToPriceString(context.BuyPriceStore.Value)</span>
                    }
                    else if(context.AcquiredBy != SteamProfileInventoryItemAcquisitionType.Gambling && 
                            context.AcquiredBy != SteamProfileInventoryItemAcquisitionType.Gift && 
                            context.AcquiredBy != SteamProfileInventoryItemAcquisitionType.Drop)
                    {
                        <MudTextField @bind-Value="@context.BuyPriceText" OnDebounceIntervalElapsed="@((e) => UpdateItemPrice(context, context.BuyPriceText))" DebounceInterval="500" PlaceHolder="Price" AutoFocus="true"
                                      Adornment="@(String.IsNullOrEmpty(State.Currency.SuffixText) ? MudBlazor.Adornment.Start : MudBlazor.Adornment.End)"
                                      AdornmentText="@(String.IsNullOrEmpty(State.Currency.SuffixText) ? State.Currency.PrefixText : State.Currency.SuffixText)" />
                    }
                </div>
            </MudTd>
            <MudTd>
                @if (context.ResellPrice != null)
                {
                    @State.Currency.ToPriceString(context.ResellPrice.Value) 
                }
                else
                {
                    <span class="mud-secondary-text">—</span>
                }
            </MudTd>
            <MudTd>
                @if (context.ResellTax != null)
                {
                    @State.Currency.ToPriceString(context.ResellTax.Value) 
                }
                else
                {
                    <span class="mud-secondary-text">—</span>
                }
            </MudTd>
            <MudTd>
                @if (context.ResellPrice != null && context.ResellTax != null && (context.ResellPrice - context.ResellTax) > 0)
                {
                    @State.Currency.ToPriceString(context.ResellPrice.Value - context.ResellTax.Value - (context.BuyPriceLocal ?? 0)) 
                }
                else
                {
                    <span class="mud-secondary-text">—</span>
                }
            </MudTd>
            <MudTd Class="@GetItemClass(context)">
                @if (context.ResellPrice != null && context.ResellTax != null && context.BuyPriceLocal != null && context.BuyPriceLocal > 0 && (context.ResellPrice - context.ResellTax) > 0)
                {
                    @(((int)Math.Round(((decimal)(context.ResellPrice.Value - context.ResellTax.Value) / context.BuyPriceLocal.Value) * 100, 0) - 100).ToRoIString()) 
                }
                else
                {
                    <span class="mud-secondary-text">N/A</span>
                }
            </MudTd>
        </RowEditingTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {

    [Parameter]
    public string SteamId { get; set; }
    
    [Parameter]
    public string Filter { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    private MudTable<InventoryInvestmentItemDTO> Table { get; set; }
    
    private Exception LoadingError { get; set; }
    
    private async Task<TableData<InventoryInvestmentItemDTO>> LoadItems(TableState state)
    {
        try
        {
            LoadingError = null;
            var response = await Http.GetFromJsonAsync<PaginatedResult<InventoryInvestmentItemDTO>>(
                $"api/profile/{SteamId}/inventory/investment?filter={Uri.EscapeDataString(Filter ?? String.Empty)}&start={state.Page * state.PageSize}&count={state.PageSize}&sortBy={state.SortLabel}&sortDirection={state.SortDirection}"
            );

            return new TableData<InventoryInvestmentItemDTO>() 
            {
                TotalItems = response.Total, 
                Items = response.Items
            };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading inventory items");
            LoadingError = ex;
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task UpdateItemAcquired(InventoryInvestmentItemDTO item, SteamProfileInventoryItemAcquisitionType value)
    {
        try 
        {
            var useStorePrice = (value == SteamProfileInventoryItemAcquisitionType.Store && item.BuyPriceStore != null);
            item.AcquiredBy = value;
            item.BuyCurrency = (useStorePrice ? State.Currency : item.BuyCurrency);
            item.BuyPrice = (useStorePrice ? item.BuyPriceStore : item.BuyPrice);
            item.BuyPriceLocal = (useStorePrice ? item.BuyPriceStore : item.BuyPrice);

            Logger.LogInformation($"Updating acquired from for '{item.Guid}' (value: '{value}', )");
            await Http.PutAsJsonAsync($"api/profile/{SteamId}/inventory/item/{item.Guid}", new UpdateInventoryItemCommand()
            {
                AcquiredBy = item.AcquiredBy,
                CurrencyGuid = item.BuyCurrency?.Guid,
                BuyPrice = item.BuyPrice
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error updating item acquired by for '{item.Guid}' (value: '{value}')");
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task UpdateItemPrice(InventoryInvestmentItemDTO item, string value)
    {
        var buyPrice = value.SteamPriceAsInt(useDecimalShortCircuit: false);
        if (buyPrice != item.BuyPrice)
        {
            try 
            {
                item.BuyCurrency = State.Currency;
                item.BuyPrice = buyPrice;
                item.BuyPriceLocal = buyPrice;

                Logger.LogInformation($"Updating buy price for '{item.Guid}' (raw: '{value}', old: '{item.BuyPrice}', new: '{buyPrice}', currency: '{item.BuyCurrency.CultureName}')");
                await Http.PutAsJsonAsync($"api/profile/{SteamId}/inventory/item/{item.Guid}", new UpdateInventoryItemCommand()
                {
                    CurrencyGuid = State.Currency.Guid,
                    BuyPrice = buyPrice
                });
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error updating item buy price for '{item.Guid}' (value: '{value}')");
            }
            finally
            {
                StateHasChanged();
            }
        }
    }
    
    private string GetItemClass(InventoryInvestmentItemDTO item, int index = 0)
    {
        if (item.BuyPrice == null || item.BuyPriceLocal <= 0 || item.ResellPrice == null || item.ResellTax == null)
        {
            return null;
        }
        var roi = ((int)Math.Round(((decimal)(item.ResellPrice.Value - item.ResellTax.Value) / item.BuyPriceLocal.Value) * 100, 0));
        if (roi > 100)
        {
            return "mud-success";
        }
        if (roi < 100)
        {
            return "mud-error";
        }
        return null;
    }
    
    private void OnSearch(string text)
    {
        Filter = text;
        Table.ReloadServerData();
    }

}
